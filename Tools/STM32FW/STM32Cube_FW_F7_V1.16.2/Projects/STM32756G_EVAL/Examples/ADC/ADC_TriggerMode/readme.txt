/**
  @page ADC_TriggerMode ADC3 conversion using Trigger Mode

  @verbatim
  ******************************************************************************
  * @file    ADC/ADC_TriggerMode/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the ADC Trigger Mode example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

How to use ADC3 and TIM2 to continuously convert data from an ADC channel. 
Each time an external trigger is generated by TIM2 a new conversion is started 
by the ADC.

Each time an external trigger is generated by TIM2 a new conversion is started by ADC3.

At the end of conversion, an interrupt is generated and the converted data of 
ADC3 DR register is affected to the uhADCxConvertedValue variable in the ADC 
conversion complete call back function (HAL_ADC_ConvCpltCallback).

The timer is used to trigger an ADC measure at 20 KHz.

Configuration of the timer to trig an ADC measure at 20 Khz:
  From the reference manual, Reset and Clock control part, Timer 2 is clocked on PCLK1.
  The function SystemClock_Config() configures the clock divider as follows:
  1) The system clock is 216 MHz.
  2) AHB  Prescaler = 1 => AHB clock is 216 MHz.
  3) APB1 Prescaler = 4 => PCLK1 clock is 216 MHz/4.
  4) For Timer 2, as APB1 Prescaler = 4, Timer 2 Clock is PCLK1 clock X 2 = 216 MHz/2.

  For a 20 Khz frequency, we need (216 MHz/2) / 20 KHz = 5400 clock cycle.
  So, in TIM_Config function, we set the following period: htim.Init.Period = 5400;

The voltage on pin PF.10 (ADC_CHANNEL_8)can vary using the board potentiometer RV1.
The converted value is monitored through debugger: uhADCxConvertedValue variable.

The uhADCxConvertedValue read value is coded on 12 bits, the Vref+ reference voltage is connected 
on the board to VDD (+3.3V), the Vref- reference voltage is connected on the board to the ground.
To convert the read value in volts, here is the equation to apply :
Voltage = uhADCxConvertedValue * (Vref+ - Vref-) / (2^12) = uhADCxConvertedValue * 3.3 / 4096

Remark: LED3 is ON when there is an error in initialization.

@par Keywords

Analog, ADC, Analog to Digital, Trigger mode, Continuous conversion, Timer, Measurement, Voltage

@Note If the user code size exceeds the DTCM-RAM size or starts from internal cacheable memories (SRAM1 and SRAM2),that is shared between several processors,
      then it is highly recommended to enable the CPU cache and maintain its coherence at application level.
      The address and the size of cacheable buffers (shared between CPU and other masters)  must be properly updated to be aligned to cache line size (32 bytes).

@Note It is recommended to enable the cache and maintain its coherence, but depending on the use case
      It is also possible to configure the MPU as "Write through", to guarantee the write access coherence.
      In that case, the MPU must be configured as Cacheable/Bufferable/Not Shareable.
      Even though the user must manage the cache coherence for read accesses.
      Please refer to the AN4838 “Managing memory protection unit (MPU) in STM32 MCUs”
      Please refer to the AN4839 “Level 1 cache on STM32F7 Series”

@par Directory contents 

  - ADC/ADC_TriggerMode/Inc/stm32f7xx_hal_conf.h    HAL configuration file
  - ADC/ADC_TriggerMode/Inc/stm32f7xx_it.h          DMA interrupt handlers header file
  - ADC/ADC_TriggerMode/Inc/main.h                  Header for main.c module  
  - ADC/ADC_TriggerMode/Src/stm32f7xx_it.c          DMA interrupt handlers
  - ADC/ADC_TriggerMode/Src/main.c                  Main program
  - ADC/ADC_TriggerMode/Src/stm32f7xx_hal_msp.c     HAL MSP file 
  - ADC/ADC_TriggerMode/Src/system_stm32f7xx.c      STM32F7xx system source file

@par Hardware and Software environment 

  - This example runs on STM32F756xx/STM32F746xx devices.

  - This example has been tested with STM327x6G-EVAL board revB and can be
    easily tailored to any other supported device and development board.
    
  - STM327x6G-EVAL revB Set-up
    - Use the Potentiometer (RV1) of the Eval board (connected to  PF.10).
    - JP24 must be fitted in 1-2 positions
    
@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example


 */
