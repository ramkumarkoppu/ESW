/*
 * main.cpp
 *
 *  Created on: Dec 24, 2021
 *      Author: rkoppu
 */
#include <cstdint>
#include <cstring>
#include <cstdio>
#include "main.h"

#if defined( USE_PWM_TIMER_EXAMPLE )
#define PWM_CHANNELS	(1U)
#endif // USE_PWM_TIMER_EXAMPLE

UART_HandleTypeDef huart3;

#if defined( USE_PWM_TIMER_EXAMPLE )
TIM_HandleTypeDef hTimer2;
#endif //USE_PWM_TIMER_EXAMPLE

#if defined( USE_ADC_EXAMPLE )
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;
#endif //USE_PWM_TIMER_EXAMPLE

#if defined( USE_PWM_TIMER_EXAMPLE )
static std::uint32_t pulse_values[ PWM_CHANNELS ];
#endif // USE_PWM_TIMER_EXAMPLE


#if defined( USE_PWM_TIMER_EXAMPLE )
static void TIM2_init( void );
#endif // USE_PWM_TIMER_EXAMPLE

#if defined( USE_ADC_EXAMPLE )
static void DMA2_init( void );
static void ADC1_init( void );
#endif // USE_ADC_EXAMPLE

static void SystemClock_Config( void );
static void UART3_Init( void );
static void Error_Handler( void );

int main( void )
{
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* Configure the system clock */
	SystemClock_Config();

	// Initialize UART debug console.
	UART3_Init();

#if defined( USE_PWM_TIMER_EXAMPLE )
	TIM2_init();
#endif // USE_PWM_TIMER_EXAMPLE

#if defined( USE_PWM_TIMER_EXAMPLE )
	if ( HAL_TIM_PWM_Start_IT( &hTimer2, TIM_CHANNEL_2 ) != HAL_OK)
	{
		// Error in Timer Start.
		Error_Handler();
	}
#endif // USE_PWM_TIMER_EXAMPLE

#if defined( USE_ADC_EXAMPLE )
	DMA2_init();
	ADC1_init();
#endif // USE_ADC_EXAMPLE

	while(true)
	{
	}

	return 0;
}

#ifdef USE_PWM_TIMER_EXAMPLE
extern "C" void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	static bool rool_back{false};

	// Logic to update duty cycle on the fly goes here.
	if ( !rool_back )
	{
		if ( __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_2 ) <= hTimer2.Init.Period )
		{
			pulse_values[0]++;
		}
		else if ( __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_2 ) > hTimer2.Init.Period )
		{
			rool_back = true;
		}
	}

	if ( rool_back )
	{
		if ( __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_2 ) > 0 )
		{
			pulse_values[0]--;
		}
		else if ( __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_2 ) == 0 )
		{
			pulse_values[0] = 0;
			rool_back = false;
		}
	}

	__HAL_TIM_SET_COMPARE( htim, TIM_CHANNEL_2, pulse_values[0] );
}
#endif // USE_PWM_TIMER_EXAMPLE

static void SystemClock_Config( void )
{
	// Configure the Clock Source.
	RCC_OscInitTypeDef Osc_init{0};

	/* Configure PLL to generate 50MHz clock for SYSCLK using HSE as source. */

	// This configuration requires Power Scale 1 and Over drive OFF.
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
	__HAL_PWR_OVERDRIVE_DISABLE();

	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	Osc_init.HSEState = RCC_HSE_BYPASS;
	Osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	Osc_init.PLL.PLLState = RCC_PLL_ON;
	Osc_init.PLL.PLLM = 4;
	Osc_init.PLL.PLLN = 50;
	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
	/* End of 120Mhz specific configuration */
	Osc_init.PLL.PLLQ = 2;
	Osc_init.PLL.PLLR = 2;

	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
	{
		// Error in Oscillator or PLL configuration.
		Error_Handler();
	}

	// Configure the various clocks.
	RCC_ClkInitTypeDef Clk_init{0};
	Clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	Clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	std::uint32_t flash_latency{FLASH_LATENCY_1};
	Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;	// for 50HHz HCLK.
	Clk_init.APB1CLKDivider = RCC_HCLK_DIV1;	// for 50HHz PCLK1.
	Clk_init.APB2CLKDivider = RCC_HCLK_DIV1;	// for 50HHz PCLK2.
	if ( HAL_RCC_ClockConfig( &Clk_init, flash_latency ) != HAL_OK )
	{
		// Error in Clock configuration.
		Error_Handler();
	}

	// Disable HSI
	__HAL_RCC_HSI_DISABLE();

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
}

/* USART3 Initialization Function */
static void UART3_Init( void )
{
	std::memset( &huart3, 0, sizeof(huart3) );
	/* UART High level initilization */
	huart3.Instance = USART3;

	huart3.Init.BaudRate = 115200U;
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	if (HAL_UART_Init( &huart3 ) != HAL_OK)
	{
		// Initialization Error.
		Error_Handler();
	}
}

static void Error_Handler( void )
{
	for (;;);
}

#if defined( USE_PWM_TIMER_EXAMPLE )
static void TIM2_init( void )
{
	hTimer2.Instance = TIM2;
	hTimer2.Init.Prescaler = 4;
	hTimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
	hTimer2.Init.Period = 10000 - 1; // Generate update event at every 1 ms.
	if ( HAL_TIM_PWM_Init( &hTimer2 ) != HAL_OK )
	{
		// Error in initializing Timer.
		Error_Handler();
	}
	TIM_OC_InitTypeDef tim_OC_channels_config{0};
	tim_OC_channels_config.OCMode = TIM_OCMODE_PWM1;
	tim_OC_channels_config.OCPolarity = TIM_OCPOLARITY_HIGH;
	for (std::uint8_t chan_idx{0}; chan_idx < PWM_CHANNELS; chan_idx++)
	{
		// Compute initial duty cycle for each channel.
		switch(chan_idx)
		{
		case 0:
			pulse_values[chan_idx] = hTimer2.Init.Period * 0.0; // 0% Duty cycle.
			break;
		default:
			break;
		}

		tim_OC_channels_config.Pulse = pulse_values[chan_idx];

		if ( HAL_TIM_PWM_ConfigChannel( &hTimer2, &tim_OC_channels_config, ( TIM_CHANNEL_1 + ( chan_idx * 4) ) ) != HAL_OK)
		{
			// Error in Timer channel configuration.
			Error_Handler();
		}
	}
}
#endif // USE_PWM_TIMER_EXAMPLE

#if defined( USE_ADC_EXAMPLE )
static void DMA2_init( void )
{
	// Enable Clock for DMA2.
	__HAL_RCC_DMA2_CLK_ENABLE();

	// Configure NVIC for DMA2 Stream 4 interrupt.
	HAL_NVIC_SetPriority( DMA2_Stream4_IRQn, 0x0F, 0x0);
	HAL_NVIC_EnableIRQ( DMA2_Stream4_IRQn );
}

static void ADC1_init( void )
{

}
#endif // USE_ADC_EXAMPLE
