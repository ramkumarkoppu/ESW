/*
 * main.cpp
 *
 *  Created on: Dec 24, 2021
 *      Author: rkoppu
 */
#include <cstdint>
#include <cstring>
#include <cstdio>
#include "main.h"

#ifdef USE_UART_EXAMPLE
UART_HandleTypeDef huart3;
static char recv_data[64];
std::uint8_t cnt{0};
#endif // USE_UART_EXAMPLE

#ifdef USE_BASIC_TIMER_EXAMPLE
static TIM_HandleTypeDef hTimer6;
static void TIM6_init( void );
static void LED_init( void );
#endif // USE_BASIC_TIMER_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
static void SystemClock_Config( void );
static void displayClkInfo( void );
#endif

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE ) || defined( USE_UART_EXAMPLE )
static void UART3_Init( void );
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE or USE_UART_EXAMPLE

static void Error_Handler( void );
#ifdef USE_UART_EXAMPLE
static inline char convert_to_Upper( char c );
#endif // USE_UART_EXAMPLE

int main( void )
{
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
	// Print current settings of clocks.
	displayClkInfo();

	/* Configure the system clock */
	SystemClock_Config();
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE

#ifdef USE_UART_EXAMPLE
	const char *pMsg = "Hello, how are you?\r";
	if ( HAL_UART_Transmit( &huart3, (const std::uint8_t *)pMsg, std::strlen(pMsg), HAL_MAX_DELAY ) != HAL_OK )
	{
		// Error in Transmission.
		Error_Handler();
	}

	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
#endif // USE_UART_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
	// Print current settings of clocks.
	displayClkInfo();
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE

#ifdef USE_BASIC_TIMER_EXAMPLE
	TIM6_init();
	LED_init();
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
#endif // USE_BASIC_TIMER_EXAMPLE

	while(true)
	{

	}

	return 0;
}

#ifdef USE_UART_EXAMPLE
/**
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
{
	if ( (recv_data[cnt] != '\r') && (cnt < ( sizeof(recv_data) / sizeof(recv_data[0]))) )
	{
		cnt++;
		HAL_UART_Receive_IT( &huart3, (std::uint8_t *)&recv_data[cnt], 1 );
	}
	else
	{
		for (std::uint8_t i{0}; i < cnt; i++)
		{
			recv_data[i] = convert_to_Upper( recv_data[i] );
		}
		cnt++;
		recv_data[cnt] = '\n';

		if ( HAL_UART_Transmit_IT( &huart3, (const std::uint8_t *)recv_data, cnt) != HAL_OK )
		{
			// Error in Transmission.
			Error_Handler();
		}
	}
}

/**
  * @brief  Tx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback( UART_HandleTypeDef *huart )
{

}

#endif // USE_UART_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
static void SystemClock_Config( void )
{
#ifdef USE_HSE_EXAMPLE
	// Configure the Clock Source.
	RCC_OscInitTypeDef Osc_init{0};
	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	Osc_init.HSEState = RCC_HSE_BYPASS;
	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
	{
		// Error in Oscillator configuration.
		Error_Handler();
	}

	// Configure the various clocks.
	RCC_ClkInitTypeDef Clk_init{0};
	Clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	Clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
	Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
	Clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
	Clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
	if ( HAL_RCC_ClockConfig( &Clk_init, FLASH_LATENCY_0 ) != HAL_OK )
	{
		// Error in Clock configuration.
		Error_Handler();
	}

	// Disable HSI
	__HAL_RCC_HSI_DISABLE();

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
#endif // USE_HSE_EXAMPLE

#ifdef USE_PLL_EXAMPLE
	// Configure the Clock Source.
	RCC_OscInitTypeDef Osc_init{0};
//	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
//	Osc_init.HSIState = RCC_HSI_ON;
//	Osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
//	Osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
//	Osc_init.PLL.PLLState = RCC_PLL_ON;
	/* Configure PLL to generate 50MHz clock for SYSCLK. */
//	Osc_init.PLL.PLLM = 16;
//	Osc_init.PLL.PLLN = 100;
//	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
	/* End of 50Mhz specific configuration */
	/* Configure PLL to generate 84MHz clock for SYSCLK. */
//	Osc_init.PLL.PLLM = 16;
//	Osc_init.PLL.PLLN = 168;
//	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
	/* End of 84Mhz specific configuration */
	/* Configure PLL to generate 120MHz clock for SYSCLK. */
//	Osc_init.PLL.PLLM = 16;
//	Osc_init.PLL.PLLN = 240;
//	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
	/* End of 120Mhz specific configuration */
	/* Configure PLL to generate 216MHz clock for SYSCLK using HSE as source. */

	// This configuration requires Power Scale 1 and Over drive ON.
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
	__HAL_PWR_OVERDRIVE_ENABLE();

	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	Osc_init.HSEState = RCC_HSE_BYPASS;
	Osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	Osc_init.PLL.PLLState = RCC_PLL_ON;
	Osc_init.PLL.PLLM = 4;
	Osc_init.PLL.PLLN = 216;
	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
	/* End of 120Mhz specific configuration */
	Osc_init.PLL.PLLQ = 2;
	Osc_init.PLL.PLLR = 2;
	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
	{
		// Error in Oscillator or PLL configuration.
		Error_Handler();
	}

	// Configure the various clocks.
	RCC_ClkInitTypeDef Clk_init{0};
	Clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	Clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	//Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1; // for 50, 84 and 120Mhz configurations.
	//Clk_init.APB1CLKDivider = RCC_HCLK_DIV2;	// for 50 and 84 configurations.
	//Clk_init.APB1CLKDivider = RCC_HCLK_DIV4;	// for 128HHz configuration.
	//Clk_init.APB2CLKDivider = RCC_HCLK_DIV2;	// for 50, 84 and 128MHz configurations.
	std::uint32_t flash_latency{FLASH_LATENCY_0};
	//flash_latency = FLASH_LATENCY_1; // for 50MHz configuration.
	//flash_latency = FLASH_LATENCY_2; // for 84MHz configuration.
	// for 216MHz configuration.
	Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
	Clk_init.APB1CLKDivider = RCC_HCLK_DIV4;	// for 54HHz PCLK1.
	Clk_init.APB2CLKDivider = RCC_HCLK_DIV2;	// for 108HHz PCLK2.
//	flash_latency = FLASH_LATENCY_4; // for 120MHz configuration.
	flash_latency = FLASH_LATENCY_7; // for 216MHz configuration.
	if ( HAL_RCC_ClockConfig( &Clk_init, flash_latency ) != HAL_OK )
	{
		// Error in Clock configuration.
		Error_Handler();
	}

	// Disable HSI
	__HAL_RCC_HSI_DISABLE();

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
#endif // USE_PLL_EXAMPLE
}
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE ) || defined( USE_UART_EXAMPLE )
/* USART3 Initialization Function */
static void UART3_Init( void )
{
	std::memset( &huart3, 0, sizeof(huart3) );
	/* UART High level initilization */
	huart3.Instance = USART3;

	huart3.Init.BaudRate = 115200U;
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	if (HAL_UART_Init( &huart3 ) != HAL_OK)
	{
		// Initialization Error.
		Error_Handler();
	}
}
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE or USE_UART_EXAMPLE

#ifdef USE_UART_EXAMPLE
static inline char convert_to_Upper( char c )
{
	char retVal{c};

	if ( (c >= 'a') && (c <= 'z') )
	{
		retVal -= ('a' - 'A');
	}

	return retVal;
}
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
	for (;;);
}

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
static void displayClkInfo( void )
{
	char msg[1024];

	/* Configure the UART for debug console */
	UART3_Init();

	std::sprintf (msg, "SYSCLK:%luMHZ\r\n", ( HAL_RCC_GetSysClockFreq() / 1000000 ) );
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
	std::sprintf( msg, "HCLK:%luMHZ\r\n", ( HAL_RCC_GetHCLKFreq() / 1000000 ) );
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
	std::sprintf( msg, "PCLK1:%luMHZ\r\n", ( HAL_RCC_GetPCLK1Freq() / 1000000 ) );
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
	std::sprintf( msg, "PCLK2:%luMHZ\r\n", ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
}
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE

#ifdef USE_BASIC_TIMER_EXAMPLE
static void TIM6_init( void )
{
	/* Configure basic timer to generate timer update event for every 100ms. */
	hTimer6.Instance = TIM6;
	hTimer6.Init.CounterMode = TIM_COUNTERMODE_UP;
	hTimer6.Init.Prescaler = 24;
	hTimer6.Init.Period = 64000 - 1;
	if ( HAL_TIM_Base_Init( &hTimer6 ) != HAL_OK )
	{
		// Error in Timer Configuration.
		Error_Handler();
	}
}

static void LED_init( void )
{
	/* Blue User LED is connected to GPIOB pin 7. */
	GPIO_InitTypeDef LED_pin_config{0};
	LED_pin_config.Pin = GPIO_PIN_7;
	LED_pin_config.Mode = GPIO_MODE_OUTPUT_PP;
	LED_pin_config.Speed = GPIO_SPEED_FREQ_LOW;
	LED_pin_config.Pull = GPIO_NOPULL;
	HAL_GPIO_Init( GPIOB, &LED_pin_config);
	// Set initial state to low.
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
}
#endif // USE_BASIC_TIMER_EXAMPLE
