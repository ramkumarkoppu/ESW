
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c58  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e58  08001e58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e58  08001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e60  08001e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e60  08001e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e64  08001e64  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08001e74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001e74  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a220  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a5  00000000  00000000  0002a25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  0002b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289ab  00000000  00000000  0002c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008697  00000000  00000000  00054b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a51  00000000  00000000  0005d1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ec3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e0  00000000  00000000  0014ec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001e38 	.word	0x08001e38

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001e38 	.word	0x08001e38

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000534:	f000 f946 	bl	80007c4 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 8000538:	f000 fa75 	bl	8000a26 <HAL_SYSTICK_IRQHandler>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <main>:
#ifdef USE_UART_EXAMPLE
static inline char convert_to_Upper(char c);
#endif // USE_UART_EXAMPLE

int main( void )
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000544:	f000 f901 	bl	800074a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000548:	f000 f803 	bl	8000552 <_ZL18SystemClock_Configv>

	/* Configure the UART for debug console */
	UART3_Init();
 800054c:	f000 f822 	bl	8000594 <_ZL10UART3_Initv>
	}

	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
#endif // USE_UART_EXAMPLE

	while(true)
 8000550:	e7fe      	b.n	8000550 <main+0x10>

08000552 <_ZL18SystemClock_Configv>:
}

#endif // USE_UART_EXAMPLE

static void SystemClock_Config( void )
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b08e      	sub	sp, #56	; 0x38
 8000556:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef Osc_init{0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fc62 	bl	8001e28 <memset>
	// Configure the Clock Source.
	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
	Osc_init.HSEState = RCC_HSE_BYPASS;
 8000568:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800056c:	60bb      	str	r3, [r7, #8]
	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fc11 	bl	8000d98 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_ZL18SystemClock_Configv+0x38>
	{
		// Error in Oscillator configuration.
		Error_Handler();
 8000586:	f000 f839 	bl	80005fc <_ZL13Error_Handlerv>
	}


}
 800058a:	bf00      	nop
 800058c:	3738      	adds	r7, #56	; 0x38
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* UART High level initilization */
	huart3.Instance = USART3;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <_ZL10UART3_Initv+0x64>)
 800059c:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart3) != HAL_OK)
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <_ZL10UART3_Initv+0x60>)
 80005d8:	f000 ffa2 	bl	8001520 <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf14      	ite	ne
 80005e2:	2301      	movne	r3, #1
 80005e4:	2300      	moveq	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <_ZL10UART3_Initv+0x5c>
	{
		// Initialization Error.
		Error_Handler();
 80005ec:	f000 f806 	bl	80005fc <_ZL13Error_Handlerv>
	}
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028
 80005f8:	40004800 	.word	0x40004800

080005fc <_ZL13Error_Handlerv>:
	return retVal;
}
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	for (;;);
 8000600:	e7fe      	b.n	8000600 <_ZL13Error_Handlerv+0x4>
	...

08000604 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f9cb 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <HAL_MspInit+0x40>)
 8000610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <HAL_MspInit+0x40>)
 8000614:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000618:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	f06f 0009 	mvn.w	r0, #9
 8000622:	f000 f9ca 	bl	80009ba <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	f06f 000a 	mvn.w	r0, #10
 800062e:	f000 f9c4 	bl	80009ba <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	f06f 000b 	mvn.w	r0, #11
 800063a:	f000 f9be 	bl	80009ba <HAL_NVIC_SetPriority>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <HAL_UART_MspInit+0x84>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a19      	ldr	r2, [pc, #100]	; (80006cc <HAL_UART_MspInit+0x84>)
 8000666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_UART_MspInit+0x84>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_UART_MspInit+0x84>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <HAL_UART_MspInit+0x84>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_UART_MspInit+0x84>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000690:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000694:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 80006a2:	2307      	movs	r3, #7
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &USART3_gpio_config);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <HAL_UART_MspInit+0x88>)
 80006ae:	f000 f9c7 	bl	8000a40 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority(USART3_IRQn, 0x0F, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	210f      	movs	r1, #15
 80006b6:	2027      	movs	r0, #39	; 0x27
 80006b8:	f000 f97f 	bl	80009ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80006bc:	2027      	movs	r0, #39	; 0x27
 80006be:	f000 f998 	bl	80009f2 <HAL_NVIC_EnableIRQ>
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020c00 	.word	0x40020c00

080006d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006fe:	490e      	ldr	r1, [pc, #56]	; (8000738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000714:	4c0b      	ldr	r4, [pc, #44]	; (8000744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000722:	f7ff ffd7 	bl	80006d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f001 fb5b 	bl	8001de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072a:	f7ff ff09 	bl	8000540 <main>
  bx  lr    
 800072e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800073c:	08001e68 	.word	0x08001e68
  ldr r2, =_sbss
 8000740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000744:	200000b0 	.word	0x200000b0

08000748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC_IRQHandler>

0800074a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f000 f928 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 f805 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075a:	f7ff ff53 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x54>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f943 	bl	8000a0e <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e00e      	b.n	80007b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d80a      	bhi.n	80007ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f000 f90b 	bl	80009ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_InitTick+0x5c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x20>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_IncTick+0x24>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_IncTick+0x24>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000008 	.word	0x20000008
 80007e8:	200000ac 	.word	0x200000ac

080007ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <HAL_GetTick+0x14>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200000ac 	.word	0x200000ac

08000804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <__NVIC_SetPriorityGrouping+0x40>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	4313      	orrs	r3, r2
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x40>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00
 8000848:	05fa0000 	.word	0x05fa0000

0800084c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <__NVIC_GetPriorityGrouping+0x18>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	f003 0307 	and.w	r3, r3, #7
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	2b00      	cmp	r3, #0
 8000878:	db0b      	blt.n	8000892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 021f 	and.w	r2, r3, #31
 8000880:	4907      	ldr	r1, [pc, #28]	; (80008a0 <__NVIC_EnableIRQ+0x38>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	2001      	movs	r0, #1
 800088a:	fa00 f202 	lsl.w	r2, r0, r2
 800088e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff8e 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff29 	bl	8000804 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff3e 	bl	800084c <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff8e 	bl	80008f8 <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5d 	bl	80008a4 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff31 	bl	8000868 <__NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffa2 	bl	8000960 <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a2a:	f000 f802 	bl	8000a32 <HAL_SYSTICK_Callback>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	; 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
 8000a5e:	e175      	b.n	8000d4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a60:	2201      	movs	r2, #1
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	f040 8164 	bne.w	8000d46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d005      	beq.n	8000a96 <HAL_GPIO_Init+0x56>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d130      	bne.n	8000af8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000acc:	2201      	movs	r2, #1
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	091b      	lsrs	r3, r3, #4
 8000ae2:	f003 0201 	and.w	r2, r3, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d017      	beq.n	8000b34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d123      	bne.n	8000b88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	08da      	lsrs	r2, r3, #3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3208      	adds	r2, #8
 8000b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	691a      	ldr	r2, [r3, #16]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	08da      	lsrs	r2, r3, #3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3208      	adds	r2, #8
 8000b82:	69b9      	ldr	r1, [r7, #24]
 8000b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0203 	and.w	r2, r3, #3
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 80be 	beq.w	8000d46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b66      	ldr	r3, [pc, #408]	; (8000d64 <HAL_GPIO_Init+0x324>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a65      	ldr	r2, [pc, #404]	; (8000d64 <HAL_GPIO_Init+0x324>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <HAL_GPIO_Init+0x324>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000be2:	4a61      	ldr	r2, [pc, #388]	; (8000d68 <HAL_GPIO_Init+0x328>)
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a58      	ldr	r2, [pc, #352]	; (8000d6c <HAL_GPIO_Init+0x32c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d037      	beq.n	8000c7e <HAL_GPIO_Init+0x23e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a57      	ldr	r2, [pc, #348]	; (8000d70 <HAL_GPIO_Init+0x330>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d031      	beq.n	8000c7a <HAL_GPIO_Init+0x23a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a56      	ldr	r2, [pc, #344]	; (8000d74 <HAL_GPIO_Init+0x334>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d02b      	beq.n	8000c76 <HAL_GPIO_Init+0x236>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a55      	ldr	r2, [pc, #340]	; (8000d78 <HAL_GPIO_Init+0x338>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d025      	beq.n	8000c72 <HAL_GPIO_Init+0x232>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a54      	ldr	r2, [pc, #336]	; (8000d7c <HAL_GPIO_Init+0x33c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d01f      	beq.n	8000c6e <HAL_GPIO_Init+0x22e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a53      	ldr	r2, [pc, #332]	; (8000d80 <HAL_GPIO_Init+0x340>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d019      	beq.n	8000c6a <HAL_GPIO_Init+0x22a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <HAL_GPIO_Init+0x344>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0x226>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a51      	ldr	r2, [pc, #324]	; (8000d88 <HAL_GPIO_Init+0x348>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d00d      	beq.n	8000c62 <HAL_GPIO_Init+0x222>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <HAL_GPIO_Init+0x34c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d007      	beq.n	8000c5e <HAL_GPIO_Init+0x21e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a4f      	ldr	r2, [pc, #316]	; (8000d90 <HAL_GPIO_Init+0x350>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_GPIO_Init+0x21a>
 8000c56:	2309      	movs	r3, #9
 8000c58:	e012      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	e010      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c5e:	2308      	movs	r3, #8
 8000c60:	e00e      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c62:	2307      	movs	r3, #7
 8000c64:	e00c      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c66:	2306      	movs	r3, #6
 8000c68:	e00a      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	e008      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c72:	2303      	movs	r3, #3
 8000c74:	e004      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c76:	2302      	movs	r3, #2
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x240>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	f002 0203 	and.w	r2, r2, #3
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	4093      	lsls	r3, r2
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c90:	4935      	ldr	r1, [pc, #212]	; (8000d68 <HAL_GPIO_Init+0x328>)
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cc2:	4a34      	ldr	r2, [pc, #208]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cec:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <HAL_GPIO_Init+0x354>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	2b0f      	cmp	r3, #15
 8000d50:	f67f ae86 	bls.w	8000a60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020c00 	.word	0x40020c00
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40021400 	.word	0x40021400
 8000d84:	40021800 	.word	0x40021800
 8000d88:	40021c00 	.word	0x40021c00
 8000d8c:	40022000 	.word	0x40022000
 8000d90:	40022400 	.word	0x40022400
 8000d94:	40013c00 	.word	0x40013c00

08000d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e29b      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8087 	beq.w	8000eca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dbc:	4b96      	ldr	r3, [pc, #600]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d00c      	beq.n	8000de2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dc8:	4b93      	ldr	r3, [pc, #588]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d112      	bne.n	8000dfa <HAL_RCC_OscConfig+0x62>
 8000dd4:	4b90      	ldr	r3, [pc, #576]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000de0:	d10b      	bne.n	8000dfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de2:	4b8d      	ldr	r3, [pc, #564]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d06c      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x130>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d168      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e275      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x7a>
 8000e04:	4b84      	ldr	r3, [pc, #528]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a83      	ldr	r2, [pc, #524]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e02e      	b.n	8000e70 <HAL_RCC_OscConfig+0xd8>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x9c>
 8000e1a:	4b7f      	ldr	r3, [pc, #508]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a7e      	ldr	r2, [pc, #504]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	4b7c      	ldr	r3, [pc, #496]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a7b      	ldr	r2, [pc, #492]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e01d      	b.n	8000e70 <HAL_RCC_OscConfig+0xd8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0xc0>
 8000e3e:	4b76      	ldr	r3, [pc, #472]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a75      	ldr	r2, [pc, #468]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b73      	ldr	r3, [pc, #460]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a72      	ldr	r2, [pc, #456]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0xd8>
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a6e      	ldr	r2, [pc, #440]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b6c      	ldr	r3, [pc, #432]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a6b      	ldr	r2, [pc, #428]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e78:	f7ff fcb8 	bl	80007ec <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fcb4 	bl	80007ec <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e229      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	4b61      	ldr	r3, [pc, #388]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe8>
 8000e9e:	e014      	b.n	8000eca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fca4 	bl	80007ec <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fca0 	bl	80007ec <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e215      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x110>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d069      	beq.n	8000faa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ed6:	4b50      	ldr	r3, [pc, #320]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d11c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x190>
 8000eee:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <HAL_RCC_OscConfig+0x17a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1e9      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	493d      	ldr	r1, [pc, #244]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e040      	b.n	8000faa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a38      	ldr	r2, [pc, #224]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc56 	bl	80007ec <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc52 	bl	80007ec <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e1c7      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f56:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f0      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4929      	ldr	r1, [pc, #164]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
 8000f76:	e018      	b.n	8000faa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fc32 	bl	80007ec <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc2e 	bl	80007ec <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e1a3      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d038      	beq.n	8001028 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fca:	f7ff fc0f 	bl	80007ec <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fc0b 	bl	80007ec <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e180      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x23a>
 8000ff0:	e01a      	b.n	8001028 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_RCC_OscConfig+0x280>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fbf5 	bl	80007ec <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	e00a      	b.n	800101c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001006:	f7ff fbf1 	bl	80007ec <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d903      	bls.n	800101c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e166      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
 8001018:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800101c:	4b92      	ldr	r3, [pc, #584]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 800101e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ee      	bne.n	8001006 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80a4 	beq.w	800117e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001036:	4b8c      	ldr	r3, [pc, #560]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10d      	bne.n	800105e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b89      	ldr	r3, [pc, #548]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a88      	ldr	r2, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b86      	ldr	r3, [pc, #536]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800105a:	2301      	movs	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105e:	4b83      	ldr	r3, [pc, #524]	; (800126c <HAL_RCC_OscConfig+0x4d4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	2b00      	cmp	r3, #0
 8001068:	d118      	bne.n	800109c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800106a:	4b80      	ldr	r3, [pc, #512]	; (800126c <HAL_RCC_OscConfig+0x4d4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a7f      	ldr	r2, [pc, #508]	; (800126c <HAL_RCC_OscConfig+0x4d4>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbb9 	bl	80007ec <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107e:	f7ff fbb5 	bl	80007ec <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e12a      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001090:	4b76      	ldr	r3, [pc, #472]	; (800126c <HAL_RCC_OscConfig+0x4d4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x31a>
 80010a4:	4b70      	ldr	r3, [pc, #448]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a8:	4a6f      	ldr	r2, [pc, #444]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6713      	str	r3, [r2, #112]	; 0x70
 80010b0:	e02d      	b.n	800110e <HAL_RCC_OscConfig+0x376>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x33c>
 80010ba:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010be:	4a6a      	ldr	r2, [pc, #424]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6713      	str	r3, [r2, #112]	; 0x70
 80010c6:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ca:	4a67      	ldr	r2, [pc, #412]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6713      	str	r3, [r2, #112]	; 0x70
 80010d2:	e01c      	b.n	800110e <HAL_RCC_OscConfig+0x376>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d10c      	bne.n	80010f6 <HAL_RCC_OscConfig+0x35e>
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e0:	4a61      	ldr	r2, [pc, #388]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6713      	str	r3, [r2, #112]	; 0x70
 80010e8:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ec:	4a5e      	ldr	r2, [pc, #376]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6713      	str	r3, [r2, #112]	; 0x70
 80010f4:	e00b      	b.n	800110e <HAL_RCC_OscConfig+0x376>
 80010f6:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fa:	4a5b      	ldr	r2, [pc, #364]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6713      	str	r3, [r2, #112]	; 0x70
 8001102:	4b59      	ldr	r3, [pc, #356]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001106:	4a58      	ldr	r2, [pc, #352]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d015      	beq.n	8001142 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001116:	f7ff fb69 	bl	80007ec <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb65 	bl	80007ec <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f241 3288 	movw	r2, #5000	; 0x1388
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e0d8      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	4b4c      	ldr	r3, [pc, #304]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0ee      	beq.n	800111e <HAL_RCC_OscConfig+0x386>
 8001140:	e014      	b.n	800116c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001142:	f7ff fb53 	bl	80007ec <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	e00a      	b.n	8001160 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114a:	f7ff fb4f 	bl	80007ec <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f241 3288 	movw	r2, #5000	; 0x1388
 8001158:	4293      	cmp	r3, r2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e0c2      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ee      	bne.n	800114a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d105      	bne.n	800117e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a3c      	ldr	r2, [pc, #240]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80ae 	beq.w	80012e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d06d      	beq.n	8001270 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d14b      	bne.n	8001234 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80011a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fb20 	bl	80007ec <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fb1c 	bl	80007ec <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e091      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69da      	ldr	r2, [r3, #28]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	019b      	lsls	r3, r3, #6
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	3b01      	subs	r3, #1
 80011e8:	041b      	lsls	r3, r3, #16
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	061b      	lsls	r3, r3, #24
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	071b      	lsls	r3, r3, #28
 80011fa:	491b      	ldr	r1, [pc, #108]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff faee 	bl	80007ec <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001214:	f7ff faea 	bl	80007ec <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e05f      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x47c>
 8001232:	e057      	b.n	80012e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 800123a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800123e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fad4 	bl	80007ec <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fad0 	bl	80007ec <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e045      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_RCC_OscConfig+0x4d0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x4b0>
 8001266:	e03d      	b.n	80012e4 <HAL_RCC_OscConfig+0x54c>
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <HAL_RCC_OscConfig+0x558>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d030      	beq.n	80012e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d129      	bne.n	80012e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	429a      	cmp	r2, r3
 8001298:	d122      	bne.n	80012e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012a0:	4013      	ands	r3, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d119      	bne.n	80012e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	085b      	lsrs	r3, r3, #1
 80012b8:	3b01      	subs	r3, #1
 80012ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d10f      	bne.n	80012e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	2300      	movs	r3, #0
 8001306:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800130c:	4b67      	ldr	r3, [pc, #412]	; (80014ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d00d      	beq.n	8001334 <HAL_RCC_GetSysClockFreq+0x40>
 8001318:	2b08      	cmp	r3, #8
 800131a:	f200 80bd 	bhi.w	8001498 <HAL_RCC_GetSysClockFreq+0x1a4>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HAL_RCC_GetSysClockFreq+0x34>
 8001322:	2b04      	cmp	r3, #4
 8001324:	d003      	beq.n	800132e <HAL_RCC_GetSysClockFreq+0x3a>
 8001326:	e0b7      	b.n	8001498 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001328:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800132a:	60bb      	str	r3, [r7, #8]
      break;
 800132c:	e0b7      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800132e:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001330:	60bb      	str	r3, [r7, #8]
      break;
 8001332:	e0b4      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001334:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800133c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800133e:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d04d      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800134a:	4b58      	ldr	r3, [pc, #352]	; (80014ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	099b      	lsrs	r3, r3, #6
 8001350:	461a      	mov	r2, r3
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800135a:	f04f 0100 	mov.w	r1, #0
 800135e:	ea02 0800 	and.w	r8, r2, r0
 8001362:	ea03 0901 	and.w	r9, r3, r1
 8001366:	4640      	mov	r0, r8
 8001368:	4649      	mov	r1, r9
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	014b      	lsls	r3, r1, #5
 8001374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001378:	0142      	lsls	r2, r0, #5
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	ebb0 0008 	subs.w	r0, r0, r8
 8001382:	eb61 0109 	sbc.w	r1, r1, r9
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	018b      	lsls	r3, r1, #6
 8001390:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001394:	0182      	lsls	r2, r0, #6
 8001396:	1a12      	subs	r2, r2, r0
 8001398:	eb63 0301 	sbc.w	r3, r3, r1
 800139c:	f04f 0000 	mov.w	r0, #0
 80013a0:	f04f 0100 	mov.w	r1, #0
 80013a4:	00d9      	lsls	r1, r3, #3
 80013a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013aa:	00d0      	lsls	r0, r2, #3
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	eb12 0208 	adds.w	r2, r2, r8
 80013b4:	eb43 0309 	adc.w	r3, r3, r9
 80013b8:	f04f 0000 	mov.w	r0, #0
 80013bc:	f04f 0100 	mov.w	r1, #0
 80013c0:	0259      	lsls	r1, r3, #9
 80013c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80013c6:	0250      	lsls	r0, r2, #9
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	f7fe ff2e 	bl	8000238 <__aeabi_uldivmod>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4613      	mov	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e04a      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	099b      	lsrs	r3, r3, #6
 80013ec:	461a      	mov	r2, r3
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	ea02 0400 	and.w	r4, r2, r0
 80013fe:	ea03 0501 	and.w	r5, r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	014b      	lsls	r3, r1, #5
 8001410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001414:	0142      	lsls	r2, r0, #5
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	1b00      	subs	r0, r0, r4
 800141c:	eb61 0105 	sbc.w	r1, r1, r5
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	018b      	lsls	r3, r1, #6
 800142a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800142e:	0182      	lsls	r2, r0, #6
 8001430:	1a12      	subs	r2, r2, r0
 8001432:	eb63 0301 	sbc.w	r3, r3, r1
 8001436:	f04f 0000 	mov.w	r0, #0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	00d9      	lsls	r1, r3, #3
 8001440:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001444:	00d0      	lsls	r0, r2, #3
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	1912      	adds	r2, r2, r4
 800144c:	eb45 0303 	adc.w	r3, r5, r3
 8001450:	f04f 0000 	mov.w	r0, #0
 8001454:	f04f 0100 	mov.w	r1, #0
 8001458:	0299      	lsls	r1, r3, #10
 800145a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800145e:	0290      	lsls	r0, r2, #10
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	461a      	mov	r2, r3
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f7fe fee2 	bl	8000238 <__aeabi_uldivmod>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4613      	mov	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	3301      	adds	r3, #1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	fbb2 f3f3 	udiv	r3, r2, r3
 8001494:	60bb      	str	r3, [r7, #8]
      break;
 8001496:	e002      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800149a:	60bb      	str	r3, [r7, #8]
      break;
 800149c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800149e:	68bb      	ldr	r3, [r7, #8]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	00f42400 	.word	0x00f42400
 80014b4:	007a1200 	.word	0x007a1200

080014b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_RCC_GetHCLKFreq+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014d4:	f7ff fff0 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	0a9b      	lsrs	r3, r3, #10
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4903      	ldr	r1, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	08001e50 	.word	0x08001e50

080014f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014fc:	f7ff ffdc 	bl	80014b8 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	0b5b      	lsrs	r3, r3, #13
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK2Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	08001e50 	.word	0x08001e50

08001520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e040      	b.n	80015b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff f880 	bl	8000648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f82c 	bl	80015bc <UART_SetConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e022      	b.n	80015b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fa82 	bl	8001a80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800158a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800159a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fb09 	bl	8001bc4 <UART_CheckIdleState>
 80015b2:	4603      	mov	r3, r0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4ba7      	ldr	r3, [pc, #668]	; (8001884 <UART_SetConfig+0x2c8>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	6979      	ldr	r1, [r7, #20]
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	4313      	orrs	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a95      	ldr	r2, [pc, #596]	; (8001888 <UART_SetConfig+0x2cc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d120      	bne.n	800167a <UART_SetConfig+0xbe>
 8001638:	4b94      	ldr	r3, [pc, #592]	; (800188c <UART_SetConfig+0x2d0>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d816      	bhi.n	8001674 <UART_SetConfig+0xb8>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <UART_SetConfig+0x90>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	08001669 	.word	0x08001669
 8001654:	08001663 	.word	0x08001663
 8001658:	0800166f 	.word	0x0800166f
 800165c:	2301      	movs	r3, #1
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e14f      	b.n	8001902 <UART_SetConfig+0x346>
 8001662:	2302      	movs	r3, #2
 8001664:	77fb      	strb	r3, [r7, #31]
 8001666:	e14c      	b.n	8001902 <UART_SetConfig+0x346>
 8001668:	2304      	movs	r3, #4
 800166a:	77fb      	strb	r3, [r7, #31]
 800166c:	e149      	b.n	8001902 <UART_SetConfig+0x346>
 800166e:	2308      	movs	r3, #8
 8001670:	77fb      	strb	r3, [r7, #31]
 8001672:	e146      	b.n	8001902 <UART_SetConfig+0x346>
 8001674:	2310      	movs	r3, #16
 8001676:	77fb      	strb	r3, [r7, #31]
 8001678:	e143      	b.n	8001902 <UART_SetConfig+0x346>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a84      	ldr	r2, [pc, #528]	; (8001890 <UART_SetConfig+0x2d4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d132      	bne.n	80016ea <UART_SetConfig+0x12e>
 8001684:	4b81      	ldr	r3, [pc, #516]	; (800188c <UART_SetConfig+0x2d0>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d828      	bhi.n	80016e4 <UART_SetConfig+0x128>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <UART_SetConfig+0xdc>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016cd 	.word	0x080016cd
 800169c:	080016e5 	.word	0x080016e5
 80016a0:	080016e5 	.word	0x080016e5
 80016a4:	080016e5 	.word	0x080016e5
 80016a8:	080016d9 	.word	0x080016d9
 80016ac:	080016e5 	.word	0x080016e5
 80016b0:	080016e5 	.word	0x080016e5
 80016b4:	080016e5 	.word	0x080016e5
 80016b8:	080016d3 	.word	0x080016d3
 80016bc:	080016e5 	.word	0x080016e5
 80016c0:	080016e5 	.word	0x080016e5
 80016c4:	080016e5 	.word	0x080016e5
 80016c8:	080016df 	.word	0x080016df
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]
 80016d0:	e117      	b.n	8001902 <UART_SetConfig+0x346>
 80016d2:	2302      	movs	r3, #2
 80016d4:	77fb      	strb	r3, [r7, #31]
 80016d6:	e114      	b.n	8001902 <UART_SetConfig+0x346>
 80016d8:	2304      	movs	r3, #4
 80016da:	77fb      	strb	r3, [r7, #31]
 80016dc:	e111      	b.n	8001902 <UART_SetConfig+0x346>
 80016de:	2308      	movs	r3, #8
 80016e0:	77fb      	strb	r3, [r7, #31]
 80016e2:	e10e      	b.n	8001902 <UART_SetConfig+0x346>
 80016e4:	2310      	movs	r3, #16
 80016e6:	77fb      	strb	r3, [r7, #31]
 80016e8:	e10b      	b.n	8001902 <UART_SetConfig+0x346>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a69      	ldr	r2, [pc, #420]	; (8001894 <UART_SetConfig+0x2d8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d120      	bne.n	8001736 <UART_SetConfig+0x17a>
 80016f4:	4b65      	ldr	r3, [pc, #404]	; (800188c <UART_SetConfig+0x2d0>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016fe:	2b30      	cmp	r3, #48	; 0x30
 8001700:	d013      	beq.n	800172a <UART_SetConfig+0x16e>
 8001702:	2b30      	cmp	r3, #48	; 0x30
 8001704:	d814      	bhi.n	8001730 <UART_SetConfig+0x174>
 8001706:	2b20      	cmp	r3, #32
 8001708:	d009      	beq.n	800171e <UART_SetConfig+0x162>
 800170a:	2b20      	cmp	r3, #32
 800170c:	d810      	bhi.n	8001730 <UART_SetConfig+0x174>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <UART_SetConfig+0x15c>
 8001712:	2b10      	cmp	r3, #16
 8001714:	d006      	beq.n	8001724 <UART_SetConfig+0x168>
 8001716:	e00b      	b.n	8001730 <UART_SetConfig+0x174>
 8001718:	2300      	movs	r3, #0
 800171a:	77fb      	strb	r3, [r7, #31]
 800171c:	e0f1      	b.n	8001902 <UART_SetConfig+0x346>
 800171e:	2302      	movs	r3, #2
 8001720:	77fb      	strb	r3, [r7, #31]
 8001722:	e0ee      	b.n	8001902 <UART_SetConfig+0x346>
 8001724:	2304      	movs	r3, #4
 8001726:	77fb      	strb	r3, [r7, #31]
 8001728:	e0eb      	b.n	8001902 <UART_SetConfig+0x346>
 800172a:	2308      	movs	r3, #8
 800172c:	77fb      	strb	r3, [r7, #31]
 800172e:	e0e8      	b.n	8001902 <UART_SetConfig+0x346>
 8001730:	2310      	movs	r3, #16
 8001732:	77fb      	strb	r3, [r7, #31]
 8001734:	e0e5      	b.n	8001902 <UART_SetConfig+0x346>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a57      	ldr	r2, [pc, #348]	; (8001898 <UART_SetConfig+0x2dc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d120      	bne.n	8001782 <UART_SetConfig+0x1c6>
 8001740:	4b52      	ldr	r3, [pc, #328]	; (800188c <UART_SetConfig+0x2d0>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800174a:	2bc0      	cmp	r3, #192	; 0xc0
 800174c:	d013      	beq.n	8001776 <UART_SetConfig+0x1ba>
 800174e:	2bc0      	cmp	r3, #192	; 0xc0
 8001750:	d814      	bhi.n	800177c <UART_SetConfig+0x1c0>
 8001752:	2b80      	cmp	r3, #128	; 0x80
 8001754:	d009      	beq.n	800176a <UART_SetConfig+0x1ae>
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d810      	bhi.n	800177c <UART_SetConfig+0x1c0>
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <UART_SetConfig+0x1a8>
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d006      	beq.n	8001770 <UART_SetConfig+0x1b4>
 8001762:	e00b      	b.n	800177c <UART_SetConfig+0x1c0>
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
 8001768:	e0cb      	b.n	8001902 <UART_SetConfig+0x346>
 800176a:	2302      	movs	r3, #2
 800176c:	77fb      	strb	r3, [r7, #31]
 800176e:	e0c8      	b.n	8001902 <UART_SetConfig+0x346>
 8001770:	2304      	movs	r3, #4
 8001772:	77fb      	strb	r3, [r7, #31]
 8001774:	e0c5      	b.n	8001902 <UART_SetConfig+0x346>
 8001776:	2308      	movs	r3, #8
 8001778:	77fb      	strb	r3, [r7, #31]
 800177a:	e0c2      	b.n	8001902 <UART_SetConfig+0x346>
 800177c:	2310      	movs	r3, #16
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	e0bf      	b.n	8001902 <UART_SetConfig+0x346>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a45      	ldr	r2, [pc, #276]	; (800189c <UART_SetConfig+0x2e0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d125      	bne.n	80017d8 <UART_SetConfig+0x21c>
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <UART_SetConfig+0x2d0>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800179a:	d017      	beq.n	80017cc <UART_SetConfig+0x210>
 800179c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017a0:	d817      	bhi.n	80017d2 <UART_SetConfig+0x216>
 80017a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a6:	d00b      	beq.n	80017c0 <UART_SetConfig+0x204>
 80017a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ac:	d811      	bhi.n	80017d2 <UART_SetConfig+0x216>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <UART_SetConfig+0x1fe>
 80017b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b6:	d006      	beq.n	80017c6 <UART_SetConfig+0x20a>
 80017b8:	e00b      	b.n	80017d2 <UART_SetConfig+0x216>
 80017ba:	2300      	movs	r3, #0
 80017bc:	77fb      	strb	r3, [r7, #31]
 80017be:	e0a0      	b.n	8001902 <UART_SetConfig+0x346>
 80017c0:	2302      	movs	r3, #2
 80017c2:	77fb      	strb	r3, [r7, #31]
 80017c4:	e09d      	b.n	8001902 <UART_SetConfig+0x346>
 80017c6:	2304      	movs	r3, #4
 80017c8:	77fb      	strb	r3, [r7, #31]
 80017ca:	e09a      	b.n	8001902 <UART_SetConfig+0x346>
 80017cc:	2308      	movs	r3, #8
 80017ce:	77fb      	strb	r3, [r7, #31]
 80017d0:	e097      	b.n	8001902 <UART_SetConfig+0x346>
 80017d2:	2310      	movs	r3, #16
 80017d4:	77fb      	strb	r3, [r7, #31]
 80017d6:	e094      	b.n	8001902 <UART_SetConfig+0x346>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <UART_SetConfig+0x2e4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d125      	bne.n	800182e <UART_SetConfig+0x272>
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <UART_SetConfig+0x2d0>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80017f0:	d017      	beq.n	8001822 <UART_SetConfig+0x266>
 80017f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80017f6:	d817      	bhi.n	8001828 <UART_SetConfig+0x26c>
 80017f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017fc:	d00b      	beq.n	8001816 <UART_SetConfig+0x25a>
 80017fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001802:	d811      	bhi.n	8001828 <UART_SetConfig+0x26c>
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <UART_SetConfig+0x254>
 8001808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180c:	d006      	beq.n	800181c <UART_SetConfig+0x260>
 800180e:	e00b      	b.n	8001828 <UART_SetConfig+0x26c>
 8001810:	2301      	movs	r3, #1
 8001812:	77fb      	strb	r3, [r7, #31]
 8001814:	e075      	b.n	8001902 <UART_SetConfig+0x346>
 8001816:	2302      	movs	r3, #2
 8001818:	77fb      	strb	r3, [r7, #31]
 800181a:	e072      	b.n	8001902 <UART_SetConfig+0x346>
 800181c:	2304      	movs	r3, #4
 800181e:	77fb      	strb	r3, [r7, #31]
 8001820:	e06f      	b.n	8001902 <UART_SetConfig+0x346>
 8001822:	2308      	movs	r3, #8
 8001824:	77fb      	strb	r3, [r7, #31]
 8001826:	e06c      	b.n	8001902 <UART_SetConfig+0x346>
 8001828:	2310      	movs	r3, #16
 800182a:	77fb      	strb	r3, [r7, #31]
 800182c:	e069      	b.n	8001902 <UART_SetConfig+0x346>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <UART_SetConfig+0x2e8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d137      	bne.n	80018a8 <UART_SetConfig+0x2ec>
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <UART_SetConfig+0x2d0>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001846:	d017      	beq.n	8001878 <UART_SetConfig+0x2bc>
 8001848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800184c:	d817      	bhi.n	800187e <UART_SetConfig+0x2c2>
 800184e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001852:	d00b      	beq.n	800186c <UART_SetConfig+0x2b0>
 8001854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001858:	d811      	bhi.n	800187e <UART_SetConfig+0x2c2>
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <UART_SetConfig+0x2aa>
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001862:	d006      	beq.n	8001872 <UART_SetConfig+0x2b6>
 8001864:	e00b      	b.n	800187e <UART_SetConfig+0x2c2>
 8001866:	2300      	movs	r3, #0
 8001868:	77fb      	strb	r3, [r7, #31]
 800186a:	e04a      	b.n	8001902 <UART_SetConfig+0x346>
 800186c:	2302      	movs	r3, #2
 800186e:	77fb      	strb	r3, [r7, #31]
 8001870:	e047      	b.n	8001902 <UART_SetConfig+0x346>
 8001872:	2304      	movs	r3, #4
 8001874:	77fb      	strb	r3, [r7, #31]
 8001876:	e044      	b.n	8001902 <UART_SetConfig+0x346>
 8001878:	2308      	movs	r3, #8
 800187a:	77fb      	strb	r3, [r7, #31]
 800187c:	e041      	b.n	8001902 <UART_SetConfig+0x346>
 800187e:	2310      	movs	r3, #16
 8001880:	77fb      	strb	r3, [r7, #31]
 8001882:	e03e      	b.n	8001902 <UART_SetConfig+0x346>
 8001884:	efff69f3 	.word	0xefff69f3
 8001888:	40011000 	.word	0x40011000
 800188c:	40023800 	.word	0x40023800
 8001890:	40004400 	.word	0x40004400
 8001894:	40004800 	.word	0x40004800
 8001898:	40004c00 	.word	0x40004c00
 800189c:	40005000 	.word	0x40005000
 80018a0:	40011400 	.word	0x40011400
 80018a4:	40007800 	.word	0x40007800
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a71      	ldr	r2, [pc, #452]	; (8001a74 <UART_SetConfig+0x4b8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d125      	bne.n	80018fe <UART_SetConfig+0x342>
 80018b2:	4b71      	ldr	r3, [pc, #452]	; (8001a78 <UART_SetConfig+0x4bc>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018c0:	d017      	beq.n	80018f2 <UART_SetConfig+0x336>
 80018c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018c6:	d817      	bhi.n	80018f8 <UART_SetConfig+0x33c>
 80018c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018cc:	d00b      	beq.n	80018e6 <UART_SetConfig+0x32a>
 80018ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d2:	d811      	bhi.n	80018f8 <UART_SetConfig+0x33c>
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <UART_SetConfig+0x324>
 80018d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018dc:	d006      	beq.n	80018ec <UART_SetConfig+0x330>
 80018de:	e00b      	b.n	80018f8 <UART_SetConfig+0x33c>
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
 80018e4:	e00d      	b.n	8001902 <UART_SetConfig+0x346>
 80018e6:	2302      	movs	r3, #2
 80018e8:	77fb      	strb	r3, [r7, #31]
 80018ea:	e00a      	b.n	8001902 <UART_SetConfig+0x346>
 80018ec:	2304      	movs	r3, #4
 80018ee:	77fb      	strb	r3, [r7, #31]
 80018f0:	e007      	b.n	8001902 <UART_SetConfig+0x346>
 80018f2:	2308      	movs	r3, #8
 80018f4:	77fb      	strb	r3, [r7, #31]
 80018f6:	e004      	b.n	8001902 <UART_SetConfig+0x346>
 80018f8:	2310      	movs	r3, #16
 80018fa:	77fb      	strb	r3, [r7, #31]
 80018fc:	e001      	b.n	8001902 <UART_SetConfig+0x346>
 80018fe:	2310      	movs	r3, #16
 8001900:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800190a:	d15a      	bne.n	80019c2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	2b08      	cmp	r3, #8
 8001910:	d827      	bhi.n	8001962 <UART_SetConfig+0x3a6>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <UART_SetConfig+0x35c>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	0800193d 	.word	0x0800193d
 800191c:	08001945 	.word	0x08001945
 8001920:	0800194d 	.word	0x0800194d
 8001924:	08001963 	.word	0x08001963
 8001928:	08001953 	.word	0x08001953
 800192c:	08001963 	.word	0x08001963
 8001930:	08001963 	.word	0x08001963
 8001934:	08001963 	.word	0x08001963
 8001938:	0800195b 	.word	0x0800195b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800193c:	f7ff fdc8 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
 8001940:	61b8      	str	r0, [r7, #24]
        break;
 8001942:	e013      	b.n	800196c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001944:	f7ff fdd8 	bl	80014f8 <HAL_RCC_GetPCLK2Freq>
 8001948:	61b8      	str	r0, [r7, #24]
        break;
 800194a:	e00f      	b.n	800196c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <UART_SetConfig+0x4c0>)
 800194e:	61bb      	str	r3, [r7, #24]
        break;
 8001950:	e00c      	b.n	800196c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001952:	f7ff fccf 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 8001956:	61b8      	str	r0, [r7, #24]
        break;
 8001958:	e008      	b.n	800196c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800195a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800195e:	61bb      	str	r3, [r7, #24]
        break;
 8001960:	e004      	b.n	800196c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	77bb      	strb	r3, [r7, #30]
        break;
 800196a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d074      	beq.n	8001a5c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	005a      	lsls	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	441a      	add	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	d916      	bls.n	80019bc <UART_SetConfig+0x400>
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001994:	d212      	bcs.n	80019bc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f023 030f 	bic.w	r3, r3, #15
 800199e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	89fb      	ldrh	r3, [r7, #14]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	89fa      	ldrh	r2, [r7, #14]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	e04f      	b.n	8001a5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	77bb      	strb	r3, [r7, #30]
 80019c0:	e04c      	b.n	8001a5c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d828      	bhi.n	8001a1a <UART_SetConfig+0x45e>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <UART_SetConfig+0x414>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019f5 	.word	0x080019f5
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	08001a05 	.word	0x08001a05
 80019dc:	08001a1b 	.word	0x08001a1b
 80019e0:	08001a0b 	.word	0x08001a0b
 80019e4:	08001a1b 	.word	0x08001a1b
 80019e8:	08001a1b 	.word	0x08001a1b
 80019ec:	08001a1b 	.word	0x08001a1b
 80019f0:	08001a13 	.word	0x08001a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80019f4:	f7ff fd6c 	bl	80014d0 <HAL_RCC_GetPCLK1Freq>
 80019f8:	61b8      	str	r0, [r7, #24]
        break;
 80019fa:	e013      	b.n	8001a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80019fc:	f7ff fd7c 	bl	80014f8 <HAL_RCC_GetPCLK2Freq>
 8001a00:	61b8      	str	r0, [r7, #24]
        break;
 8001a02:	e00f      	b.n	8001a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <UART_SetConfig+0x4c0>)
 8001a06:	61bb      	str	r3, [r7, #24]
        break;
 8001a08:	e00c      	b.n	8001a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a0a:	f7ff fc73 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 8001a0e:	61b8      	str	r0, [r7, #24]
        break;
 8001a10:	e008      	b.n	8001a24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a16:	61bb      	str	r3, [r7, #24]
        break;
 8001a18:	e004      	b.n	8001a24 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	77bb      	strb	r3, [r7, #30]
        break;
 8001a22:	bf00      	nop
    }

    if (pclk != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d018      	beq.n	8001a5c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	085a      	lsrs	r2, r3, #1
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	441a      	add	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d909      	bls.n	8001a58 <UART_SetConfig+0x49c>
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d205      	bcs.n	8001a58 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	e001      	b.n	8001a5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001a68:	7fbb      	ldrb	r3, [r7, #30]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40007c00 	.word	0x40007c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400

08001a80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01a      	beq.n	8001b96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b7e:	d10a      	bne.n	8001b96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
  }
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001bd4:	f7fe fe0a 	bl	80007ec <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d10e      	bne.n	8001c06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f82d 	bl	8001c56 <UART_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e023      	b.n	8001c4e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d10e      	bne.n	8001c32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f817 	bl	8001c56 <UART_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e00d      	b.n	8001c4e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b09c      	sub	sp, #112	; 0x70
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c66:	e0a5      	b.n	8001db4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	f000 80a1 	beq.w	8001db4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7fe fdbb 	bl	80007ec <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <UART_WaitOnFlagUntilTimeout+0x32>
 8001c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d13e      	bne.n	8001d06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c90:	e853 3f00 	ldrex	r3, [r3]
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001cae:	e841 2300 	strex	r3, r2, [r1]
 8001cb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e6      	bne.n	8001c88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc4:	e853 3f00 	ldrex	r3, [r3]
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ce2:	e841 2300 	strex	r3, r2, [r1]
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e5      	bne.n	8001cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e067      	b.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d04f      	beq.n	8001db4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d22:	d147      	bne.n	8001db4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	e853 3f00 	ldrex	r3, [r3]
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d54:	e841 2300 	strex	r3, r2, [r1]
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e6      	bne.n	8001d2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3308      	adds	r3, #8
 8001d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	e853 3f00 	ldrex	r3, [r3]
 8001d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d80:	623a      	str	r2, [r7, #32]
 8001d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d84:	69f9      	ldr	r1, [r7, #28]
 8001d86:	6a3a      	ldr	r2, [r7, #32]
 8001d88:	e841 2300 	strex	r3, r2, [r1]
 8001d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e5      	bne.n	8001d60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e010      	b.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	f43f af4a 	beq.w	8001c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3770      	adds	r7, #112	; 0x70
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <__libc_init_array>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	4d0d      	ldr	r5, [pc, #52]	; (8001e18 <__libc_init_array+0x38>)
 8001de4:	4c0d      	ldr	r4, [pc, #52]	; (8001e1c <__libc_init_array+0x3c>)
 8001de6:	1b64      	subs	r4, r4, r5
 8001de8:	10a4      	asrs	r4, r4, #2
 8001dea:	2600      	movs	r6, #0
 8001dec:	42a6      	cmp	r6, r4
 8001dee:	d109      	bne.n	8001e04 <__libc_init_array+0x24>
 8001df0:	4d0b      	ldr	r5, [pc, #44]	; (8001e20 <__libc_init_array+0x40>)
 8001df2:	4c0c      	ldr	r4, [pc, #48]	; (8001e24 <__libc_init_array+0x44>)
 8001df4:	f000 f820 	bl	8001e38 <_init>
 8001df8:	1b64      	subs	r4, r4, r5
 8001dfa:	10a4      	asrs	r4, r4, #2
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	42a6      	cmp	r6, r4
 8001e00:	d105      	bne.n	8001e0e <__libc_init_array+0x2e>
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e08:	4798      	blx	r3
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	e7ee      	b.n	8001dec <__libc_init_array+0xc>
 8001e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e12:	4798      	blx	r3
 8001e14:	3601      	adds	r6, #1
 8001e16:	e7f2      	b.n	8001dfe <__libc_init_array+0x1e>
 8001e18:	08001e60 	.word	0x08001e60
 8001e1c:	08001e60 	.word	0x08001e60
 8001e20:	08001e60 	.word	0x08001e60
 8001e24:	08001e64 	.word	0x08001e64

08001e28 <memset>:
 8001e28:	4402      	add	r2, r0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <memset+0xa>
 8001e30:	4770      	bx	lr
 8001e32:	f803 1b01 	strb.w	r1, [r3], #1
 8001e36:	e7f9      	b.n	8001e2c <memset+0x4>

08001e38 <_init>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr

08001e44 <_fini>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr
