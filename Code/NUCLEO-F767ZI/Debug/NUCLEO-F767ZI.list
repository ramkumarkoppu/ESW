
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006618  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08006818  08006818  00016818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c5c  08006c5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c64  08006c64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001dc  08006e48  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08006e48  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001055c  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba4  00000000  00000000  00030766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0c2  00000000  00000000  00033ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f362  00000000  00000000  0005dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd11f  00000000  00000000  0006cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a02b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  0016a080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016e544  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0016e610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08006800 	.word	0x08006800

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08006800 	.word	0x08006800

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005ec:	f000 fba0 	bl	8000d30 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 80005f0:	f000 fcec 	bl	8000fcc <HAL_SYSTICK_IRQHandler>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <USART3_IRQHandler>:

#ifdef USE_UART_EXAMPLE
/* This function handles USART3. */
extern "C" void USART3_IRQHandler( void )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	// Invoke callback if it exists.
	HAL_UART_IRQHandler( &huart3 );
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <USART3_IRQHandler+0x10>)
 80005fe:	f002 fabf 	bl	8002b80 <HAL_UART_IRQHandler>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001f8 	.word	0x200001f8

0800060c <TIM2_IRQHandler>:
}
#endif // USE_BASIC_TIMER_EXAMPLE

#ifdef USE_INPUT_CAPTURE_TIMER_EXAMPLE
extern "C" void TIM2_IRQHandler( void )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	// Invoke callback if it exists.
	HAL_TIM_IRQHandler( &hTimer2 );
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <TIM2_IRQHandler+0x10>)
 8000612:	f001 fde3 	bl	80021dc <HAL_TIM_IRQHandler>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000027c 	.word	0x2000027c

08000620 <main>:
#ifdef USE_UART_EXAMPLE
//static inline char convert_to_Upper( char c );
#endif // USE_UART_EXAMPLE

int main( void )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000624:	f000 fb47 	bl	8000cb6 <HAL_Init>

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
	// Print current settings of clocks.
	displayClkInfo();
 8000628:	f000 f85a 	bl	80006e0 <_ZL14displayClkInfov>

	/* Configure the system clock */
	SystemClock_Config();
 800062c:	f000 f8dc 	bl	80007e8 <_ZL18SystemClock_Configv>
	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
#endif
#endif // USE_UART_EXAMPLE

#ifdef USE_INPUT_CAPTURE_TIMER_EXAMPLE
	SystemClock_Config();
 8000630:	f000 f8da 	bl	80007e8 <_ZL18SystemClock_Configv>
#endif // USE_INPUT_CAPTURE_TIMER_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
	// Print current settings of clocks.
	displayClkInfo();
 8000634:	f000 f854 	bl	80006e0 <_ZL14displayClkInfov>
	// Start the Timer.
	HAL_TIM_Base_Start_IT( &hTimer6 );
#endif // USE_BASIC_TIMER_EXAMPLE

#ifdef USE_INPUT_CAPTURE_TIMER_EXAMPLE
	TIM2_init();
 8000638:	f000 f894 	bl	8000764 <_ZL9TIM2_initv>
	LSE_config();
 800063c:	f000 f960 	bl	8000900 <_ZL10LSE_configv>
	HAL_TIM_IC_Start_IT( &hTimer2, TIM_CHANNEL_1 );
 8000640:	2100      	movs	r1, #0
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <main+0x3c>)
 8000644:	f001 fc7a 	bl	8001f3c <HAL_TIM_IC_Start_IT>
#endif // USE_INPUT_CAPTURE_TIMER_EXAMPLE

	while(true)
	{
		if (capture_completed)
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <main+0x40>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0fb      	beq.n	8000648 <main+0x28>
		{
			displayUserSigInfo();
 8000650:	f000 f9ae 	bl	80009b0 <_ZL18displayUserSigInfov>
			capture_completed = false;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <main+0x40>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
		if (capture_completed)
 800065a:	e7f5      	b.n	8000648 <main+0x28>
 800065c:	2000027c 	.word	0x2000027c
 8000660:	200002d1 	.word	0x200002d1

08000664 <_ZL10UART3_Initv>:
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE ) || defined( USE_UART_EXAMPLE )
/* USART3 Initialization Function */
static void UART3_Init( void )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	std::memset( &huart3, 0, sizeof(huart3) );
 8000668:	2284      	movs	r2, #132	; 0x84
 800066a:	2100      	movs	r1, #0
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 800066e:	f003 fa69 	bl	8003b44 <memset>
	/* UART High level initilization */
	huart3.Instance = USART3;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <_ZL10UART3_Initv+0x70>)
 8000676:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 800067a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067e:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 8000694:	220c      	movs	r2, #12
 8000696:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init( &huart3 ) != HAL_OK)
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <_ZL10UART3_Initv+0x6c>)
 80006b2:	f002 f984 	bl	80029be <HAL_UART_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	bf14      	ite	ne
 80006bc:	2301      	movne	r3, #1
 80006be:	2300      	moveq	r3, #0
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <_ZL10UART3_Initv+0x66>
	{
		// Initialization Error.
		Error_Handler();
 80006c6:	f000 f807 	bl	80006d8 <_ZL13Error_Handlerv>
	}
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001f8 	.word	0x200001f8
 80006d4:	40004800 	.word	0x40004800

080006d8 <_ZL13Error_Handlerv>:
}
#endif
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	for (;;);
 80006dc:	e7fe      	b.n	80006dc <_ZL13Error_Handlerv+0x4>
	...

080006e0 <_ZL14displayClkInfov>:
}

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
static void displayClkInfo( void )
{
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80006e6:	af02      	add	r7, sp, #8
	char msg[1024];

	/* Configure the UART for debug console */
	UART3_Init();
 80006e8:	f7ff ffbc 	bl	8000664 <_ZL10UART3_Initv>

	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 80006ec:	f001 fab8 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80006f0:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 80006f2:	4a19      	ldr	r2, [pc, #100]	; (8000758 <_ZL14displayClkInfov+0x78>)
 80006f4:	fba2 2303 	umull	r2, r3, r2, r3
 80006f8:	0c9d      	lsrs	r5, r3, #18
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 80006fa:	f001 fb93 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 80006fe:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <_ZL14displayClkInfov+0x78>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	0c9e      	lsrs	r6, r3, #18
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 8000708:	f001 fb98 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 800070c:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <_ZL14displayClkInfov+0x78>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	0c9c      	lsrs	r4, r3, #18
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 8000716:	f001 fba5 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 800071a:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <_ZL14displayClkInfov+0x78>)
 800071e:	fba2 2303 	umull	r2, r3, r2, r3
 8000722:	0c9b      	lsrs	r3, r3, #18
 8000724:	4638      	mov	r0, r7
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	9400      	str	r4, [sp, #0]
 800072a:	4633      	mov	r3, r6
 800072c:	462a      	mov	r2, r5
 800072e:	490b      	ldr	r1, [pc, #44]	; (800075c <_ZL14displayClkInfov+0x7c>)
 8000730:	f003 fe54 	bl	80043dc <siprintf>

	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 8000734:	463b      	mov	r3, r7
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd82 	bl	8000240 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	4639      	mov	r1, r7
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <_ZL14displayClkInfov+0x80>)
 8000748:	f002 f987 	bl	8002a5a <HAL_UART_Transmit>
}
 800074c:	bf00      	nop
 800074e:	f207 4704 	addw	r7, r7, #1028	; 0x404
 8000752:	46bd      	mov	sp, r7
 8000754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000756:	bf00      	nop
 8000758:	431bde83 	.word	0x431bde83
 800075c:	08006818 	.word	0x08006818
 8000760:	200001f8 	.word	0x200001f8

08000764 <_ZL9TIM2_initv>:
}
#endif // USE_BASIC_TIMER_EXAMPLE

#ifdef USE_INPUT_CAPTURE_TIMER_EXAMPLE
static void TIM2_init( void )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
	hTimer2.Instance = TIM2;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <_ZL9TIM2_initv+0x80>)
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	601a      	str	r2, [r3, #0]
	hTimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <_ZL9TIM2_initv+0x80>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
	hTimer2.Init.Prescaler = 1; // Run timer at 25MHz.
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <_ZL9TIM2_initv+0x80>)
 800077a:	2201      	movs	r2, #1
 800077c:	605a      	str	r2, [r3, #4]
	hTimer2.Init.Period = 0xFFFFFFFFU;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <_ZL9TIM2_initv+0x80>)
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	60da      	str	r2, [r3, #12]
	if ( HAL_TIM_IC_Init( &hTimer2 ) != HAL_OK )
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <_ZL9TIM2_initv+0x80>)
 8000788:	f001 fb80 	bl	8001e8c <HAL_TIM_IC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <_ZL9TIM2_initv+0x3c>
	{
		// Error in Timer initialization.
		Error_Handler();
 800079c:	f7ff ff9c 	bl	80006d8 <_ZL13Error_Handlerv>
	}

	TIM_IC_InitTypeDef tim2_ic_config{0};
 80007a0:	463b      	mov	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
	tim2_ic_config.ICFilter = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	tim2_ic_config.ICPolarity = TIM_ICPOLARITY_RISING;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
	tim2_ic_config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
	tim2_ic_config.ICPrescaler = TIM_ICPSC_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
	if ( HAL_TIM_IC_ConfigChannel( &hTimer2, &tim2_ic_config, TIM_CHANNEL_1 ) != HAL_OK )
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4808      	ldr	r0, [pc, #32]	; (80007e4 <_ZL9TIM2_initv+0x80>)
 80007c4:	f001 fe29 	bl	800241a <HAL_TIM_IC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_ZL9TIM2_initv+0x78>
	{
		// Error in Timer input channel configuration.
		Error_Handler();
 80007d8:	f7ff ff7e 	bl	80006d8 <_ZL13Error_Handlerv>
	}
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000027c 	.word	0x2000027c

080007e8 <_ZL18SystemClock_Configv>:

static void SystemClock_Config( void )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b096      	sub	sp, #88	; 0x58
 80007ec:	af00      	add	r7, sp, #0
	// Configure the Clock Source.
	RCC_OscInitTypeDef Osc_init{0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2234      	movs	r2, #52	; 0x34
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f9a4 	bl	8003b44 <memset>

	/* Configure PLL to generate 50MHz clock for SYSCLK using HSE as source. */

	// This configuration requires Power Scale 1 and Over drive OFF.
	__HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <_ZL18SystemClock_Configv+0x10c>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a3c      	ldr	r2, [pc, #240]	; (80008f4 <_ZL18SystemClock_Configv+0x10c>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b3a      	ldr	r3, [pc, #232]	; (80008f4 <_ZL18SystemClock_Configv+0x10c>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <_ZL18SystemClock_Configv+0x110>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a37      	ldr	r2, [pc, #220]	; (80008f8 <_ZL18SystemClock_Configv+0x110>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <_ZL18SystemClock_Configv+0x110>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_OVERDRIVE_DISABLE();
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <_ZL18SystemClock_Configv+0x110>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <_ZL18SystemClock_Configv+0x110>)
 8000832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000836:	6013      	str	r3, [r2, #0]

	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
	Osc_init.HSEState = RCC_HSE_BYPASS;
 800083c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
	Osc_init.PLL.PLLState = RCC_PLL_ON;
 8000848:	2302      	movs	r3, #2
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_init.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
	Osc_init.PLL.PLLN = 50;
 8000850:	2332      	movs	r3, #50	; 0x32
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
	/* End of 120Mhz specific configuration */
	Osc_init.PLL.PLLQ = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
	Osc_init.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	653b      	str	r3, [r7, #80]	; 0x50

	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fdfd 	bl	8001464 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <_ZL18SystemClock_Configv+0x96>
	{
		// Error in Oscillator or PLL configuration.
		Error_Handler();
 800087a:	f7ff ff2d 	bl	80006d8 <_ZL13Error_Handlerv>
	}

	// Configure the various clocks.
	RCC_ClkInitTypeDef Clk_init{0};
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
	Clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800088e:	230f      	movs	r3, #15
 8000890:	60fb      	str	r3, [r7, #12]
	Clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2302      	movs	r3, #2
 8000894:	613b      	str	r3, [r7, #16]
	std::uint32_t flash_latency{FLASH_LATENCY_1};
 8000896:	2301      	movs	r3, #1
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
	Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;	// for 50HHz HCLK.
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
	Clk_init.APB1CLKDivider = RCC_HCLK_DIV1;	// for 50HHz PCLK1.
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
	Clk_init.APB2CLKDivider = RCC_HCLK_DIV1;	// for 50HHz PCLK2.
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
	if ( HAL_RCC_ClockConfig( &Clk_init, flash_latency ) != HAL_OK )
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f887 	bl	80019c0 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <_ZL18SystemClock_Configv+0xde>
	{
		// Error in Clock configuration.
		Error_Handler();
 80008c2:	f7ff ff09 	bl	80006d8 <_ZL13Error_Handlerv>
	}

	// Disable HSI
	__HAL_RCC_HSI_DISABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <_ZL18SystemClock_Configv+0x10c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <_ZL18SystemClock_Configv+0x10c>)
 80008cc:	f023 0301 	bic.w	r3, r3, #1
 80008d0:	6013      	str	r3, [r2, #0]

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 80008d2:	2004      	movs	r0, #4
 80008d4:	f000 fb5e 	bl	8000f94 <HAL_SYSTICK_CLKSourceConfig>
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
 80008d8:	f001 faa4 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <_ZL18SystemClock_Configv+0x114>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	099b      	lsrs	r3, r3, #6
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fb47 	bl	8000f7a <HAL_SYSTICK_Config>
}
 80008ec:	bf00      	nop
 80008ee:	3758      	adds	r7, #88	; 0x58
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000
 80008fc:	10624dd3 	.word	0x10624dd3

08000900 <_ZL10LSE_configv>:

static void LSE_config( void )
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0
	/* Configure the Oscillator. */
	RCC_OscInitTypeDef Osc_init{0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2234      	movs	r2, #52	; 0x34
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f919 	bl	8003b44 <memset>

	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000912:	2304      	movs	r3, #4
 8000914:	607b      	str	r3, [r7, #4]
	Osc_init.LSEState = RCC_LSE_ON;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]

	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fda1 	bl	8001464 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf14      	ite	ne
 8000928:	2301      	movne	r3, #1
 800092a:	2300      	moveq	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <_ZL10LSE_configv+0x36>
	{
		// Error in Oscillator configuration.
		Error_Handler();
 8000932:	f7ff fed1 	bl	80006d8 <_ZL13Error_Handlerv>
	}

	// Route LSE to MCO1 (PA8).
	HAL_RCC_MCOConfig( RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1 );
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800093c:	2000      	movs	r0, #0
 800093e:	f001 f92b 	bl	8001b98 <HAL_RCC_MCOConfig>
}
 8000942:	bf00      	nop
 8000944:	3738      	adds	r7, #56	; 0x38
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_TIM_IC_CaptureCallback>:

extern "C" void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if ( !capture_completed )
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d017      	beq.n	8000992 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		if ( !capture_idx )
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d108      	bne.n	800097c <HAL_TIM_IC_CaptureCallback+0x30>
		{
			TIM_cnts[0] = __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_1 );
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000972:	6013      	str	r3, [r2, #0]
			capture_idx = 1;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
			TIM_cnts[1] = __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_1 );
			capture_completed = true;
			capture_idx = 0;
		}
	}
}
 800097a:	e00a      	b.n	8000992 <HAL_TIM_IC_CaptureCallback+0x46>
			TIM_cnts[1] = __HAL_TIM_GET_COMPARE( htim, TIM_CHANNEL_1 );
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000984:	6053      	str	r3, [r2, #4]
			capture_completed = true;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
			capture_idx = 0;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200002d1 	.word	0x200002d1
 80009a4:	200002d0 	.word	0x200002d0
 80009a8:	200002c8 	.word	0x200002c8
 80009ac:	00000000 	.word	0x00000000

080009b0 <_ZL18displayUserSigInfov>:

static void displayUserSigInfo( void )
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 80009b6:	af00      	add	r7, sp, #0
	std::uint32_t elapsed_tim_cnts{0};
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	double user_sig_time_period{0};
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	f04f 0300 	mov.w	r3, #0
 80009c6:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80009ca:	e9c1 2300 	strd	r2, r3, [r1]
	double user_sig_freq{0};
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80009da:	e9c1 2300 	strd	r2, r3, [r1]
	std::uint32_t tim_freq{0};
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	double tim_resolution{0};
 80009e4:	f04f 0200 	mov.w	r2, #0
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80009f0:	e9c1 2300 	strd	r2, r3, [r1]

	if ( TIM_cnts[1] >= TIM_cnts[0] )
 80009f4:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <_ZL18displayUserSigInfov+0x130>)
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <_ZL18displayUserSigInfov+0x130>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	bf2c      	ite	cs
 8000a00:	2301      	movcs	r3, #1
 8000a02:	2300      	movcc	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d007      	beq.n	8000a1a <_ZL18displayUserSigInfov+0x6a>
	{
		elapsed_tim_cnts = TIM_cnts[1] - TIM_cnts[0];
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <_ZL18displayUserSigInfov+0x130>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <_ZL18displayUserSigInfov+0x130>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8000a18:	e009      	b.n	8000a2e <_ZL18displayUserSigInfov+0x7e>
	}
	else
	{
		elapsed_tim_cnts = ( hTimer2.Init.Period - TIM_cnts[0] ) + TIM_cnts[1];
 8000a1a:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <_ZL18displayUserSigInfov+0x134>)
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <_ZL18displayUserSigInfov+0x130>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1ad2      	subs	r2, r2, r3
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <_ZL18displayUserSigInfov+0x130>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	}

	// Because The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC + 1).
	tim_freq = HAL_RCC_GetPCLK1Freq() / ( hTimer2.Init.Prescaler + 1 );
 8000a2e:	f001 fa05 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8000a32:	4602      	mov	r2, r0
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <_ZL18displayUserSigInfov+0x134>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	tim_resolution = 1.0 / tim_freq;
 8000a42:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a4e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000a52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a56:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000a5a:	ed83 7b00 	vstr	d7, [r3]
	user_sig_time_period = elapsed_tim_cnts * tim_resolution;
 8000a5e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a6a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000a6e:	ed93 6b00 	vldr	d6, [r3]
 8000a72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a76:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000a7a:	ed83 7b00 	vstr	d7, [r3]
	// Transform from User signal time domain to Frequency domain.
	user_sig_freq = 1.0 / user_sig_time_period;
 8000a7e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000a82:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000a86:	ed93 6b00 	vldr	d6, [r3]
 8000a8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a8e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000a92:	ed83 7b00 	vstr	d7, [r3]

	char msg[1024];

	/* Configure the UART for debug console */
	UART3_Init();
 8000a96:	f7ff fde5 	bl	8000664 <_ZL10UART3_Initv>

	std::sprintf (msg, "%.3lfKhz\r\n", ( user_sig_freq / 1000 ) );
 8000a9a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000a9e:	ed93 7b00 	vldr	d7, [r3]
 8000aa2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000ad8 <_ZL18displayUserSigInfov+0x128>
 8000aa6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000aaa:	4638      	mov	r0, r7
 8000aac:	ec53 2b15 	vmov	r2, r3, d5
 8000ab0:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <_ZL18displayUserSigInfov+0x138>)
 8000ab2:	f003 fc93 	bl	80043dc <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fbc1 	bl	8000240 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4639      	mov	r1, r7
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <_ZL18displayUserSigInfov+0x13c>)
 8000aca:	f001 ffc6 	bl	8002a5a <HAL_UART_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	00000000 	.word	0x00000000
 8000adc:	408f4000 	.word	0x408f4000
 8000ae0:	200002c8 	.word	0x200002c8
 8000ae4:	2000027c 	.word	0x2000027c
 8000ae8:	08006854 	.word	0x08006854
 8000aec:	200001f8 	.word	0x200001f8

08000af0 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit( void )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fa0b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x40>)
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_MspInit+0x40>)
 8000b00:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000b04:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority( UsageFault_IRQn, 0, 0 );
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f06f 0009 	mvn.w	r0, #9
 8000b0e:	f000 fa0a 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( BusFault_IRQn, 0, 0 );
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	f06f 000a 	mvn.w	r0, #10
 8000b1a:	f000 fa04 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( MemoryManagement_IRQn, 0, 0 );
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	f06f 000b 	mvn.w	r0, #11
 8000b26:	f000 f9fe 	bl	8000f26 <HAL_NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <HAL_UART_MspInit>:

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE ) || defined( USE_UART_EXAMPLE )
/* UART Low level initilization */
extern "C" void HAL_UART_MspInit( UART_HandleTypeDef *huart )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0x84>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000b7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b80:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init( GPIOD, &USART3_gpio_config );
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <HAL_UART_MspInit+0x88>)
 8000b9a:	f000 fab7 	bl	800110c <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority( USART3_IRQn, 0x0F, 0 );
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	2027      	movs	r0, #39	; 0x27
 8000ba4:	f000 f9bf 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( USART3_IRQn );
 8000ba8:	2027      	movs	r0, #39	; 0x27
 8000baa:	f000 f9d8 	bl	8000f5e <HAL_NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020c00 	.word	0x40020c00

08000bc0 <HAL_TIM_IC_MspInit>:
	HAL_NVIC_EnableIRQ( TIM6_DAC_IRQn );
#endif // USE_BASIC_TIMER_EXAMPLE

#ifdef USE_INPUT_CAPTURE_TIMER_EXAMPLE
extern "C" void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	// Enable the clock for the TIM2.
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_TIM_IC_MspInit+0x78>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_TIM_IC_MspInit+0x78>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_TIM_IC_MspInit+0x78>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]

	// Configure GPIO pin PA0 as Timer 2 input channel.
	GPIO_InitTypeDef tim2_ch1_gpio{0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
	tim2_ch1_gpio.Pin = GPIO_PIN_0;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
	tim2_ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
	tim2_ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
	// Enable the Clock for GPIOA.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_TIM_IC_MspInit+0x78>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_TIM_IC_MspInit+0x78>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_TIM_IC_MspInit+0x78>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
	HAL_GPIO_Init( GPIOA, &tim2_ch1_gpio );
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <HAL_TIM_IC_MspInit+0x7c>)
 8000c1c:	f000 fa76 	bl	800110c <HAL_GPIO_Init>

	// Enable TIM2 IRQ.
	HAL_NVIC_SetPriority( TIM2_IRQn, 15, 0 );
 8000c20:	2200      	movs	r2, #0
 8000c22:	210f      	movs	r1, #15
 8000c24:	201c      	movs	r0, #28
 8000c26:	f000 f97e 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f000 f997 	bl	8000f5e <HAL_NVIC_EnableIRQ>
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f002 ff33 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fcc3 	bl	8000620 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000ca8:	08006c6c 	.word	0x08006c6c
  ldr r2, =_sbss
 8000cac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000cb0:	200002f4 	.word	0x200002f4

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>

08000cb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f000 f928 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f805 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc6:	f7ff ff13 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f943 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200002e0 	.word	0x200002e0

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200002e0 	.word	0x200002e0

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0000 	.word	0x05fa0000

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d106      	bne.n	8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000fae:	e005      	b.n	8000fbc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fb6:	f023 0304 	bic.w	r3, r3, #4
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fd0:	f000 f802 	bl	8000fd8 <HAL_SYSTICK_Callback>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff feb0 	bl	8000d58 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d008      	beq.n	8001018 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e052      	b.n	80010be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0216 	bic.w	r2, r2, #22
 8001026:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001036:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2b00      	cmp	r3, #0
 800103e:	d103      	bne.n	8001048 <HAL_DMA_Abort+0x62>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001044:	2b00      	cmp	r3, #0
 8001046:	d007      	beq.n	8001058 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0208 	bic.w	r2, r2, #8
 8001056:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001068:	e013      	b.n	8001092 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106a:	f7ff fe75 	bl	8000d58 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b05      	cmp	r3, #5
 8001076:	d90c      	bls.n	8001092 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2220      	movs	r2, #32
 800107c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e015      	b.n	80010be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e4      	bne.n	800106a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	223f      	movs	r2, #63	; 0x3f
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d004      	beq.n	80010e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e00c      	b.n	80010fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2205      	movs	r2, #5
 80010e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e175      	b.n	8001418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8164 	bne.w	8001412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x56>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80be 	beq.w	8001412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_GPIO_Init+0x324>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_GPIO_Init+0x324>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ae:	4a61      	ldr	r2, [pc, #388]	; (8001434 <HAL_GPIO_Init+0x328>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x32c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d037      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_GPIO_Init+0x330>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d031      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a56      	ldr	r2, [pc, #344]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a55      	ldr	r2, [pc, #340]	; (8001444 <HAL_GPIO_Init+0x338>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x232>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x33c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <HAL_GPIO_Init+0x340>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x344>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a51      	ldr	r2, [pc, #324]	; (8001454 <HAL_GPIO_Init+0x348>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x34c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x350>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x21a>
 8001322:	2309      	movs	r3, #9
 8001324:	e012      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001326:	230a      	movs	r3, #10
 8001328:	e010      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132a:	2308      	movs	r3, #8
 800132c:	e00e      	b.n	800134c <HAL_GPIO_Init+0x240>
 800132e:	2307      	movs	r3, #7
 8001330:	e00c      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001332:	2306      	movs	r3, #6
 8001334:	e00a      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001336:	2305      	movs	r3, #5
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133a:	2304      	movs	r3, #4
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x240>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x240>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x240>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x328>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <HAL_GPIO_Init+0x354>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a34      	ldr	r2, [pc, #208]	; (8001460 <HAL_GPIO_Init+0x354>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <HAL_GPIO_Init+0x354>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_GPIO_Init+0x354>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_GPIO_Init+0x354>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f ae86 	bls.w	800112c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40022000 	.word	0x40022000
 800145c:	40022400 	.word	0x40022400
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e29b      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001494:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x62>
 80014a0:	4b90      	ldr	r3, [pc, #576]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b8d      	ldr	r3, [pc, #564]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06c      	beq.n	8001594 <HAL_RCC_OscConfig+0x130>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d168      	bne.n	8001594 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e275      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x7a>
 80014d0:	4b84      	ldr	r3, [pc, #528]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a83      	ldr	r2, [pc, #524]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e02e      	b.n	800153c <HAL_RCC_OscConfig+0xd8>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x9c>
 80014e6:	4b7f      	ldr	r3, [pc, #508]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7e      	ldr	r2, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b7c      	ldr	r3, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a7b      	ldr	r2, [pc, #492]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xd8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0xc0>
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a72      	ldr	r2, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xd8>
 8001524:	4b6f      	ldr	r3, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6e      	ldr	r2, [pc, #440]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a6b      	ldr	r2, [pc, #428]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc08 	bl	8000d58 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc04 	bl	8000d58 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e229      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xe8>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fbf4 	bl	8000d58 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fbf0 	bl	8000d58 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e215      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x110>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d069      	beq.n	8001676 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x190>
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x17a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1e9      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	493d      	ldr	r1, [pc, #244]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e040      	b.n	8001676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d023      	beq.n	8001644 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fba6 	bl	8000d58 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fba2 	bl	8000d58 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1c7      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4929      	ldr	r1, [pc, #164]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
 8001642:	e018      	b.n	8001676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb82 	bl	8000d58 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fb7e 	bl	8000d58 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1a3      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d038      	beq.n	80016f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d019      	beq.n	80016be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 800168c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff fb5f 	bl	8000d58 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fb5b 	bl	8000d58 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e180      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x23a>
 80016bc:	e01a      	b.n	80016f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80016c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_RCC_OscConfig+0x280>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb45 	bl	8000d58 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb41 	bl	8000d58 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d903      	bls.n	80016e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e166      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
 80016e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a4 	beq.w	800184a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a88      	ldr	r2, [pc, #544]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b86      	ldr	r3, [pc, #536]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x4d4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d118      	bne.n	8001768 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x4d4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7f      	ldr	r2, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x4d4>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb09 	bl	8000d58 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff fb05 	bl	8000d58 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e12a      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x4d4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x31a>
 8001770:	4b70      	ldr	r3, [pc, #448]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	e02d      	b.n	80017da <HAL_RCC_OscConfig+0x376>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x33c>
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a67      	ldr	r2, [pc, #412]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
 800179e:	e01c      	b.n	80017da <HAL_RCC_OscConfig+0x376>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d10c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x35e>
 80017a8:	4b62      	ldr	r3, [pc, #392]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a61      	ldr	r2, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	4b5f      	ldr	r3, [pc, #380]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	4a5e      	ldr	r2, [pc, #376]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
 80017c0:	e00b      	b.n	80017da <HAL_RCC_OscConfig+0x376>
 80017c2:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	4a5b      	ldr	r2, [pc, #364]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
 80017ce:	4b59      	ldr	r3, [pc, #356]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d015      	beq.n	800180e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fab9 	bl	8000d58 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff fab5 	bl	8000d58 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e0d8      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ee      	beq.n	80017ea <HAL_RCC_OscConfig+0x386>
 800180c:	e014      	b.n	8001838 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff faa3 	bl	8000d58 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fa9f 	bl	8000d58 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e0c2      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80ae 	beq.w	80019b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d06d      	beq.n	800193c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d14b      	bne.n	8001900 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fa70 	bl	8000d58 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fa6c 	bl	8000d58 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e091      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	019b      	lsls	r3, r3, #6
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	071b      	lsls	r3, r3, #28
 80018c6:	491b      	ldr	r1, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a18      	ldr	r2, [pc, #96]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa3e 	bl	8000d58 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fa3a 	bl	8000d58 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e05f      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x47c>
 80018fe:	e057      	b.n	80019b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fa24 	bl	8000d58 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fa20 	bl	8000d58 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e045      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_OscConfig+0x4d0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x4b0>
 8001932:	e03d      	b.n	80019b0 <HAL_RCC_OscConfig+0x54c>
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_RCC_OscConfig+0x558>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d030      	beq.n	80019ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d129      	bne.n	80019ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d122      	bne.n	80019ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001972:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001974:	4293      	cmp	r3, r2
 8001976:	d119      	bne.n	80019ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d10f      	bne.n	80019ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0d0      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d910      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 020f 	bic.w	r2, r3, #15
 80019ee:	4965      	ldr	r1, [pc, #404]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b8      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	494d      	ldr	r1, [pc, #308]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d040      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d115      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07f      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e073      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06b      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4936      	ldr	r1, [pc, #216]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab4:	f7ff f950 	bl	8000d58 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff f94c 	bl	8000d58 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e053      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d210      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 020f 	bic.w	r2, r3, #15
 8001afa:	4922      	ldr	r1, [pc, #136]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e032      	b.n	8001b7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4916      	ldr	r1, [pc, #88]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	490e      	ldr	r1, [pc, #56]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f885 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	490a      	ldr	r1, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1cc>)
 8001b64:	5ccb      	ldrb	r3, [r1, r3]
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1d0>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1d4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f8ac 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08006860 	.word	0x08006860
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d127      	bne.n	8001bfa <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
 8001bc0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481e      	ldr	r0, [pc, #120]	; (8001c58 <HAL_RCC_MCOConfig+0xc0>)
 8001be0:	f7ff fa94 	bl	800110c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	4918      	ldr	r1, [pc, #96]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8001bf8:	e027      	b.n	8001c4a <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <HAL_RCC_MCOConfig+0xc4>)
 8001c30:	f7ff fa6c 	bl	800110c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	00d9      	lsls	r1, r3, #3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_MCOConfig+0xbc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	3730      	adds	r7, #48	; 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020800 	.word	0x40020800

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f200 80bd 	bhi.w	8001e04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c92:	e0b7      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c96:	60bb      	str	r3, [r7, #8]
      break;
 8001c98:	e0b7      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c9c:	60bb      	str	r3, [r7, #8]
      break;
 8001c9e:	e0b4      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d04d      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	ea02 0800 	and.w	r8, r2, r0
 8001cce:	ea03 0901 	and.w	r9, r3, r1
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	014b      	lsls	r3, r1, #5
 8001ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ce4:	0142      	lsls	r2, r0, #5
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	ebb0 0008 	subs.w	r0, r0, r8
 8001cee:	eb61 0109 	sbc.w	r1, r1, r9
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d00:	0182      	lsls	r2, r0, #6
 8001d02:	1a12      	subs	r2, r2, r0
 8001d04:	eb63 0301 	sbc.w	r3, r3, r1
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	00d9      	lsls	r1, r3, #3
 8001d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d16:	00d0      	lsls	r0, r2, #3
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	eb12 0208 	adds.w	r2, r2, r8
 8001d20:	eb43 0309 	adc.w	r3, r3, r9
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0259      	lsls	r1, r3, #9
 8001d2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d32:	0250      	lsls	r0, r2, #9
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe fad4 	bl	80002f0 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e04a      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	ea02 0400 	and.w	r4, r2, r0
 8001d6a:	ea03 0501 	and.w	r5, r3, r1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	014b      	lsls	r3, r1, #5
 8001d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d80:	0142      	lsls	r2, r0, #5
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	1b00      	subs	r0, r0, r4
 8001d88:	eb61 0105 	sbc.w	r1, r1, r5
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	018b      	lsls	r3, r1, #6
 8001d96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d9a:	0182      	lsls	r2, r0, #6
 8001d9c:	1a12      	subs	r2, r2, r0
 8001d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001da2:	f04f 0000 	mov.w	r0, #0
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	00d9      	lsls	r1, r3, #3
 8001dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db0:	00d0      	lsls	r0, r2, #3
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	1912      	adds	r2, r2, r4
 8001db8:	eb45 0303 	adc.w	r3, r5, r3
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	0299      	lsls	r1, r3, #10
 8001dc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dca:	0290      	lsls	r0, r2, #10
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	f7fe fa88 	bl	80002f0 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	60bb      	str	r3, [r7, #8]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e06:	60bb      	str	r3, [r7, #8]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a9b      	lsrs	r3, r3, #10
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	08006870 	.word	0x08006870

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffdc 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08006870 	.word	0x08006870

08001e8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e049      	b.n	8001f32 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fe84 	bl	8000bc0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 fb6a 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <HAL_TIM_IC_Start_IT+0x1e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e023      	b.n	8001fa2 <HAL_TIM_IC_Start_IT+0x66>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d104      	bne.n	8001f6a <HAL_TIM_IC_Start_IT+0x2e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	e01b      	b.n	8001fa2 <HAL_TIM_IC_Start_IT+0x66>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d104      	bne.n	8001f7a <HAL_TIM_IC_Start_IT+0x3e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e013      	b.n	8001fa2 <HAL_TIM_IC_Start_IT+0x66>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d104      	bne.n	8001f8a <HAL_TIM_IC_Start_IT+0x4e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	e00b      	b.n	8001fa2 <HAL_TIM_IC_Start_IT+0x66>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d104      	bne.n	8001f9a <HAL_TIM_IC_Start_IT+0x5e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	e003      	b.n	8001fa2 <HAL_TIM_IC_Start_IT+0x66>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <HAL_TIM_IC_Start_IT+0x78>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e013      	b.n	8001fdc <HAL_TIM_IC_Start_IT+0xa0>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d104      	bne.n	8001fc4 <HAL_TIM_IC_Start_IT+0x88>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e00b      	b.n	8001fdc <HAL_TIM_IC_Start_IT+0xa0>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d104      	bne.n	8001fd4 <HAL_TIM_IC_Start_IT+0x98>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e003      	b.n	8001fdc <HAL_TIM_IC_Start_IT+0xa0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fde:	7bbb      	ldrb	r3, [r7, #14]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0e2      	b.n	80021b4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_IC_Start_IT+0xc2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	e023      	b.n	8002046 <HAL_TIM_IC_Start_IT+0x10a>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d104      	bne.n	800200e <HAL_TIM_IC_Start_IT+0xd2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200c:	e01b      	b.n	8002046 <HAL_TIM_IC_Start_IT+0x10a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d104      	bne.n	800201e <HAL_TIM_IC_Start_IT+0xe2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800201c:	e013      	b.n	8002046 <HAL_TIM_IC_Start_IT+0x10a>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d104      	bne.n	800202e <HAL_TIM_IC_Start_IT+0xf2>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800202c:	e00b      	b.n	8002046 <HAL_TIM_IC_Start_IT+0x10a>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d104      	bne.n	800203e <HAL_TIM_IC_Start_IT+0x102>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203c:	e003      	b.n	8002046 <HAL_TIM_IC_Start_IT+0x10a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d104      	bne.n	8002056 <HAL_TIM_IC_Start_IT+0x11a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002054:	e013      	b.n	800207e <HAL_TIM_IC_Start_IT+0x142>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d104      	bne.n	8002066 <HAL_TIM_IC_Start_IT+0x12a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002064:	e00b      	b.n	800207e <HAL_TIM_IC_Start_IT+0x142>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d104      	bne.n	8002076 <HAL_TIM_IC_Start_IT+0x13a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002074:	e003      	b.n	800207e <HAL_TIM_IC_Start_IT+0x142>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d841      	bhi.n	8002108 <HAL_TIM_IC_Start_IT+0x1cc>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <HAL_TIM_IC_Start_IT+0x150>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	080020c1 	.word	0x080020c1
 8002090:	08002109 	.word	0x08002109
 8002094:	08002109 	.word	0x08002109
 8002098:	08002109 	.word	0x08002109
 800209c:	080020d3 	.word	0x080020d3
 80020a0:	08002109 	.word	0x08002109
 80020a4:	08002109 	.word	0x08002109
 80020a8:	08002109 	.word	0x08002109
 80020ac:	080020e5 	.word	0x080020e5
 80020b0:	08002109 	.word	0x08002109
 80020b4:	08002109 	.word	0x08002109
 80020b8:	08002109 	.word	0x08002109
 80020bc:	080020f7 	.word	0x080020f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0202 	orr.w	r2, r2, #2
 80020ce:	60da      	str	r2, [r3, #12]
      break;
 80020d0:	e01d      	b.n	800210e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0204 	orr.w	r2, r2, #4
 80020e0:	60da      	str	r2, [r3, #12]
      break;
 80020e2:	e014      	b.n	800210e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	60da      	str	r2, [r3, #12]
      break;
 80020f4:	e00b      	b.n	800210e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0210 	orr.w	r2, r2, #16
 8002104:	60da      	str	r2, [r3, #12]
      break;
 8002106:	e002      	b.n	800210e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      break;
 800210c:	bf00      	nop
  }

  if (status == HAL_OK)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d14e      	bne.n	80021b2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	6839      	ldr	r1, [r7, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fc0b 	bl	8002938 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <HAL_TIM_IC_Start_IT+0x280>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d01d      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_TIM_IC_Start_IT+0x284>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d018      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <HAL_TIM_IC_Start_IT+0x288>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_TIM_IC_Start_IT+0x28c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00e      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_TIM_IC_Start_IT+0x290>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_TIM_IC_Start_IT+0x294>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_TIM_IC_Start_IT+0x236>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_TIM_IC_Start_IT+0x298>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d115      	bne.n	800219e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_TIM_IC_Start_IT+0x29c>)
 800217a:	4013      	ands	r3, r2
 800217c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d015      	beq.n	80021b0 <HAL_TIM_IC_Start_IT+0x274>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218a:	d011      	beq.n	80021b0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219c:	e008      	b.n	80021b0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e000      	b.n	80021b2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40000c00 	.word	0x40000c00
 80021cc:	40010400 	.word	0x40010400
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40001800 	.word	0x40001800
 80021d8:	00010007 	.word	0x00010007

080021dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fb94 	bl	800094c <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f99d 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9a4 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b04      	cmp	r3, #4
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0204 	mvn.w	r2, #4
 800225c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fb6a 	bl	800094c <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f973 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f97a 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b08      	cmp	r3, #8
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0208 	mvn.w	r2, #8
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fb40 	bl	800094c <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f949 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f950 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0210 	mvn.w	r2, #16
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2208      	movs	r2, #8
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fb16 	bl	800094c <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f91f 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f926 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0201 	mvn.w	r2, #1
 8002358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8f9 	bl	8002552 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	2b80      	cmp	r3, #128	; 0x80
 800236c:	d10e      	bne.n	800238c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d107      	bne.n	800238c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fb05 	bl	8002996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d10e      	bne.n	80023ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d107      	bne.n	80023ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 faf8 	bl	80029aa <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d10e      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d107      	bne.n	80023e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8d4 	bl	800258e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d10e      	bne.n	8002412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d107      	bne.n	8002412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0220 	mvn.w	r2, #32
 800240a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fab8 	bl	8002982 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002434:	2302      	movs	r3, #2
 8002436:	e088      	b.n	800254a <HAL_TIM_IC_ConfigChannel+0x130>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11b      	bne.n	800247e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f000 f945 	bl	80026e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 020c 	bic.w	r2, r2, #12
 8002468:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6999      	ldr	r1, [r3, #24]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	619a      	str	r2, [r3, #24]
 800247c:	e060      	b.n	8002540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d11c      	bne.n	80024be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f000 f99a 	bl	80027cc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6999      	ldr	r1, [r3, #24]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	021a      	lsls	r2, r3, #8
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e040      	b.n	8002540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f000 f9b7 	bl	8002846 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 020c 	bic.w	r2, r2, #12
 80024e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69d9      	ldr	r1, [r3, #28]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	61da      	str	r2, [r3, #28]
 80024fa:	e021      	b.n	8002540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d11c      	bne.n	800253c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f000 f9d4 	bl	80028be <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002524:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69d9      	ldr	r1, [r3, #28]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	021a      	lsls	r2, r3, #8
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	61da      	str	r2, [r3, #28]
 800253a:	e001      	b.n	8002540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a40      	ldr	r2, [pc, #256]	; (80026b8 <TIM_Base_SetConfig+0x114>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d00f      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3d      	ldr	r2, [pc, #244]	; (80026bc <TIM_Base_SetConfig+0x118>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3c      	ldr	r2, [pc, #240]	; (80026c0 <TIM_Base_SetConfig+0x11c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <TIM_Base_SetConfig+0x120>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <TIM_Base_SetConfig+0x124>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <TIM_Base_SetConfig+0x114>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d027      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <TIM_Base_SetConfig+0x118>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d023      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <TIM_Base_SetConfig+0x11c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <TIM_Base_SetConfig+0x120>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <TIM_Base_SetConfig+0x124>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d017      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a28      	ldr	r2, [pc, #160]	; (80026cc <TIM_Base_SetConfig+0x128>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a27      	ldr	r2, [pc, #156]	; (80026d0 <TIM_Base_SetConfig+0x12c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00f      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <TIM_Base_SetConfig+0x130>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00b      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <TIM_Base_SetConfig+0x134>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <TIM_Base_SetConfig+0x138>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d003      	beq.n	8002656 <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <TIM_Base_SetConfig+0x13c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d108      	bne.n	8002668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <TIM_Base_SetConfig+0x114>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0xf8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <TIM_Base_SetConfig+0x124>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	615a      	str	r2, [r3, #20]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40000c00 	.word	0x40000c00
 80026c8:	40010400 	.word	0x40010400
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40014400 	.word	0x40014400
 80026d4:	40014800 	.word	0x40014800
 80026d8:	40001800 	.word	0x40001800
 80026dc:	40001c00 	.word	0x40001c00
 80026e0:	40002000 	.word	0x40002000

080026e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <TIM_TI1_SetConfig+0xcc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d01b      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d017      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <TIM_TI1_SetConfig+0xd0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a24      	ldr	r2, [pc, #144]	; (80027b8 <TIM_TI1_SetConfig+0xd4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00f      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a23      	ldr	r2, [pc, #140]	; (80027bc <TIM_TI1_SetConfig+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00b      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <TIM_TI1_SetConfig+0xdc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <TIM_TI1_SetConfig+0xe0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_TI1_SetConfig+0x66>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <TIM_TI1_SetConfig+0xe4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <TIM_TI1_SetConfig+0x6a>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <TIM_TI1_SetConfig+0x6c>
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e003      	b.n	800276e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	b2db      	uxtb	r3, r3
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f023 030a 	bic.w	r3, r3, #10
 8002788:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f003 030a 	and.w	r3, r3, #10
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00
 80027c0:	40010400 	.word	0x40010400
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40001800 	.word	0x40001800

080027cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f023 0210 	bic.w	r2, r3, #16
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800280a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	031b      	lsls	r3, r3, #12
 8002810:	b29b      	uxth	r3, r3
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800281e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002882:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	b2db      	uxtb	r3, r3
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002896:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	031b      	lsls	r3, r3, #12
 8002902:	b29b      	uxth	r3, r3
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002910:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	031b      	lsls	r3, r3, #12
 8002916:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	621a      	str	r2, [r3, #32]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2201      	movs	r2, #1
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	621a      	str	r2, [r3, #32]
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e040      	b.n	8002a52 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe f8a7 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2224      	movs	r2, #36	; 0x24
 80029ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fbc9 	bl	8003194 <UART_SetConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e022      	b.n	8002a52 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fe1f 	bl	8003658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fea6 	bl	800379c <UART_CheckIdleState>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08a      	sub	sp, #40	; 0x28
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	f040 8081 	bne.w	8002b76 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_UART_Transmit+0x26>
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e079      	b.n	8002b78 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Transmit+0x38>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e072      	b.n	8002b78 <HAL_UART_Transmit+0x11e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	; 0x21
 8002aa6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe f956 	bl	8000d58 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d108      	bne.n	8002ada <HAL_UART_Transmit+0x80>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e003      	b.n	8002ae2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002aea:	e02c      	b.n	8002b46 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fe99 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e038      	b.n	8002b78 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	3302      	adds	r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e007      	b.n	8002b34 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1cc      	bne.n	8002aec <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2140      	movs	r1, #64	; 0x40
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fe66 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e005      	b.n	8002b78 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b0ba      	sub	sp, #232	; 0xe8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ba6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002baa:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bae:	4013      	ands	r3, r2
 8002bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d115      	bne.n	8002be8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00f      	beq.n	8002be8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 82a4 	beq.w	8003126 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
      }
      return;
 8002be6:	e29e      	b.n	8003126 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8117 	beq.w	8002e20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_UART_IRQHandler+0x298>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 810a 	beq.w	8002e20 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <HAL_UART_IRQHandler+0xbc>
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d011      	beq.n	8002c6c <HAL_UART_IRQHandler+0xec>
 8002c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c62:	f043 0204 	orr.w	r2, r3, #4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d011      	beq.n	8002c9c <HAL_UART_IRQHandler+0x11c>
 8002c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	f043 0208 	orr.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <HAL_UART_IRQHandler+0x18a>
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 820a 	beq.w	800312a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00d      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d04f      	beq.n	8002e02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fe27 	bl	80039b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d141      	bne.n	8002dfa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002da2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002db2:	e841 2300 	strex	r3, r2, [r1]
 8002db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1d9      	bne.n	8002d76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_UART_IRQHandler+0x29c>)
 8002dd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f975 	bl	80010c6 <HAL_DMA_Abort_IT>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002dec:	4610      	mov	r0, r2
 8002dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df0:	e00f      	b.n	8002e12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f9ae 	bl	8003154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	e00b      	b.n	8002e12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f9aa 	bl	8003154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e007      	b.n	8002e12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9a6 	bl	8003154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e10:	e18b      	b.n	800312a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e12:	bf00      	nop
    return;
 8002e14:	e189      	b.n	800312a <HAL_UART_IRQHandler+0x5aa>
 8002e16:	bf00      	nop
 8002e18:	04000120 	.word	0x04000120
 8002e1c:	08003a7d 	.word	0x08003a7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	f040 8144 	bne.w	80030b2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 813d 	beq.w	80030b2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8136 	beq.w	80030b2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	f040 80b2 	bne.w	8002fc2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 815d 	beq.w	800312e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	f080 8155 	bcs.w	800312e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	f000 8085 	beq.w	8002fa6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1da      	bne.n	8002e9c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3308      	adds	r3, #8
 8002f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e1      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3308      	adds	r3, #8
 8002f28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3308      	adds	r3, #8
 8002f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f4e:	e841 2300 	strex	r3, r2, [r1]
 8002f52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1e3      	bne.n	8002f22 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f76:	f023 0310 	bic.w	r3, r3, #16
 8002f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e4      	bne.n	8002f66 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f820 	bl	8000fe6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8d4 	bl	8003168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fc0:	e0b5      	b.n	800312e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a7 	beq.w	8003132 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8002fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a2 	beq.w	8003132 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e4      	bne.n	8002fee <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3308      	adds	r3, #8
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	623b      	str	r3, [r7, #32]
   return(result);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3308      	adds	r3, #8
 8003044:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003048:	633a      	str	r2, [r7, #48]	; 0x30
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800304e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e3      	bne.n	8003024 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	60fb      	str	r3, [r7, #12]
   return(result);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0310 	bic.w	r3, r3, #16
 8003082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	69b9      	ldr	r1, [r7, #24]
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	617b      	str	r3, [r7, #20]
   return(result);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e4      	bne.n	800306e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f85c 	bl	8003168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030b0:	e03f      	b.n	8003132 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00e      	beq.n	80030dc <HAL_UART_IRQHandler+0x55c>
 80030be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f853 	bl	8003180 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030da:	e02d      	b.n	8003138 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01c      	beq.n	8003136 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
    }
    return;
 8003104:	e017      	b.n	8003136 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <HAL_UART_IRQHandler+0x5b8>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fcc2 	bl	8003aa8 <UART_EndTransmit_IT>
    return;
 8003124:	e008      	b.n	8003138 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003126:	bf00      	nop
 8003128:	e006      	b.n	8003138 <HAL_UART_IRQHandler+0x5b8>
    return;
 800312a:	bf00      	nop
 800312c:	e004      	b.n	8003138 <HAL_UART_IRQHandler+0x5b8>
      return;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003136:	bf00      	nop
  }

}
 8003138:	37e8      	adds	r7, #232	; 0xe8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop

08003140 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4ba7      	ldr	r3, [pc, #668]	; (800345c <UART_SetConfig+0x2c8>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	6979      	ldr	r1, [r7, #20]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a95      	ldr	r2, [pc, #596]	; (8003460 <UART_SetConfig+0x2cc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d120      	bne.n	8003252 <UART_SetConfig+0xbe>
 8003210:	4b94      	ldr	r3, [pc, #592]	; (8003464 <UART_SetConfig+0x2d0>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b03      	cmp	r3, #3
 800321c:	d816      	bhi.n	800324c <UART_SetConfig+0xb8>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <UART_SetConfig+0x90>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	08003241 	.word	0x08003241
 800322c:	0800323b 	.word	0x0800323b
 8003230:	08003247 	.word	0x08003247
 8003234:	2301      	movs	r3, #1
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e14f      	b.n	80034da <UART_SetConfig+0x346>
 800323a:	2302      	movs	r3, #2
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e14c      	b.n	80034da <UART_SetConfig+0x346>
 8003240:	2304      	movs	r3, #4
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e149      	b.n	80034da <UART_SetConfig+0x346>
 8003246:	2308      	movs	r3, #8
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e146      	b.n	80034da <UART_SetConfig+0x346>
 800324c:	2310      	movs	r3, #16
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e143      	b.n	80034da <UART_SetConfig+0x346>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a84      	ldr	r2, [pc, #528]	; (8003468 <UART_SetConfig+0x2d4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d132      	bne.n	80032c2 <UART_SetConfig+0x12e>
 800325c:	4b81      	ldr	r3, [pc, #516]	; (8003464 <UART_SetConfig+0x2d0>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d828      	bhi.n	80032bc <UART_SetConfig+0x128>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <UART_SetConfig+0xdc>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032bd 	.word	0x080032bd
 8003278:	080032bd 	.word	0x080032bd
 800327c:	080032bd 	.word	0x080032bd
 8003280:	080032b1 	.word	0x080032b1
 8003284:	080032bd 	.word	0x080032bd
 8003288:	080032bd 	.word	0x080032bd
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032ab 	.word	0x080032ab
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032bd 	.word	0x080032bd
 800329c:	080032bd 	.word	0x080032bd
 80032a0:	080032b7 	.word	0x080032b7
 80032a4:	2300      	movs	r3, #0
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e117      	b.n	80034da <UART_SetConfig+0x346>
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e114      	b.n	80034da <UART_SetConfig+0x346>
 80032b0:	2304      	movs	r3, #4
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e111      	b.n	80034da <UART_SetConfig+0x346>
 80032b6:	2308      	movs	r3, #8
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e10e      	b.n	80034da <UART_SetConfig+0x346>
 80032bc:	2310      	movs	r3, #16
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e10b      	b.n	80034da <UART_SetConfig+0x346>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a69      	ldr	r2, [pc, #420]	; (800346c <UART_SetConfig+0x2d8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d120      	bne.n	800330e <UART_SetConfig+0x17a>
 80032cc:	4b65      	ldr	r3, [pc, #404]	; (8003464 <UART_SetConfig+0x2d0>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032d6:	2b30      	cmp	r3, #48	; 0x30
 80032d8:	d013      	beq.n	8003302 <UART_SetConfig+0x16e>
 80032da:	2b30      	cmp	r3, #48	; 0x30
 80032dc:	d814      	bhi.n	8003308 <UART_SetConfig+0x174>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d009      	beq.n	80032f6 <UART_SetConfig+0x162>
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d810      	bhi.n	8003308 <UART_SetConfig+0x174>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <UART_SetConfig+0x15c>
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d006      	beq.n	80032fc <UART_SetConfig+0x168>
 80032ee:	e00b      	b.n	8003308 <UART_SetConfig+0x174>
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e0f1      	b.n	80034da <UART_SetConfig+0x346>
 80032f6:	2302      	movs	r3, #2
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e0ee      	b.n	80034da <UART_SetConfig+0x346>
 80032fc:	2304      	movs	r3, #4
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0eb      	b.n	80034da <UART_SetConfig+0x346>
 8003302:	2308      	movs	r3, #8
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e0e8      	b.n	80034da <UART_SetConfig+0x346>
 8003308:	2310      	movs	r3, #16
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e0e5      	b.n	80034da <UART_SetConfig+0x346>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a57      	ldr	r2, [pc, #348]	; (8003470 <UART_SetConfig+0x2dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d120      	bne.n	800335a <UART_SetConfig+0x1c6>
 8003318:	4b52      	ldr	r3, [pc, #328]	; (8003464 <UART_SetConfig+0x2d0>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003322:	2bc0      	cmp	r3, #192	; 0xc0
 8003324:	d013      	beq.n	800334e <UART_SetConfig+0x1ba>
 8003326:	2bc0      	cmp	r3, #192	; 0xc0
 8003328:	d814      	bhi.n	8003354 <UART_SetConfig+0x1c0>
 800332a:	2b80      	cmp	r3, #128	; 0x80
 800332c:	d009      	beq.n	8003342 <UART_SetConfig+0x1ae>
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	d810      	bhi.n	8003354 <UART_SetConfig+0x1c0>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <UART_SetConfig+0x1a8>
 8003336:	2b40      	cmp	r3, #64	; 0x40
 8003338:	d006      	beq.n	8003348 <UART_SetConfig+0x1b4>
 800333a:	e00b      	b.n	8003354 <UART_SetConfig+0x1c0>
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e0cb      	b.n	80034da <UART_SetConfig+0x346>
 8003342:	2302      	movs	r3, #2
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e0c8      	b.n	80034da <UART_SetConfig+0x346>
 8003348:	2304      	movs	r3, #4
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e0c5      	b.n	80034da <UART_SetConfig+0x346>
 800334e:	2308      	movs	r3, #8
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e0c2      	b.n	80034da <UART_SetConfig+0x346>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0bf      	b.n	80034da <UART_SetConfig+0x346>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a45      	ldr	r2, [pc, #276]	; (8003474 <UART_SetConfig+0x2e0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d125      	bne.n	80033b0 <UART_SetConfig+0x21c>
 8003364:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <UART_SetConfig+0x2d0>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003372:	d017      	beq.n	80033a4 <UART_SetConfig+0x210>
 8003374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003378:	d817      	bhi.n	80033aa <UART_SetConfig+0x216>
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d00b      	beq.n	8003398 <UART_SetConfig+0x204>
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d811      	bhi.n	80033aa <UART_SetConfig+0x216>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <UART_SetConfig+0x1fe>
 800338a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338e:	d006      	beq.n	800339e <UART_SetConfig+0x20a>
 8003390:	e00b      	b.n	80033aa <UART_SetConfig+0x216>
 8003392:	2300      	movs	r3, #0
 8003394:	77fb      	strb	r3, [r7, #31]
 8003396:	e0a0      	b.n	80034da <UART_SetConfig+0x346>
 8003398:	2302      	movs	r3, #2
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e09d      	b.n	80034da <UART_SetConfig+0x346>
 800339e:	2304      	movs	r3, #4
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e09a      	b.n	80034da <UART_SetConfig+0x346>
 80033a4:	2308      	movs	r3, #8
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e097      	b.n	80034da <UART_SetConfig+0x346>
 80033aa:	2310      	movs	r3, #16
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e094      	b.n	80034da <UART_SetConfig+0x346>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a30      	ldr	r2, [pc, #192]	; (8003478 <UART_SetConfig+0x2e4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d125      	bne.n	8003406 <UART_SetConfig+0x272>
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <UART_SetConfig+0x2d0>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033c8:	d017      	beq.n	80033fa <UART_SetConfig+0x266>
 80033ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ce:	d817      	bhi.n	8003400 <UART_SetConfig+0x26c>
 80033d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d4:	d00b      	beq.n	80033ee <UART_SetConfig+0x25a>
 80033d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033da:	d811      	bhi.n	8003400 <UART_SetConfig+0x26c>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <UART_SetConfig+0x254>
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d006      	beq.n	80033f4 <UART_SetConfig+0x260>
 80033e6:	e00b      	b.n	8003400 <UART_SetConfig+0x26c>
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e075      	b.n	80034da <UART_SetConfig+0x346>
 80033ee:	2302      	movs	r3, #2
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e072      	b.n	80034da <UART_SetConfig+0x346>
 80033f4:	2304      	movs	r3, #4
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e06f      	b.n	80034da <UART_SetConfig+0x346>
 80033fa:	2308      	movs	r3, #8
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e06c      	b.n	80034da <UART_SetConfig+0x346>
 8003400:	2310      	movs	r3, #16
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e069      	b.n	80034da <UART_SetConfig+0x346>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1c      	ldr	r2, [pc, #112]	; (800347c <UART_SetConfig+0x2e8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d137      	bne.n	8003480 <UART_SetConfig+0x2ec>
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <UART_SetConfig+0x2d0>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800341a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800341e:	d017      	beq.n	8003450 <UART_SetConfig+0x2bc>
 8003420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003424:	d817      	bhi.n	8003456 <UART_SetConfig+0x2c2>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	d00b      	beq.n	8003444 <UART_SetConfig+0x2b0>
 800342c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003430:	d811      	bhi.n	8003456 <UART_SetConfig+0x2c2>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <UART_SetConfig+0x2aa>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343a:	d006      	beq.n	800344a <UART_SetConfig+0x2b6>
 800343c:	e00b      	b.n	8003456 <UART_SetConfig+0x2c2>
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e04a      	b.n	80034da <UART_SetConfig+0x346>
 8003444:	2302      	movs	r3, #2
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e047      	b.n	80034da <UART_SetConfig+0x346>
 800344a:	2304      	movs	r3, #4
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e044      	b.n	80034da <UART_SetConfig+0x346>
 8003450:	2308      	movs	r3, #8
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e041      	b.n	80034da <UART_SetConfig+0x346>
 8003456:	2310      	movs	r3, #16
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e03e      	b.n	80034da <UART_SetConfig+0x346>
 800345c:	efff69f3 	.word	0xefff69f3
 8003460:	40011000 	.word	0x40011000
 8003464:	40023800 	.word	0x40023800
 8003468:	40004400 	.word	0x40004400
 800346c:	40004800 	.word	0x40004800
 8003470:	40004c00 	.word	0x40004c00
 8003474:	40005000 	.word	0x40005000
 8003478:	40011400 	.word	0x40011400
 800347c:	40007800 	.word	0x40007800
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a71      	ldr	r2, [pc, #452]	; (800364c <UART_SetConfig+0x4b8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d125      	bne.n	80034d6 <UART_SetConfig+0x342>
 800348a:	4b71      	ldr	r3, [pc, #452]	; (8003650 <UART_SetConfig+0x4bc>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003494:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003498:	d017      	beq.n	80034ca <UART_SetConfig+0x336>
 800349a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800349e:	d817      	bhi.n	80034d0 <UART_SetConfig+0x33c>
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a4:	d00b      	beq.n	80034be <UART_SetConfig+0x32a>
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034aa:	d811      	bhi.n	80034d0 <UART_SetConfig+0x33c>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <UART_SetConfig+0x324>
 80034b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b4:	d006      	beq.n	80034c4 <UART_SetConfig+0x330>
 80034b6:	e00b      	b.n	80034d0 <UART_SetConfig+0x33c>
 80034b8:	2300      	movs	r3, #0
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e00d      	b.n	80034da <UART_SetConfig+0x346>
 80034be:	2302      	movs	r3, #2
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e00a      	b.n	80034da <UART_SetConfig+0x346>
 80034c4:	2304      	movs	r3, #4
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e007      	b.n	80034da <UART_SetConfig+0x346>
 80034ca:	2308      	movs	r3, #8
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e004      	b.n	80034da <UART_SetConfig+0x346>
 80034d0:	2310      	movs	r3, #16
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e001      	b.n	80034da <UART_SetConfig+0x346>
 80034d6:	2310      	movs	r3, #16
 80034d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e2:	d15a      	bne.n	800359a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80034e4:	7ffb      	ldrb	r3, [r7, #31]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d827      	bhi.n	800353a <UART_SetConfig+0x3a6>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0x35c>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	08003525 	.word	0x08003525
 80034fc:	0800353b 	.word	0x0800353b
 8003500:	0800352b 	.word	0x0800352b
 8003504:	0800353b 	.word	0x0800353b
 8003508:	0800353b 	.word	0x0800353b
 800350c:	0800353b 	.word	0x0800353b
 8003510:	08003533 	.word	0x08003533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003514:	f7fe fc92 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 8003518:	61b8      	str	r0, [r7, #24]
        break;
 800351a:	e013      	b.n	8003544 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800351c:	f7fe fca2 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 8003520:	61b8      	str	r0, [r7, #24]
        break;
 8003522:	e00f      	b.n	8003544 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <UART_SetConfig+0x4c0>)
 8003526:	61bb      	str	r3, [r7, #24]
        break;
 8003528:	e00c      	b.n	8003544 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352a:	f7fe fb99 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 800352e:	61b8      	str	r0, [r7, #24]
        break;
 8003530:	e008      	b.n	8003544 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003536:	61bb      	str	r3, [r7, #24]
        break;
 8003538:	e004      	b.n	8003544 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	77bb      	strb	r3, [r7, #30]
        break;
 8003542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d074      	beq.n	8003634 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	005a      	lsls	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d916      	bls.n	8003594 <UART_SetConfig+0x400>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d212      	bcs.n	8003594 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	b29a      	uxth	r2, r3
 8003584:	89fb      	ldrh	r3, [r7, #14]
 8003586:	4313      	orrs	r3, r2
 8003588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	89fa      	ldrh	r2, [r7, #14]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e04f      	b.n	8003634 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77bb      	strb	r3, [r7, #30]
 8003598:	e04c      	b.n	8003634 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800359a:	7ffb      	ldrb	r3, [r7, #31]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d828      	bhi.n	80035f2 <UART_SetConfig+0x45e>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <UART_SetConfig+0x414>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035cd 	.word	0x080035cd
 80035ac:	080035d5 	.word	0x080035d5
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035f3 	.word	0x080035f3
 80035b8:	080035e3 	.word	0x080035e3
 80035bc:	080035f3 	.word	0x080035f3
 80035c0:	080035f3 	.word	0x080035f3
 80035c4:	080035f3 	.word	0x080035f3
 80035c8:	080035eb 	.word	0x080035eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035cc:	f7fe fc36 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80035d0:	61b8      	str	r0, [r7, #24]
        break;
 80035d2:	e013      	b.n	80035fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe fc46 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80035d8:	61b8      	str	r0, [r7, #24]
        break;
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <UART_SetConfig+0x4c0>)
 80035de:	61bb      	str	r3, [r7, #24]
        break;
 80035e0:	e00c      	b.n	80035fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e2:	f7fe fb3d 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80035e6:	61b8      	str	r0, [r7, #24]
        break;
 80035e8:	e008      	b.n	80035fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ee:	61bb      	str	r3, [r7, #24]
        break;
 80035f0:	e004      	b.n	80035fc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	77bb      	strb	r3, [r7, #30]
        break;
 80035fa:	bf00      	nop
    }

    if (pclk != 0U)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085a      	lsrs	r2, r3, #1
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d909      	bls.n	8003630 <UART_SetConfig+0x49c>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d205      	bcs.n	8003630 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e001      	b.n	8003634 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003640:	7fbb      	ldrb	r3, [r7, #30]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40007c00 	.word	0x40007c00
 8003650:	40023800 	.word	0x40023800
 8003654:	00f42400 	.word	0x00f42400

08003658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01a      	beq.n	800376e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003756:	d10a      	bne.n	800376e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  }
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037ac:	f7fd fad4 	bl	8000d58 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d10e      	bne.n	80037de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f82d 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e023      	b.n	8003826 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d10e      	bne.n	800380a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f817 	bl	800382e <UART_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e00d      	b.n	8003826 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b09c      	sub	sp, #112	; 0x70
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383e:	e0a5      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	f000 80a1 	beq.w	800398c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fd fa85 	bl	8000d58 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <UART_WaitOnFlagUntilTimeout+0x32>
 800385a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385c:	2b00      	cmp	r3, #0
 800385e:	d13e      	bne.n	80038de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003870:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003874:	667b      	str	r3, [r7, #100]	; 0x64
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800387e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003880:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003884:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800388c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e6      	bne.n	8003860 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3308      	adds	r3, #8
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	663b      	str	r3, [r7, #96]	; 0x60
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e067      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d04f      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fa:	d147      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003904:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800391a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e6      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	613b      	str	r3, [r7, #16]
   return(result);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003958:	623a      	str	r2, [r7, #32]
 800395a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	69f9      	ldr	r1, [r7, #28]
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	61bb      	str	r3, [r7, #24]
   return(result);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e010      	b.n	80039ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f43f af4a 	beq.w	8003840 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3770      	adds	r7, #112	; 0x70
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b095      	sub	sp, #84	; 0x54
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	643b      	str	r3, [r7, #64]	; 0x40
 80039de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e6      	bne.n	80039be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d118      	bne.n	8003a5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f023 0310 	bic.w	r3, r3, #16
 8003a40:	647b      	str	r3, [r7, #68]	; 0x44
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6979      	ldr	r1, [r7, #20]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	613b      	str	r3, [r7, #16]
   return(result);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e6      	bne.n	8003a2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a70:	bf00      	nop
 8003a72:	3754      	adds	r7, #84	; 0x54
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff fb5a 	bl	8003154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6979      	ldr	r1, [r7, #20]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	613b      	str	r3, [r7, #16]
   return(result);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e6      	bne.n	8003ab0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fb26 	bl	8003140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af4:	bf00      	nop
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4d0d      	ldr	r5, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1b64      	subs	r4, r4, r5
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2600      	movs	r6, #0
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4d0b      	ldr	r5, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f002 fe76 	bl	8006800 <_init>
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2600      	movs	r6, #0
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08006c64 	.word	0x08006c64
 8003b38:	08006c64 	.word	0x08006c64
 8003b3c:	08006c64 	.word	0x08006c64
 8003b40:	08006c68 	.word	0x08006c68

08003b44 <memset>:
 8003b44:	4402      	add	r2, r0
 8003b46:	4603      	mov	r3, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <memset+0xa>
 8003b4c:	4770      	bx	lr
 8003b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b52:	e7f9      	b.n	8003b48 <memset+0x4>

08003b54 <__cvt>:
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	ed2d 8b02 	vpush	{d8}
 8003b5a:	eeb0 8b40 	vmov.f64	d8, d0
 8003b5e:	b085      	sub	sp, #20
 8003b60:	4617      	mov	r7, r2
 8003b62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003b64:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003b66:	ee18 2a90 	vmov	r2, s17
 8003b6a:	f025 0520 	bic.w	r5, r5, #32
 8003b6e:	2a00      	cmp	r2, #0
 8003b70:	bfb6      	itet	lt
 8003b72:	222d      	movlt	r2, #45	; 0x2d
 8003b74:	2200      	movge	r2, #0
 8003b76:	eeb1 8b40 	vneglt.f64	d8, d0
 8003b7a:	2d46      	cmp	r5, #70	; 0x46
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	d004      	beq.n	8003b8c <__cvt+0x38>
 8003b82:	2d45      	cmp	r5, #69	; 0x45
 8003b84:	d100      	bne.n	8003b88 <__cvt+0x34>
 8003b86:	3401      	adds	r4, #1
 8003b88:	2102      	movs	r1, #2
 8003b8a:	e000      	b.n	8003b8e <__cvt+0x3a>
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	ab03      	add	r3, sp, #12
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	ab02      	add	r3, sp, #8
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	4622      	mov	r2, r4
 8003b98:	4633      	mov	r3, r6
 8003b9a:	eeb0 0b48 	vmov.f64	d0, d8
 8003b9e:	f000 fccb 	bl	8004538 <_dtoa_r>
 8003ba2:	2d47      	cmp	r5, #71	; 0x47
 8003ba4:	d109      	bne.n	8003bba <__cvt+0x66>
 8003ba6:	07fb      	lsls	r3, r7, #31
 8003ba8:	d407      	bmi.n	8003bba <__cvt+0x66>
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bae:	1a1b      	subs	r3, r3, r0
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	b005      	add	sp, #20
 8003bb4:	ecbd 8b02 	vpop	{d8}
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bba:	2d46      	cmp	r5, #70	; 0x46
 8003bbc:	eb00 0204 	add.w	r2, r0, r4
 8003bc0:	d10c      	bne.n	8003bdc <__cvt+0x88>
 8003bc2:	7803      	ldrb	r3, [r0, #0]
 8003bc4:	2b30      	cmp	r3, #48	; 0x30
 8003bc6:	d107      	bne.n	8003bd8 <__cvt+0x84>
 8003bc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd0:	bf1c      	itt	ne
 8003bd2:	f1c4 0401 	rsbne	r4, r4, #1
 8003bd6:	6034      	strne	r4, [r6, #0]
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	441a      	add	r2, r3
 8003bdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	bf08      	it	eq
 8003be6:	9203      	streq	r2, [sp, #12]
 8003be8:	2130      	movs	r1, #48	; 0x30
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d2dc      	bcs.n	8003baa <__cvt+0x56>
 8003bf0:	1c5c      	adds	r4, r3, #1
 8003bf2:	9403      	str	r4, [sp, #12]
 8003bf4:	7019      	strb	r1, [r3, #0]
 8003bf6:	e7f8      	b.n	8003bea <__cvt+0x96>

08003bf8 <__exponent>:
 8003bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	bfb8      	it	lt
 8003c00:	4249      	neglt	r1, r1
 8003c02:	f803 2b02 	strb.w	r2, [r3], #2
 8003c06:	bfb4      	ite	lt
 8003c08:	222d      	movlt	r2, #45	; 0x2d
 8003c0a:	222b      	movge	r2, #43	; 0x2b
 8003c0c:	2909      	cmp	r1, #9
 8003c0e:	7042      	strb	r2, [r0, #1]
 8003c10:	dd2a      	ble.n	8003c68 <__exponent+0x70>
 8003c12:	f10d 0407 	add.w	r4, sp, #7
 8003c16:	46a4      	mov	ip, r4
 8003c18:	270a      	movs	r7, #10
 8003c1a:	46a6      	mov	lr, r4
 8003c1c:	460a      	mov	r2, r1
 8003c1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c22:	fb07 1516 	mls	r5, r7, r6, r1
 8003c26:	3530      	adds	r5, #48	; 0x30
 8003c28:	2a63      	cmp	r2, #99	; 0x63
 8003c2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c32:	4631      	mov	r1, r6
 8003c34:	dcf1      	bgt.n	8003c1a <__exponent+0x22>
 8003c36:	3130      	adds	r1, #48	; 0x30
 8003c38:	f1ae 0502 	sub.w	r5, lr, #2
 8003c3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c40:	1c44      	adds	r4, r0, #1
 8003c42:	4629      	mov	r1, r5
 8003c44:	4561      	cmp	r1, ip
 8003c46:	d30a      	bcc.n	8003c5e <__exponent+0x66>
 8003c48:	f10d 0209 	add.w	r2, sp, #9
 8003c4c:	eba2 020e 	sub.w	r2, r2, lr
 8003c50:	4565      	cmp	r5, ip
 8003c52:	bf88      	it	hi
 8003c54:	2200      	movhi	r2, #0
 8003c56:	4413      	add	r3, r2
 8003c58:	1a18      	subs	r0, r3, r0
 8003c5a:	b003      	add	sp, #12
 8003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c66:	e7ed      	b.n	8003c44 <__exponent+0x4c>
 8003c68:	2330      	movs	r3, #48	; 0x30
 8003c6a:	3130      	adds	r1, #48	; 0x30
 8003c6c:	7083      	strb	r3, [r0, #2]
 8003c6e:	70c1      	strb	r1, [r0, #3]
 8003c70:	1d03      	adds	r3, r0, #4
 8003c72:	e7f1      	b.n	8003c58 <__exponent+0x60>
 8003c74:	0000      	movs	r0, r0
	...

08003c78 <_printf_float>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	b08b      	sub	sp, #44	; 0x2c
 8003c7e:	460c      	mov	r4, r1
 8003c80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003c84:	4616      	mov	r6, r2
 8003c86:	461f      	mov	r7, r3
 8003c88:	4605      	mov	r5, r0
 8003c8a:	f001 f9d7 	bl	800503c <_localeconv_r>
 8003c8e:	f8d0 b000 	ldr.w	fp, [r0]
 8003c92:	4658      	mov	r0, fp
 8003c94:	f7fc fad4 	bl	8000240 <strlen>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	9308      	str	r3, [sp, #32]
 8003c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ca4:	6822      	ldr	r2, [r4, #0]
 8003ca6:	3307      	adds	r3, #7
 8003ca8:	f023 0307 	bic.w	r3, r3, #7
 8003cac:	f103 0108 	add.w	r1, r3, #8
 8003cb0:	f8c8 1000 	str.w	r1, [r8]
 8003cb4:	4682      	mov	sl, r0
 8003cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003cbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003f20 <_printf_float+0x2a8>
 8003cc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003cc6:	eeb0 6bc0 	vabs.f64	d6, d0
 8003cca:	eeb4 6b47 	vcmp.f64	d6, d7
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	dd24      	ble.n	8003d1e <_printf_float+0xa6>
 8003cd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cdc:	d502      	bpl.n	8003ce4 <_printf_float+0x6c>
 8003cde:	232d      	movs	r3, #45	; 0x2d
 8003ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce4:	4b90      	ldr	r3, [pc, #576]	; (8003f28 <_printf_float+0x2b0>)
 8003ce6:	4891      	ldr	r0, [pc, #580]	; (8003f2c <_printf_float+0x2b4>)
 8003ce8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003cec:	bf94      	ite	ls
 8003cee:	4698      	movls	r8, r3
 8003cf0:	4680      	movhi	r8, r0
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	6123      	str	r3, [r4, #16]
 8003cf6:	f022 0204 	bic.w	r2, r2, #4
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6022      	str	r2, [r4, #0]
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	9700      	str	r7, [sp, #0]
 8003d02:	4633      	mov	r3, r6
 8003d04:	aa09      	add	r2, sp, #36	; 0x24
 8003d06:	4621      	mov	r1, r4
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 f9d3 	bl	80040b4 <_printf_common>
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f040 808a 	bne.w	8003e28 <_printf_float+0x1b0>
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	b00b      	add	sp, #44	; 0x2c
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	eeb4 0b40 	vcmp.f64	d0, d0
 8003d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d26:	d709      	bvc.n	8003d3c <_printf_float+0xc4>
 8003d28:	ee10 3a90 	vmov	r3, s1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfbc      	itt	lt
 8003d30:	232d      	movlt	r3, #45	; 0x2d
 8003d32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d36:	487e      	ldr	r0, [pc, #504]	; (8003f30 <_printf_float+0x2b8>)
 8003d38:	4b7e      	ldr	r3, [pc, #504]	; (8003f34 <_printf_float+0x2bc>)
 8003d3a:	e7d5      	b.n	8003ce8 <_printf_float+0x70>
 8003d3c:	6863      	ldr	r3, [r4, #4]
 8003d3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d42:	9104      	str	r1, [sp, #16]
 8003d44:	1c59      	adds	r1, r3, #1
 8003d46:	d13c      	bne.n	8003dc2 <_printf_float+0x14a>
 8003d48:	2306      	movs	r3, #6
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9303      	str	r3, [sp, #12]
 8003d50:	ab08      	add	r3, sp, #32
 8003d52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5a:	ab07      	add	r3, sp, #28
 8003d5c:	6861      	ldr	r1, [r4, #4]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	6022      	str	r2, [r4, #0]
 8003d62:	f10d 031b 	add.w	r3, sp, #27
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7ff fef4 	bl	8003b54 <__cvt>
 8003d6c:	9b04      	ldr	r3, [sp, #16]
 8003d6e:	9907      	ldr	r1, [sp, #28]
 8003d70:	2b47      	cmp	r3, #71	; 0x47
 8003d72:	4680      	mov	r8, r0
 8003d74:	d108      	bne.n	8003d88 <_printf_float+0x110>
 8003d76:	1cc8      	adds	r0, r1, #3
 8003d78:	db02      	blt.n	8003d80 <_printf_float+0x108>
 8003d7a:	6863      	ldr	r3, [r4, #4]
 8003d7c:	4299      	cmp	r1, r3
 8003d7e:	dd41      	ble.n	8003e04 <_printf_float+0x18c>
 8003d80:	f1a9 0902 	sub.w	r9, r9, #2
 8003d84:	fa5f f989 	uxtb.w	r9, r9
 8003d88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d8c:	d820      	bhi.n	8003dd0 <_printf_float+0x158>
 8003d8e:	3901      	subs	r1, #1
 8003d90:	464a      	mov	r2, r9
 8003d92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	f7ff ff2e 	bl	8003bf8 <__exponent>
 8003d9c:	9a08      	ldr	r2, [sp, #32]
 8003d9e:	9004      	str	r0, [sp, #16]
 8003da0:	1813      	adds	r3, r2, r0
 8003da2:	2a01      	cmp	r2, #1
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	dc02      	bgt.n	8003dae <_printf_float+0x136>
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	07d2      	lsls	r2, r2, #31
 8003dac:	d501      	bpl.n	8003db2 <_printf_float+0x13a>
 8003dae:	3301      	adds	r3, #1
 8003db0:	6123      	str	r3, [r4, #16]
 8003db2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0a2      	beq.n	8003d00 <_printf_float+0x88>
 8003dba:	232d      	movs	r3, #45	; 0x2d
 8003dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc0:	e79e      	b.n	8003d00 <_printf_float+0x88>
 8003dc2:	9904      	ldr	r1, [sp, #16]
 8003dc4:	2947      	cmp	r1, #71	; 0x47
 8003dc6:	d1c1      	bne.n	8003d4c <_printf_float+0xd4>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1bf      	bne.n	8003d4c <_printf_float+0xd4>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e7bc      	b.n	8003d4a <_printf_float+0xd2>
 8003dd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003dd4:	d118      	bne.n	8003e08 <_printf_float+0x190>
 8003dd6:	2900      	cmp	r1, #0
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	dd0b      	ble.n	8003df4 <_printf_float+0x17c>
 8003ddc:	6121      	str	r1, [r4, #16]
 8003dde:	b913      	cbnz	r3, 8003de6 <_printf_float+0x16e>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	07d0      	lsls	r0, r2, #31
 8003de4:	d502      	bpl.n	8003dec <_printf_float+0x174>
 8003de6:	3301      	adds	r3, #1
 8003de8:	440b      	add	r3, r1
 8003dea:	6123      	str	r3, [r4, #16]
 8003dec:	2300      	movs	r3, #0
 8003dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8003df0:	9304      	str	r3, [sp, #16]
 8003df2:	e7de      	b.n	8003db2 <_printf_float+0x13a>
 8003df4:	b913      	cbnz	r3, 8003dfc <_printf_float+0x184>
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	07d2      	lsls	r2, r2, #31
 8003dfa:	d501      	bpl.n	8003e00 <_printf_float+0x188>
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	e7f4      	b.n	8003dea <_printf_float+0x172>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e7f2      	b.n	8003dea <_printf_float+0x172>
 8003e04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003e08:	9b08      	ldr	r3, [sp, #32]
 8003e0a:	4299      	cmp	r1, r3
 8003e0c:	db05      	blt.n	8003e1a <_printf_float+0x1a2>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	6121      	str	r1, [r4, #16]
 8003e12:	07d8      	lsls	r0, r3, #31
 8003e14:	d5ea      	bpl.n	8003dec <_printf_float+0x174>
 8003e16:	1c4b      	adds	r3, r1, #1
 8003e18:	e7e7      	b.n	8003dea <_printf_float+0x172>
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	bfd4      	ite	le
 8003e1e:	f1c1 0202 	rsble	r2, r1, #2
 8003e22:	2201      	movgt	r2, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	e7e0      	b.n	8003dea <_printf_float+0x172>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	055a      	lsls	r2, r3, #21
 8003e2c:	d407      	bmi.n	8003e3e <_printf_float+0x1c6>
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	4642      	mov	r2, r8
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d12a      	bne.n	8003e92 <_printf_float+0x21a>
 8003e3c:	e76a      	b.n	8003d14 <_printf_float+0x9c>
 8003e3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e42:	f240 80e2 	bls.w	800400a <_printf_float+0x392>
 8003e46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e52:	d133      	bne.n	8003ebc <_printf_float+0x244>
 8003e54:	4a38      	ldr	r2, [pc, #224]	; (8003f38 <_printf_float+0x2c0>)
 8003e56:	2301      	movs	r3, #1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f af58 	beq.w	8003d14 <_printf_float+0x9c>
 8003e64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	db02      	blt.n	8003e72 <_printf_float+0x1fa>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	07d8      	lsls	r0, r3, #31
 8003e70:	d50f      	bpl.n	8003e92 <_printf_float+0x21a>
 8003e72:	4653      	mov	r3, sl
 8003e74:	465a      	mov	r2, fp
 8003e76:	4631      	mov	r1, r6
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b8      	blx	r7
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	f43f af49 	beq.w	8003d14 <_printf_float+0x9c>
 8003e82:	f04f 0800 	mov.w	r8, #0
 8003e86:	f104 091a 	add.w	r9, r4, #26
 8003e8a:	9b08      	ldr	r3, [sp, #32]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	4543      	cmp	r3, r8
 8003e90:	dc09      	bgt.n	8003ea6 <_printf_float+0x22e>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	079b      	lsls	r3, r3, #30
 8003e96:	f100 8108 	bmi.w	80040aa <_printf_float+0x432>
 8003e9a:	68e0      	ldr	r0, [r4, #12]
 8003e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	bfb8      	it	lt
 8003ea2:	4618      	movlt	r0, r3
 8003ea4:	e738      	b.n	8003d18 <_printf_float+0xa0>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	464a      	mov	r2, r9
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f af2f 	beq.w	8003d14 <_printf_float+0x9c>
 8003eb6:	f108 0801 	add.w	r8, r8, #1
 8003eba:	e7e6      	b.n	8003e8a <_printf_float+0x212>
 8003ebc:	9b07      	ldr	r3, [sp, #28]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dc3c      	bgt.n	8003f3c <_printf_float+0x2c4>
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <_printf_float+0x2c0>)
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b8      	blx	r7
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f43f af21 	beq.w	8003d14 <_printf_float+0x9c>
 8003ed2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d102      	bne.n	8003ee0 <_printf_float+0x268>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	07d9      	lsls	r1, r3, #31
 8003ede:	d5d8      	bpl.n	8003e92 <_printf_float+0x21a>
 8003ee0:	4653      	mov	r3, sl
 8003ee2:	465a      	mov	r2, fp
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f af12 	beq.w	8003d14 <_printf_float+0x9c>
 8003ef0:	f04f 0900 	mov.w	r9, #0
 8003ef4:	f104 0a1a 	add.w	sl, r4, #26
 8003ef8:	9b07      	ldr	r3, [sp, #28]
 8003efa:	425b      	negs	r3, r3
 8003efc:	454b      	cmp	r3, r9
 8003efe:	dc01      	bgt.n	8003f04 <_printf_float+0x28c>
 8003f00:	9b08      	ldr	r3, [sp, #32]
 8003f02:	e795      	b.n	8003e30 <_printf_float+0x1b8>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4652      	mov	r2, sl
 8003f08:	4631      	mov	r1, r6
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	47b8      	blx	r7
 8003f0e:	3001      	adds	r0, #1
 8003f10:	f43f af00 	beq.w	8003d14 <_printf_float+0x9c>
 8003f14:	f109 0901 	add.w	r9, r9, #1
 8003f18:	e7ee      	b.n	8003ef8 <_printf_float+0x280>
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w
 8003f20:	ffffffff 	.word	0xffffffff
 8003f24:	7fefffff 	.word	0x7fefffff
 8003f28:	0800687c 	.word	0x0800687c
 8003f2c:	08006880 	.word	0x08006880
 8003f30:	08006888 	.word	0x08006888
 8003f34:	08006884 	.word	0x08006884
 8003f38:	0800688c 	.word	0x0800688c
 8003f3c:	9a08      	ldr	r2, [sp, #32]
 8003f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f40:	429a      	cmp	r2, r3
 8003f42:	bfa8      	it	ge
 8003f44:	461a      	movge	r2, r3
 8003f46:	2a00      	cmp	r2, #0
 8003f48:	4691      	mov	r9, r2
 8003f4a:	dc38      	bgt.n	8003fbe <_printf_float+0x346>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9305      	str	r3, [sp, #20]
 8003f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f54:	f104 021a 	add.w	r2, r4, #26
 8003f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f5a:	9905      	ldr	r1, [sp, #20]
 8003f5c:	9304      	str	r3, [sp, #16]
 8003f5e:	eba3 0309 	sub.w	r3, r3, r9
 8003f62:	428b      	cmp	r3, r1
 8003f64:	dc33      	bgt.n	8003fce <_printf_float+0x356>
 8003f66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	db3c      	blt.n	8003fe8 <_printf_float+0x370>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	07da      	lsls	r2, r3, #31
 8003f72:	d439      	bmi.n	8003fe8 <_printf_float+0x370>
 8003f74:	9a08      	ldr	r2, [sp, #32]
 8003f76:	9b04      	ldr	r3, [sp, #16]
 8003f78:	9907      	ldr	r1, [sp, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	eba2 0901 	sub.w	r9, r2, r1
 8003f80:	4599      	cmp	r9, r3
 8003f82:	bfa8      	it	ge
 8003f84:	4699      	movge	r9, r3
 8003f86:	f1b9 0f00 	cmp.w	r9, #0
 8003f8a:	dc35      	bgt.n	8003ff8 <_printf_float+0x380>
 8003f8c:	f04f 0800 	mov.w	r8, #0
 8003f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f94:	f104 0a1a 	add.w	sl, r4, #26
 8003f98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	eba3 0309 	sub.w	r3, r3, r9
 8003fa2:	4543      	cmp	r3, r8
 8003fa4:	f77f af75 	ble.w	8003e92 <_printf_float+0x21a>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4652      	mov	r2, sl
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f aeae 	beq.w	8003d14 <_printf_float+0x9c>
 8003fb8:	f108 0801 	add.w	r8, r8, #1
 8003fbc:	e7ec      	b.n	8003f98 <_printf_float+0x320>
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4642      	mov	r2, r8
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d1bf      	bne.n	8003f4c <_printf_float+0x2d4>
 8003fcc:	e6a2      	b.n	8003d14 <_printf_float+0x9c>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	9204      	str	r2, [sp, #16]
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	f43f ae9b 	beq.w	8003d14 <_printf_float+0x9c>
 8003fde:	9b05      	ldr	r3, [sp, #20]
 8003fe0:	9a04      	ldr	r2, [sp, #16]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	9305      	str	r3, [sp, #20]
 8003fe6:	e7b7      	b.n	8003f58 <_printf_float+0x2e0>
 8003fe8:	4653      	mov	r3, sl
 8003fea:	465a      	mov	r2, fp
 8003fec:	4631      	mov	r1, r6
 8003fee:	4628      	mov	r0, r5
 8003ff0:	47b8      	blx	r7
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d1be      	bne.n	8003f74 <_printf_float+0x2fc>
 8003ff6:	e68d      	b.n	8003d14 <_printf_float+0x9c>
 8003ff8:	9a04      	ldr	r2, [sp, #16]
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	4442      	add	r2, r8
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	d1c1      	bne.n	8003f8c <_printf_float+0x314>
 8004008:	e684      	b.n	8003d14 <_printf_float+0x9c>
 800400a:	9a08      	ldr	r2, [sp, #32]
 800400c:	2a01      	cmp	r2, #1
 800400e:	dc01      	bgt.n	8004014 <_printf_float+0x39c>
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d537      	bpl.n	8004084 <_printf_float+0x40c>
 8004014:	2301      	movs	r3, #1
 8004016:	4642      	mov	r2, r8
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f ae78 	beq.w	8003d14 <_printf_float+0x9c>
 8004024:	4653      	mov	r3, sl
 8004026:	465a      	mov	r2, fp
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f ae70 	beq.w	8003d14 <_printf_float+0x9c>
 8004034:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004038:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004040:	d01b      	beq.n	800407a <_printf_float+0x402>
 8004042:	9b08      	ldr	r3, [sp, #32]
 8004044:	f108 0201 	add.w	r2, r8, #1
 8004048:	3b01      	subs	r3, #1
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	d10e      	bne.n	8004072 <_printf_float+0x3fa>
 8004054:	e65e      	b.n	8003d14 <_printf_float+0x9c>
 8004056:	2301      	movs	r3, #1
 8004058:	464a      	mov	r2, r9
 800405a:	4631      	mov	r1, r6
 800405c:	4628      	mov	r0, r5
 800405e:	47b8      	blx	r7
 8004060:	3001      	adds	r0, #1
 8004062:	f43f ae57 	beq.w	8003d14 <_printf_float+0x9c>
 8004066:	f108 0801 	add.w	r8, r8, #1
 800406a:	9b08      	ldr	r3, [sp, #32]
 800406c:	3b01      	subs	r3, #1
 800406e:	4543      	cmp	r3, r8
 8004070:	dcf1      	bgt.n	8004056 <_printf_float+0x3de>
 8004072:	9b04      	ldr	r3, [sp, #16]
 8004074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004078:	e6db      	b.n	8003e32 <_printf_float+0x1ba>
 800407a:	f04f 0800 	mov.w	r8, #0
 800407e:	f104 091a 	add.w	r9, r4, #26
 8004082:	e7f2      	b.n	800406a <_printf_float+0x3f2>
 8004084:	2301      	movs	r3, #1
 8004086:	4642      	mov	r2, r8
 8004088:	e7df      	b.n	800404a <_printf_float+0x3d2>
 800408a:	2301      	movs	r3, #1
 800408c:	464a      	mov	r2, r9
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f ae3d 	beq.w	8003d14 <_printf_float+0x9c>
 800409a:	f108 0801 	add.w	r8, r8, #1
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040a2:	1a5b      	subs	r3, r3, r1
 80040a4:	4543      	cmp	r3, r8
 80040a6:	dcf0      	bgt.n	800408a <_printf_float+0x412>
 80040a8:	e6f7      	b.n	8003e9a <_printf_float+0x222>
 80040aa:	f04f 0800 	mov.w	r8, #0
 80040ae:	f104 0919 	add.w	r9, r4, #25
 80040b2:	e7f4      	b.n	800409e <_printf_float+0x426>

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4616      	mov	r6, r2
 80040ba:	4699      	mov	r9, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfb8      	it	lt
 80040c8:	4613      	movlt	r3, r2
 80040ca:	6033      	str	r3, [r6, #0]
 80040cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d0:	4607      	mov	r7, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	b10a      	cbz	r2, 80040da <_printf_common+0x26>
 80040d6:	3301      	adds	r3, #1
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	0699      	lsls	r1, r3, #26
 80040de:	bf42      	ittt	mi
 80040e0:	6833      	ldrmi	r3, [r6, #0]
 80040e2:	3302      	addmi	r3, #2
 80040e4:	6033      	strmi	r3, [r6, #0]
 80040e6:	6825      	ldr	r5, [r4, #0]
 80040e8:	f015 0506 	ands.w	r5, r5, #6
 80040ec:	d106      	bne.n	80040fc <_printf_common+0x48>
 80040ee:	f104 0a19 	add.w	sl, r4, #25
 80040f2:	68e3      	ldr	r3, [r4, #12]
 80040f4:	6832      	ldr	r2, [r6, #0]
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	dc26      	bgt.n	800414a <_printf_common+0x96>
 80040fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004100:	1e13      	subs	r3, r2, #0
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	bf18      	it	ne
 8004106:	2301      	movne	r3, #1
 8004108:	0692      	lsls	r2, r2, #26
 800410a:	d42b      	bmi.n	8004164 <_printf_common+0xb0>
 800410c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004110:	4649      	mov	r1, r9
 8004112:	4638      	mov	r0, r7
 8004114:	47c0      	blx	r8
 8004116:	3001      	adds	r0, #1
 8004118:	d01e      	beq.n	8004158 <_printf_common+0xa4>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	68e5      	ldr	r5, [r4, #12]
 800411e:	6832      	ldr	r2, [r6, #0]
 8004120:	f003 0306 	and.w	r3, r3, #6
 8004124:	2b04      	cmp	r3, #4
 8004126:	bf08      	it	eq
 8004128:	1aad      	subeq	r5, r5, r2
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	6922      	ldr	r2, [r4, #16]
 800412e:	bf0c      	ite	eq
 8004130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004134:	2500      	movne	r5, #0
 8004136:	4293      	cmp	r3, r2
 8004138:	bfc4      	itt	gt
 800413a:	1a9b      	subgt	r3, r3, r2
 800413c:	18ed      	addgt	r5, r5, r3
 800413e:	2600      	movs	r6, #0
 8004140:	341a      	adds	r4, #26
 8004142:	42b5      	cmp	r5, r6
 8004144:	d11a      	bne.n	800417c <_printf_common+0xc8>
 8004146:	2000      	movs	r0, #0
 8004148:	e008      	b.n	800415c <_printf_common+0xa8>
 800414a:	2301      	movs	r3, #1
 800414c:	4652      	mov	r2, sl
 800414e:	4649      	mov	r1, r9
 8004150:	4638      	mov	r0, r7
 8004152:	47c0      	blx	r8
 8004154:	3001      	adds	r0, #1
 8004156:	d103      	bne.n	8004160 <_printf_common+0xac>
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004160:	3501      	adds	r5, #1
 8004162:	e7c6      	b.n	80040f2 <_printf_common+0x3e>
 8004164:	18e1      	adds	r1, r4, r3
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	2030      	movs	r0, #48	; 0x30
 800416a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800416e:	4422      	add	r2, r4
 8004170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004178:	3302      	adds	r3, #2
 800417a:	e7c7      	b.n	800410c <_printf_common+0x58>
 800417c:	2301      	movs	r3, #1
 800417e:	4622      	mov	r2, r4
 8004180:	4649      	mov	r1, r9
 8004182:	4638      	mov	r0, r7
 8004184:	47c0      	blx	r8
 8004186:	3001      	adds	r0, #1
 8004188:	d0e6      	beq.n	8004158 <_printf_common+0xa4>
 800418a:	3601      	adds	r6, #1
 800418c:	e7d9      	b.n	8004142 <_printf_common+0x8e>
	...

08004190 <_printf_i>:
 8004190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	460c      	mov	r4, r1
 8004196:	4691      	mov	r9, r2
 8004198:	7e27      	ldrb	r7, [r4, #24]
 800419a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800419c:	2f78      	cmp	r7, #120	; 0x78
 800419e:	4680      	mov	r8, r0
 80041a0:	469a      	mov	sl, r3
 80041a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041a6:	d807      	bhi.n	80041b8 <_printf_i+0x28>
 80041a8:	2f62      	cmp	r7, #98	; 0x62
 80041aa:	d80a      	bhi.n	80041c2 <_printf_i+0x32>
 80041ac:	2f00      	cmp	r7, #0
 80041ae:	f000 80d8 	beq.w	8004362 <_printf_i+0x1d2>
 80041b2:	2f58      	cmp	r7, #88	; 0x58
 80041b4:	f000 80a3 	beq.w	80042fe <_printf_i+0x16e>
 80041b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c0:	e03a      	b.n	8004238 <_printf_i+0xa8>
 80041c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041c6:	2b15      	cmp	r3, #21
 80041c8:	d8f6      	bhi.n	80041b8 <_printf_i+0x28>
 80041ca:	a001      	add	r0, pc, #4	; (adr r0, 80041d0 <_printf_i+0x40>)
 80041cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041d0:	08004229 	.word	0x08004229
 80041d4:	0800423d 	.word	0x0800423d
 80041d8:	080041b9 	.word	0x080041b9
 80041dc:	080041b9 	.word	0x080041b9
 80041e0:	080041b9 	.word	0x080041b9
 80041e4:	080041b9 	.word	0x080041b9
 80041e8:	0800423d 	.word	0x0800423d
 80041ec:	080041b9 	.word	0x080041b9
 80041f0:	080041b9 	.word	0x080041b9
 80041f4:	080041b9 	.word	0x080041b9
 80041f8:	080041b9 	.word	0x080041b9
 80041fc:	08004349 	.word	0x08004349
 8004200:	0800426d 	.word	0x0800426d
 8004204:	0800432b 	.word	0x0800432b
 8004208:	080041b9 	.word	0x080041b9
 800420c:	080041b9 	.word	0x080041b9
 8004210:	0800436b 	.word	0x0800436b
 8004214:	080041b9 	.word	0x080041b9
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080041b9 	.word	0x080041b9
 8004220:	080041b9 	.word	0x080041b9
 8004224:	08004333 	.word	0x08004333
 8004228:	680b      	ldr	r3, [r1, #0]
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	600a      	str	r2, [r1, #0]
 8004230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004238:	2301      	movs	r3, #1
 800423a:	e0a3      	b.n	8004384 <_printf_i+0x1f4>
 800423c:	6825      	ldr	r5, [r4, #0]
 800423e:	6808      	ldr	r0, [r1, #0]
 8004240:	062e      	lsls	r6, r5, #24
 8004242:	f100 0304 	add.w	r3, r0, #4
 8004246:	d50a      	bpl.n	800425e <_printf_i+0xce>
 8004248:	6805      	ldr	r5, [r0, #0]
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	2d00      	cmp	r5, #0
 800424e:	da03      	bge.n	8004258 <_printf_i+0xc8>
 8004250:	232d      	movs	r3, #45	; 0x2d
 8004252:	426d      	negs	r5, r5
 8004254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004258:	485e      	ldr	r0, [pc, #376]	; (80043d4 <_printf_i+0x244>)
 800425a:	230a      	movs	r3, #10
 800425c:	e019      	b.n	8004292 <_printf_i+0x102>
 800425e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004262:	6805      	ldr	r5, [r0, #0]
 8004264:	600b      	str	r3, [r1, #0]
 8004266:	bf18      	it	ne
 8004268:	b22d      	sxthne	r5, r5
 800426a:	e7ef      	b.n	800424c <_printf_i+0xbc>
 800426c:	680b      	ldr	r3, [r1, #0]
 800426e:	6825      	ldr	r5, [r4, #0]
 8004270:	1d18      	adds	r0, r3, #4
 8004272:	6008      	str	r0, [r1, #0]
 8004274:	0628      	lsls	r0, r5, #24
 8004276:	d501      	bpl.n	800427c <_printf_i+0xec>
 8004278:	681d      	ldr	r5, [r3, #0]
 800427a:	e002      	b.n	8004282 <_printf_i+0xf2>
 800427c:	0669      	lsls	r1, r5, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0xe8>
 8004280:	881d      	ldrh	r5, [r3, #0]
 8004282:	4854      	ldr	r0, [pc, #336]	; (80043d4 <_printf_i+0x244>)
 8004284:	2f6f      	cmp	r7, #111	; 0x6f
 8004286:	bf0c      	ite	eq
 8004288:	2308      	moveq	r3, #8
 800428a:	230a      	movne	r3, #10
 800428c:	2100      	movs	r1, #0
 800428e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004292:	6866      	ldr	r6, [r4, #4]
 8004294:	60a6      	str	r6, [r4, #8]
 8004296:	2e00      	cmp	r6, #0
 8004298:	bfa2      	ittt	ge
 800429a:	6821      	ldrge	r1, [r4, #0]
 800429c:	f021 0104 	bicge.w	r1, r1, #4
 80042a0:	6021      	strge	r1, [r4, #0]
 80042a2:	b90d      	cbnz	r5, 80042a8 <_printf_i+0x118>
 80042a4:	2e00      	cmp	r6, #0
 80042a6:	d04d      	beq.n	8004344 <_printf_i+0x1b4>
 80042a8:	4616      	mov	r6, r2
 80042aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80042ae:	fb03 5711 	mls	r7, r3, r1, r5
 80042b2:	5dc7      	ldrb	r7, [r0, r7]
 80042b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042b8:	462f      	mov	r7, r5
 80042ba:	42bb      	cmp	r3, r7
 80042bc:	460d      	mov	r5, r1
 80042be:	d9f4      	bls.n	80042aa <_printf_i+0x11a>
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d10b      	bne.n	80042dc <_printf_i+0x14c>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	07df      	lsls	r7, r3, #31
 80042c8:	d508      	bpl.n	80042dc <_printf_i+0x14c>
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	6861      	ldr	r1, [r4, #4]
 80042ce:	4299      	cmp	r1, r3
 80042d0:	bfde      	ittt	le
 80042d2:	2330      	movle	r3, #48	; 0x30
 80042d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042dc:	1b92      	subs	r2, r2, r6
 80042de:	6122      	str	r2, [r4, #16]
 80042e0:	f8cd a000 	str.w	sl, [sp]
 80042e4:	464b      	mov	r3, r9
 80042e6:	aa03      	add	r2, sp, #12
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f7ff fee2 	bl	80040b4 <_printf_common>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d14c      	bne.n	800438e <_printf_i+0x1fe>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	b004      	add	sp, #16
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	4835      	ldr	r0, [pc, #212]	; (80043d4 <_printf_i+0x244>)
 8004300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	680e      	ldr	r6, [r1, #0]
 8004308:	061f      	lsls	r7, r3, #24
 800430a:	f856 5b04 	ldr.w	r5, [r6], #4
 800430e:	600e      	str	r6, [r1, #0]
 8004310:	d514      	bpl.n	800433c <_printf_i+0x1ac>
 8004312:	07d9      	lsls	r1, r3, #31
 8004314:	bf44      	itt	mi
 8004316:	f043 0320 	orrmi.w	r3, r3, #32
 800431a:	6023      	strmi	r3, [r4, #0]
 800431c:	b91d      	cbnz	r5, 8004326 <_printf_i+0x196>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f023 0320 	bic.w	r3, r3, #32
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	2310      	movs	r3, #16
 8004328:	e7b0      	b.n	800428c <_printf_i+0xfc>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f043 0320 	orr.w	r3, r3, #32
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	2378      	movs	r3, #120	; 0x78
 8004334:	4828      	ldr	r0, [pc, #160]	; (80043d8 <_printf_i+0x248>)
 8004336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433a:	e7e3      	b.n	8004304 <_printf_i+0x174>
 800433c:	065e      	lsls	r6, r3, #25
 800433e:	bf48      	it	mi
 8004340:	b2ad      	uxthmi	r5, r5
 8004342:	e7e6      	b.n	8004312 <_printf_i+0x182>
 8004344:	4616      	mov	r6, r2
 8004346:	e7bb      	b.n	80042c0 <_printf_i+0x130>
 8004348:	680b      	ldr	r3, [r1, #0]
 800434a:	6826      	ldr	r6, [r4, #0]
 800434c:	6960      	ldr	r0, [r4, #20]
 800434e:	1d1d      	adds	r5, r3, #4
 8004350:	600d      	str	r5, [r1, #0]
 8004352:	0635      	lsls	r5, r6, #24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	d501      	bpl.n	800435c <_printf_i+0x1cc>
 8004358:	6018      	str	r0, [r3, #0]
 800435a:	e002      	b.n	8004362 <_printf_i+0x1d2>
 800435c:	0671      	lsls	r1, r6, #25
 800435e:	d5fb      	bpl.n	8004358 <_printf_i+0x1c8>
 8004360:	8018      	strh	r0, [r3, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	4616      	mov	r6, r2
 8004368:	e7ba      	b.n	80042e0 <_printf_i+0x150>
 800436a:	680b      	ldr	r3, [r1, #0]
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	600a      	str	r2, [r1, #0]
 8004370:	681e      	ldr	r6, [r3, #0]
 8004372:	6862      	ldr	r2, [r4, #4]
 8004374:	2100      	movs	r1, #0
 8004376:	4630      	mov	r0, r6
 8004378:	f7fb ff6a 	bl	8000250 <memchr>
 800437c:	b108      	cbz	r0, 8004382 <_printf_i+0x1f2>
 800437e:	1b80      	subs	r0, r0, r6
 8004380:	6060      	str	r0, [r4, #4]
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	2300      	movs	r3, #0
 8004388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800438c:	e7a8      	b.n	80042e0 <_printf_i+0x150>
 800438e:	6923      	ldr	r3, [r4, #16]
 8004390:	4632      	mov	r2, r6
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	47d0      	blx	sl
 8004398:	3001      	adds	r0, #1
 800439a:	d0ab      	beq.n	80042f4 <_printf_i+0x164>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	079b      	lsls	r3, r3, #30
 80043a0:	d413      	bmi.n	80043ca <_printf_i+0x23a>
 80043a2:	68e0      	ldr	r0, [r4, #12]
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	4298      	cmp	r0, r3
 80043a8:	bfb8      	it	lt
 80043aa:	4618      	movlt	r0, r3
 80043ac:	e7a4      	b.n	80042f8 <_printf_i+0x168>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4632      	mov	r2, r6
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	47d0      	blx	sl
 80043b8:	3001      	adds	r0, #1
 80043ba:	d09b      	beq.n	80042f4 <_printf_i+0x164>
 80043bc:	3501      	adds	r5, #1
 80043be:	68e3      	ldr	r3, [r4, #12]
 80043c0:	9903      	ldr	r1, [sp, #12]
 80043c2:	1a5b      	subs	r3, r3, r1
 80043c4:	42ab      	cmp	r3, r5
 80043c6:	dcf2      	bgt.n	80043ae <_printf_i+0x21e>
 80043c8:	e7eb      	b.n	80043a2 <_printf_i+0x212>
 80043ca:	2500      	movs	r5, #0
 80043cc:	f104 0619 	add.w	r6, r4, #25
 80043d0:	e7f5      	b.n	80043be <_printf_i+0x22e>
 80043d2:	bf00      	nop
 80043d4:	0800688e 	.word	0x0800688e
 80043d8:	0800689f 	.word	0x0800689f

080043dc <siprintf>:
 80043dc:	b40e      	push	{r1, r2, r3}
 80043de:	b500      	push	{lr}
 80043e0:	b09c      	sub	sp, #112	; 0x70
 80043e2:	ab1d      	add	r3, sp, #116	; 0x74
 80043e4:	9002      	str	r0, [sp, #8]
 80043e6:	9006      	str	r0, [sp, #24]
 80043e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043ec:	4809      	ldr	r0, [pc, #36]	; (8004414 <siprintf+0x38>)
 80043ee:	9107      	str	r1, [sp, #28]
 80043f0:	9104      	str	r1, [sp, #16]
 80043f2:	4909      	ldr	r1, [pc, #36]	; (8004418 <siprintf+0x3c>)
 80043f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f8:	9105      	str	r1, [sp, #20]
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	a902      	add	r1, sp, #8
 8004400:	f001 faca 	bl	8005998 <_svfiprintf_r>
 8004404:	9b02      	ldr	r3, [sp, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	b01c      	add	sp, #112	; 0x70
 800440c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004410:	b003      	add	sp, #12
 8004412:	4770      	bx	lr
 8004414:	2000000c 	.word	0x2000000c
 8004418:	ffff0208 	.word	0xffff0208

0800441c <quorem>:
 800441c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	6903      	ldr	r3, [r0, #16]
 8004422:	690c      	ldr	r4, [r1, #16]
 8004424:	42a3      	cmp	r3, r4
 8004426:	4607      	mov	r7, r0
 8004428:	f2c0 8081 	blt.w	800452e <quorem+0x112>
 800442c:	3c01      	subs	r4, #1
 800442e:	f101 0814 	add.w	r8, r1, #20
 8004432:	f100 0514 	add.w	r5, r0, #20
 8004436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004444:	3301      	adds	r3, #1
 8004446:	429a      	cmp	r2, r3
 8004448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800444c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004450:	fbb2 f6f3 	udiv	r6, r2, r3
 8004454:	d331      	bcc.n	80044ba <quorem+0x9e>
 8004456:	f04f 0e00 	mov.w	lr, #0
 800445a:	4640      	mov	r0, r8
 800445c:	46ac      	mov	ip, r5
 800445e:	46f2      	mov	sl, lr
 8004460:	f850 2b04 	ldr.w	r2, [r0], #4
 8004464:	b293      	uxth	r3, r2
 8004466:	fb06 e303 	mla	r3, r6, r3, lr
 800446a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800446e:	b29b      	uxth	r3, r3
 8004470:	ebaa 0303 	sub.w	r3, sl, r3
 8004474:	0c12      	lsrs	r2, r2, #16
 8004476:	f8dc a000 	ldr.w	sl, [ip]
 800447a:	fb06 e202 	mla	r2, r6, r2, lr
 800447e:	fa13 f38a 	uxtah	r3, r3, sl
 8004482:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004486:	fa1f fa82 	uxth.w	sl, r2
 800448a:	f8dc 2000 	ldr.w	r2, [ip]
 800448e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004492:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004496:	b29b      	uxth	r3, r3
 8004498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800449c:	4581      	cmp	r9, r0
 800449e:	f84c 3b04 	str.w	r3, [ip], #4
 80044a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80044a6:	d2db      	bcs.n	8004460 <quorem+0x44>
 80044a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80044ac:	b92b      	cbnz	r3, 80044ba <quorem+0x9e>
 80044ae:	9b01      	ldr	r3, [sp, #4]
 80044b0:	3b04      	subs	r3, #4
 80044b2:	429d      	cmp	r5, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	d32e      	bcc.n	8004516 <quorem+0xfa>
 80044b8:	613c      	str	r4, [r7, #16]
 80044ba:	4638      	mov	r0, r7
 80044bc:	f001 f856 	bl	800556c <__mcmp>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	db24      	blt.n	800450e <quorem+0xf2>
 80044c4:	3601      	adds	r6, #1
 80044c6:	4628      	mov	r0, r5
 80044c8:	f04f 0c00 	mov.w	ip, #0
 80044cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80044d0:	f8d0 e000 	ldr.w	lr, [r0]
 80044d4:	b293      	uxth	r3, r2
 80044d6:	ebac 0303 	sub.w	r3, ip, r3
 80044da:	0c12      	lsrs	r2, r2, #16
 80044dc:	fa13 f38e 	uxtah	r3, r3, lr
 80044e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044ee:	45c1      	cmp	r9, r8
 80044f0:	f840 3b04 	str.w	r3, [r0], #4
 80044f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044f8:	d2e8      	bcs.n	80044cc <quorem+0xb0>
 80044fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004502:	b922      	cbnz	r2, 800450e <quorem+0xf2>
 8004504:	3b04      	subs	r3, #4
 8004506:	429d      	cmp	r5, r3
 8004508:	461a      	mov	r2, r3
 800450a:	d30a      	bcc.n	8004522 <quorem+0x106>
 800450c:	613c      	str	r4, [r7, #16]
 800450e:	4630      	mov	r0, r6
 8004510:	b003      	add	sp, #12
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	3b04      	subs	r3, #4
 800451a:	2a00      	cmp	r2, #0
 800451c:	d1cc      	bne.n	80044b8 <quorem+0x9c>
 800451e:	3c01      	subs	r4, #1
 8004520:	e7c7      	b.n	80044b2 <quorem+0x96>
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	3b04      	subs	r3, #4
 8004526:	2a00      	cmp	r2, #0
 8004528:	d1f0      	bne.n	800450c <quorem+0xf0>
 800452a:	3c01      	subs	r4, #1
 800452c:	e7eb      	b.n	8004506 <quorem+0xea>
 800452e:	2000      	movs	r0, #0
 8004530:	e7ee      	b.n	8004510 <quorem+0xf4>
 8004532:	0000      	movs	r0, r0
 8004534:	0000      	movs	r0, r0
	...

08004538 <_dtoa_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	ec59 8b10 	vmov	r8, r9, d0
 8004540:	b095      	sub	sp, #84	; 0x54
 8004542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004544:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8004546:	9107      	str	r1, [sp, #28]
 8004548:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800454c:	4606      	mov	r6, r0
 800454e:	9209      	str	r2, [sp, #36]	; 0x24
 8004550:	9310      	str	r3, [sp, #64]	; 0x40
 8004552:	b975      	cbnz	r5, 8004572 <_dtoa_r+0x3a>
 8004554:	2010      	movs	r0, #16
 8004556:	f000 fd75 	bl	8005044 <malloc>
 800455a:	4602      	mov	r2, r0
 800455c:	6270      	str	r0, [r6, #36]	; 0x24
 800455e:	b920      	cbnz	r0, 800456a <_dtoa_r+0x32>
 8004560:	4bab      	ldr	r3, [pc, #684]	; (8004810 <_dtoa_r+0x2d8>)
 8004562:	21ea      	movs	r1, #234	; 0xea
 8004564:	48ab      	ldr	r0, [pc, #684]	; (8004814 <_dtoa_r+0x2dc>)
 8004566:	f001 fb27 	bl	8005bb8 <__assert_func>
 800456a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800456e:	6005      	str	r5, [r0, #0]
 8004570:	60c5      	str	r5, [r0, #12]
 8004572:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	b151      	cbz	r1, 800458e <_dtoa_r+0x56>
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	604a      	str	r2, [r1, #4]
 800457c:	2301      	movs	r3, #1
 800457e:	4093      	lsls	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
 8004582:	4630      	mov	r0, r6
 8004584:	f000 fdb4 	bl	80050f0 <_Bfree>
 8004588:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f1b9 0300 	subs.w	r3, r9, #0
 8004592:	bfbb      	ittet	lt
 8004594:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004598:	9303      	strlt	r3, [sp, #12]
 800459a:	2300      	movge	r3, #0
 800459c:	2201      	movlt	r2, #1
 800459e:	bfac      	ite	ge
 80045a0:	6023      	strge	r3, [r4, #0]
 80045a2:	6022      	strlt	r2, [r4, #0]
 80045a4:	4b9c      	ldr	r3, [pc, #624]	; (8004818 <_dtoa_r+0x2e0>)
 80045a6:	9c03      	ldr	r4, [sp, #12]
 80045a8:	43a3      	bics	r3, r4
 80045aa:	d11a      	bne.n	80045e2 <_dtoa_r+0xaa>
 80045ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80045b8:	ea53 0308 	orrs.w	r3, r3, r8
 80045bc:	f000 8512 	beq.w	8004fe4 <_dtoa_r+0xaac>
 80045c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045c2:	b953      	cbnz	r3, 80045da <_dtoa_r+0xa2>
 80045c4:	4b95      	ldr	r3, [pc, #596]	; (800481c <_dtoa_r+0x2e4>)
 80045c6:	e01f      	b.n	8004608 <_dtoa_r+0xd0>
 80045c8:	4b95      	ldr	r3, [pc, #596]	; (8004820 <_dtoa_r+0x2e8>)
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	9800      	ldr	r0, [sp, #0]
 80045d4:	b015      	add	sp, #84	; 0x54
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	4b90      	ldr	r3, [pc, #576]	; (800481c <_dtoa_r+0x2e4>)
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	3303      	adds	r3, #3
 80045e0:	e7f5      	b.n	80045ce <_dtoa_r+0x96>
 80045e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80045ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80045f2:	d10b      	bne.n	800460c <_dtoa_r+0xd4>
 80045f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045f6:	2301      	movs	r3, #1
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 84ee 	beq.w	8004fde <_dtoa_r+0xaa6>
 8004602:	4888      	ldr	r0, [pc, #544]	; (8004824 <_dtoa_r+0x2ec>)
 8004604:	6018      	str	r0, [r3, #0]
 8004606:	1e43      	subs	r3, r0, #1
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	e7e2      	b.n	80045d2 <_dtoa_r+0x9a>
 800460c:	a913      	add	r1, sp, #76	; 0x4c
 800460e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004612:	aa12      	add	r2, sp, #72	; 0x48
 8004614:	4630      	mov	r0, r6
 8004616:	f001 f84d 	bl	80056b4 <__d2b>
 800461a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800461e:	4605      	mov	r5, r0
 8004620:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004622:	2900      	cmp	r1, #0
 8004624:	d047      	beq.n	80046b6 <_dtoa_r+0x17e>
 8004626:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004628:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800462c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004630:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8004634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004638:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800463c:	2400      	movs	r4, #0
 800463e:	ec43 2b16 	vmov	d6, r2, r3
 8004642:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004646:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80047f8 <_dtoa_r+0x2c0>
 800464a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800464e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8004800 <_dtoa_r+0x2c8>
 8004652:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004656:	eeb0 7b46 	vmov.f64	d7, d6
 800465a:	ee06 1a90 	vmov	s13, r1
 800465e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8004662:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8004808 <_dtoa_r+0x2d0>
 8004666:	eea5 7b06 	vfma.f64	d7, d5, d6
 800466a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800466e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	ee16 ba90 	vmov	fp, s13
 800467a:	9411      	str	r4, [sp, #68]	; 0x44
 800467c:	d508      	bpl.n	8004690 <_dtoa_r+0x158>
 800467e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004682:	eeb4 6b47 	vcmp.f64	d6, d7
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	bf18      	it	ne
 800468c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004690:	f1bb 0f16 	cmp.w	fp, #22
 8004694:	d832      	bhi.n	80046fc <_dtoa_r+0x1c4>
 8004696:	4b64      	ldr	r3, [pc, #400]	; (8004828 <_dtoa_r+0x2f0>)
 8004698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800469c:	ed93 7b00 	vldr	d7, [r3]
 80046a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80046a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d501      	bpl.n	80046b2 <_dtoa_r+0x17a>
 80046ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046b2:	2300      	movs	r3, #0
 80046b4:	e023      	b.n	80046fe <_dtoa_r+0x1c6>
 80046b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80046b8:	4401      	add	r1, r0
 80046ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80046be:	2b20      	cmp	r3, #32
 80046c0:	bfc3      	ittte	gt
 80046c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046c6:	fa04 f303 	lslgt.w	r3, r4, r3
 80046ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80046ce:	f1c3 0320 	rsble	r3, r3, #32
 80046d2:	bfc6      	itte	gt
 80046d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80046d8:	ea43 0308 	orrgt.w	r3, r3, r8
 80046dc:	fa08 f303 	lslle.w	r3, r8, r3
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80046e8:	3901      	subs	r1, #1
 80046ea:	ed8d 7b00 	vstr	d7, [sp]
 80046ee:	9c01      	ldr	r4, [sp, #4]
 80046f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80046f8:	2401      	movs	r4, #1
 80046fa:	e7a0      	b.n	800463e <_dtoa_r+0x106>
 80046fc:	2301      	movs	r3, #1
 80046fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004700:	1a43      	subs	r3, r0, r1
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	bf45      	ittet	mi
 8004706:	f1c3 0301 	rsbmi	r3, r3, #1
 800470a:	9305      	strmi	r3, [sp, #20]
 800470c:	2300      	movpl	r3, #0
 800470e:	2300      	movmi	r3, #0
 8004710:	9206      	str	r2, [sp, #24]
 8004712:	bf54      	ite	pl
 8004714:	9305      	strpl	r3, [sp, #20]
 8004716:	9306      	strmi	r3, [sp, #24]
 8004718:	f1bb 0f00 	cmp.w	fp, #0
 800471c:	db18      	blt.n	8004750 <_dtoa_r+0x218>
 800471e:	9b06      	ldr	r3, [sp, #24]
 8004720:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004724:	445b      	add	r3, fp
 8004726:	9306      	str	r3, [sp, #24]
 8004728:	2300      	movs	r3, #0
 800472a:	9a07      	ldr	r2, [sp, #28]
 800472c:	2a09      	cmp	r2, #9
 800472e:	d849      	bhi.n	80047c4 <_dtoa_r+0x28c>
 8004730:	2a05      	cmp	r2, #5
 8004732:	bfc4      	itt	gt
 8004734:	3a04      	subgt	r2, #4
 8004736:	9207      	strgt	r2, [sp, #28]
 8004738:	9a07      	ldr	r2, [sp, #28]
 800473a:	f1a2 0202 	sub.w	r2, r2, #2
 800473e:	bfcc      	ite	gt
 8004740:	2400      	movgt	r4, #0
 8004742:	2401      	movle	r4, #1
 8004744:	2a03      	cmp	r2, #3
 8004746:	d848      	bhi.n	80047da <_dtoa_r+0x2a2>
 8004748:	e8df f002 	tbb	[pc, r2]
 800474c:	3a2c2e0b 	.word	0x3a2c2e0b
 8004750:	9b05      	ldr	r3, [sp, #20]
 8004752:	2200      	movs	r2, #0
 8004754:	eba3 030b 	sub.w	r3, r3, fp
 8004758:	9305      	str	r3, [sp, #20]
 800475a:	920e      	str	r2, [sp, #56]	; 0x38
 800475c:	f1cb 0300 	rsb	r3, fp, #0
 8004760:	e7e3      	b.n	800472a <_dtoa_r+0x1f2>
 8004762:	2200      	movs	r2, #0
 8004764:	9208      	str	r2, [sp, #32]
 8004766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004768:	2a00      	cmp	r2, #0
 800476a:	dc39      	bgt.n	80047e0 <_dtoa_r+0x2a8>
 800476c:	f04f 0a01 	mov.w	sl, #1
 8004770:	46d1      	mov	r9, sl
 8004772:	4652      	mov	r2, sl
 8004774:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004778:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800477a:	2100      	movs	r1, #0
 800477c:	6079      	str	r1, [r7, #4]
 800477e:	2004      	movs	r0, #4
 8004780:	f100 0c14 	add.w	ip, r0, #20
 8004784:	4594      	cmp	ip, r2
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	d92f      	bls.n	80047ea <_dtoa_r+0x2b2>
 800478a:	4630      	mov	r0, r6
 800478c:	930c      	str	r3, [sp, #48]	; 0x30
 800478e:	f000 fc6f 	bl	8005070 <_Balloc>
 8004792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004794:	9000      	str	r0, [sp, #0]
 8004796:	4602      	mov	r2, r0
 8004798:	2800      	cmp	r0, #0
 800479a:	d149      	bne.n	8004830 <_dtoa_r+0x2f8>
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <_dtoa_r+0x2f4>)
 800479e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047a2:	e6df      	b.n	8004564 <_dtoa_r+0x2c>
 80047a4:	2201      	movs	r2, #1
 80047a6:	e7dd      	b.n	8004764 <_dtoa_r+0x22c>
 80047a8:	2200      	movs	r2, #0
 80047aa:	9208      	str	r2, [sp, #32]
 80047ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ae:	eb0b 0a02 	add.w	sl, fp, r2
 80047b2:	f10a 0901 	add.w	r9, sl, #1
 80047b6:	464a      	mov	r2, r9
 80047b8:	2a01      	cmp	r2, #1
 80047ba:	bfb8      	it	lt
 80047bc:	2201      	movlt	r2, #1
 80047be:	e7db      	b.n	8004778 <_dtoa_r+0x240>
 80047c0:	2201      	movs	r2, #1
 80047c2:	e7f2      	b.n	80047aa <_dtoa_r+0x272>
 80047c4:	2401      	movs	r4, #1
 80047c6:	2200      	movs	r2, #0
 80047c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80047cc:	f04f 3aff 	mov.w	sl, #4294967295
 80047d0:	2100      	movs	r1, #0
 80047d2:	46d1      	mov	r9, sl
 80047d4:	2212      	movs	r2, #18
 80047d6:	9109      	str	r1, [sp, #36]	; 0x24
 80047d8:	e7ce      	b.n	8004778 <_dtoa_r+0x240>
 80047da:	2201      	movs	r2, #1
 80047dc:	9208      	str	r2, [sp, #32]
 80047de:	e7f5      	b.n	80047cc <_dtoa_r+0x294>
 80047e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80047e4:	46d1      	mov	r9, sl
 80047e6:	4652      	mov	r2, sl
 80047e8:	e7c6      	b.n	8004778 <_dtoa_r+0x240>
 80047ea:	3101      	adds	r1, #1
 80047ec:	6079      	str	r1, [r7, #4]
 80047ee:	0040      	lsls	r0, r0, #1
 80047f0:	e7c6      	b.n	8004780 <_dtoa_r+0x248>
 80047f2:	bf00      	nop
 80047f4:	f3af 8000 	nop.w
 80047f8:	636f4361 	.word	0x636f4361
 80047fc:	3fd287a7 	.word	0x3fd287a7
 8004800:	8b60c8b3 	.word	0x8b60c8b3
 8004804:	3fc68a28 	.word	0x3fc68a28
 8004808:	509f79fb 	.word	0x509f79fb
 800480c:	3fd34413 	.word	0x3fd34413
 8004810:	080068bd 	.word	0x080068bd
 8004814:	080068d4 	.word	0x080068d4
 8004818:	7ff00000 	.word	0x7ff00000
 800481c:	080068b9 	.word	0x080068b9
 8004820:	080068b0 	.word	0x080068b0
 8004824:	0800688d 	.word	0x0800688d
 8004828:	080069d0 	.word	0x080069d0
 800482c:	08006933 	.word	0x08006933
 8004830:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004832:	9900      	ldr	r1, [sp, #0]
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	f1b9 0f0e 	cmp.w	r9, #14
 800483a:	d872      	bhi.n	8004922 <_dtoa_r+0x3ea>
 800483c:	2c00      	cmp	r4, #0
 800483e:	d070      	beq.n	8004922 <_dtoa_r+0x3ea>
 8004840:	f1bb 0f00 	cmp.w	fp, #0
 8004844:	f340 80a6 	ble.w	8004994 <_dtoa_r+0x45c>
 8004848:	49ca      	ldr	r1, [pc, #808]	; (8004b74 <_dtoa_r+0x63c>)
 800484a:	f00b 020f 	and.w	r2, fp, #15
 800484e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8004852:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004856:	ed92 7b00 	vldr	d7, [r2]
 800485a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800485e:	f000 808d 	beq.w	800497c <_dtoa_r+0x444>
 8004862:	4ac5      	ldr	r2, [pc, #788]	; (8004b78 <_dtoa_r+0x640>)
 8004864:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004868:	ed92 6b08 	vldr	d6, [r2, #32]
 800486c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004870:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004874:	f001 010f 	and.w	r1, r1, #15
 8004878:	2203      	movs	r2, #3
 800487a:	48bf      	ldr	r0, [pc, #764]	; (8004b78 <_dtoa_r+0x640>)
 800487c:	2900      	cmp	r1, #0
 800487e:	d17f      	bne.n	8004980 <_dtoa_r+0x448>
 8004880:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004884:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004888:	ed8d 7b02 	vstr	d7, [sp, #8]
 800488c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800488e:	2900      	cmp	r1, #0
 8004890:	f000 80b2 	beq.w	80049f8 <_dtoa_r+0x4c0>
 8004894:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800489c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80048a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a4:	f140 80a8 	bpl.w	80049f8 <_dtoa_r+0x4c0>
 80048a8:	f1b9 0f00 	cmp.w	r9, #0
 80048ac:	f000 80a4 	beq.w	80049f8 <_dtoa_r+0x4c0>
 80048b0:	f1ba 0f00 	cmp.w	sl, #0
 80048b4:	dd31      	ble.n	800491a <_dtoa_r+0x3e2>
 80048b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80048ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80048be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80048c6:	3201      	adds	r2, #1
 80048c8:	4650      	mov	r0, sl
 80048ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80048ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80048d2:	ee07 2a90 	vmov	s15, r2
 80048d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80048da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80048de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80048e2:	9c03      	ldr	r4, [sp, #12]
 80048e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80048e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f040 8086 	bne.w	80049fe <_dtoa_r+0x4c6>
 80048f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80048f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80048fa:	ec42 1b17 	vmov	d7, r1, r2
 80048fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004906:	f300 8272 	bgt.w	8004dee <_dtoa_r+0x8b6>
 800490a:	eeb1 7b47 	vneg.f64	d7, d7
 800490e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004916:	f100 8267 	bmi.w	8004de8 <_dtoa_r+0x8b0>
 800491a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800491e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004922:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004924:	2a00      	cmp	r2, #0
 8004926:	f2c0 8129 	blt.w	8004b7c <_dtoa_r+0x644>
 800492a:	f1bb 0f0e 	cmp.w	fp, #14
 800492e:	f300 8125 	bgt.w	8004b7c <_dtoa_r+0x644>
 8004932:	4b90      	ldr	r3, [pc, #576]	; (8004b74 <_dtoa_r+0x63c>)
 8004934:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004938:	ed93 6b00 	vldr	d6, [r3]
 800493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	f280 80c3 	bge.w	8004aca <_dtoa_r+0x592>
 8004944:	f1b9 0f00 	cmp.w	r9, #0
 8004948:	f300 80bf 	bgt.w	8004aca <_dtoa_r+0x592>
 800494c:	f040 824c 	bne.w	8004de8 <_dtoa_r+0x8b0>
 8004950:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004954:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800495c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	464c      	mov	r4, r9
 8004966:	464f      	mov	r7, r9
 8004968:	f280 8222 	bge.w	8004db0 <_dtoa_r+0x878>
 800496c:	f8dd 8000 	ldr.w	r8, [sp]
 8004970:	2331      	movs	r3, #49	; 0x31
 8004972:	f808 3b01 	strb.w	r3, [r8], #1
 8004976:	f10b 0b01 	add.w	fp, fp, #1
 800497a:	e21e      	b.n	8004dba <_dtoa_r+0x882>
 800497c:	2202      	movs	r2, #2
 800497e:	e77c      	b.n	800487a <_dtoa_r+0x342>
 8004980:	07cc      	lsls	r4, r1, #31
 8004982:	d504      	bpl.n	800498e <_dtoa_r+0x456>
 8004984:	ed90 6b00 	vldr	d6, [r0]
 8004988:	3201      	adds	r2, #1
 800498a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800498e:	1049      	asrs	r1, r1, #1
 8004990:	3008      	adds	r0, #8
 8004992:	e773      	b.n	800487c <_dtoa_r+0x344>
 8004994:	d02e      	beq.n	80049f4 <_dtoa_r+0x4bc>
 8004996:	f1cb 0100 	rsb	r1, fp, #0
 800499a:	4a76      	ldr	r2, [pc, #472]	; (8004b74 <_dtoa_r+0x63c>)
 800499c:	f001 000f 	and.w	r0, r1, #15
 80049a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80049a4:	ed92 7b00 	vldr	d7, [r2]
 80049a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80049ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80049b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80049b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80049bc:	486e      	ldr	r0, [pc, #440]	; (8004b78 <_dtoa_r+0x640>)
 80049be:	1109      	asrs	r1, r1, #4
 80049c0:	2400      	movs	r4, #0
 80049c2:	2202      	movs	r2, #2
 80049c4:	b939      	cbnz	r1, 80049d6 <_dtoa_r+0x49e>
 80049c6:	2c00      	cmp	r4, #0
 80049c8:	f43f af60 	beq.w	800488c <_dtoa_r+0x354>
 80049cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049d4:	e75a      	b.n	800488c <_dtoa_r+0x354>
 80049d6:	07cf      	lsls	r7, r1, #31
 80049d8:	d509      	bpl.n	80049ee <_dtoa_r+0x4b6>
 80049da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80049de:	ed90 7b00 	vldr	d7, [r0]
 80049e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80049ea:	3201      	adds	r2, #1
 80049ec:	2401      	movs	r4, #1
 80049ee:	1049      	asrs	r1, r1, #1
 80049f0:	3008      	adds	r0, #8
 80049f2:	e7e7      	b.n	80049c4 <_dtoa_r+0x48c>
 80049f4:	2202      	movs	r2, #2
 80049f6:	e749      	b.n	800488c <_dtoa_r+0x354>
 80049f8:	465f      	mov	r7, fp
 80049fa:	4648      	mov	r0, r9
 80049fc:	e765      	b.n	80048ca <_dtoa_r+0x392>
 80049fe:	ec42 1b17 	vmov	d7, r1, r2
 8004a02:	4a5c      	ldr	r2, [pc, #368]	; (8004b74 <_dtoa_r+0x63c>)
 8004a04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004a08:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004a0c:	9a00      	ldr	r2, [sp, #0]
 8004a0e:	1814      	adds	r4, r2, r0
 8004a10:	9a08      	ldr	r2, [sp, #32]
 8004a12:	b352      	cbz	r2, 8004a6a <_dtoa_r+0x532>
 8004a14:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004a18:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004a1c:	f8dd 8000 	ldr.w	r8, [sp]
 8004a20:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004a24:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004a28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004a2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004a30:	ee14 2a90 	vmov	r2, s9
 8004a34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004a38:	3230      	adds	r2, #48	; 0x30
 8004a3a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004a3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	f808 2b01 	strb.w	r2, [r8], #1
 8004a4a:	d439      	bmi.n	8004ac0 <_dtoa_r+0x588>
 8004a4c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004a50:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	d472      	bmi.n	8004b40 <_dtoa_r+0x608>
 8004a5a:	45a0      	cmp	r8, r4
 8004a5c:	f43f af5d 	beq.w	800491a <_dtoa_r+0x3e2>
 8004a60:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004a64:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004a68:	e7e0      	b.n	8004a2c <_dtoa_r+0x4f4>
 8004a6a:	f8dd 8000 	ldr.w	r8, [sp]
 8004a6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004a72:	4621      	mov	r1, r4
 8004a74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004a78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004a7c:	ee14 2a90 	vmov	r2, s9
 8004a80:	3230      	adds	r2, #48	; 0x30
 8004a82:	f808 2b01 	strb.w	r2, [r8], #1
 8004a86:	45a0      	cmp	r8, r4
 8004a88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004a8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004a90:	d118      	bne.n	8004ac4 <_dtoa_r+0x58c>
 8004a92:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004a96:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004a9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa2:	dc4d      	bgt.n	8004b40 <_dtoa_r+0x608>
 8004aa4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004aa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	f57f af33 	bpl.w	800491a <_dtoa_r+0x3e2>
 8004ab4:	4688      	mov	r8, r1
 8004ab6:	3901      	subs	r1, #1
 8004ab8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004abc:	2b30      	cmp	r3, #48	; 0x30
 8004abe:	d0f9      	beq.n	8004ab4 <_dtoa_r+0x57c>
 8004ac0:	46bb      	mov	fp, r7
 8004ac2:	e02a      	b.n	8004b1a <_dtoa_r+0x5e2>
 8004ac4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004ac8:	e7d6      	b.n	8004a78 <_dtoa_r+0x540>
 8004aca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ace:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004ad2:	f8dd 8000 	ldr.w	r8, [sp]
 8004ad6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004ada:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004ade:	ee15 3a10 	vmov	r3, s10
 8004ae2:	3330      	adds	r3, #48	; 0x30
 8004ae4:	f808 3b01 	strb.w	r3, [r8], #1
 8004ae8:	9b00      	ldr	r3, [sp, #0]
 8004aea:	eba8 0303 	sub.w	r3, r8, r3
 8004aee:	4599      	cmp	r9, r3
 8004af0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004af4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004af8:	d133      	bne.n	8004b62 <_dtoa_r+0x62a>
 8004afa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004afe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b06:	dc1a      	bgt.n	8004b3e <_dtoa_r+0x606>
 8004b08:	eeb4 7b46 	vcmp.f64	d7, d6
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	d103      	bne.n	8004b1a <_dtoa_r+0x5e2>
 8004b12:	ee15 3a10 	vmov	r3, s10
 8004b16:	07d9      	lsls	r1, r3, #31
 8004b18:	d411      	bmi.n	8004b3e <_dtoa_r+0x606>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f000 fae7 	bl	80050f0 <_Bfree>
 8004b22:	2300      	movs	r3, #0
 8004b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b26:	f888 3000 	strb.w	r3, [r8]
 8004b2a:	f10b 0301 	add.w	r3, fp, #1
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f43f ad4d 	beq.w	80045d2 <_dtoa_r+0x9a>
 8004b38:	f8c3 8000 	str.w	r8, [r3]
 8004b3c:	e549      	b.n	80045d2 <_dtoa_r+0x9a>
 8004b3e:	465f      	mov	r7, fp
 8004b40:	4643      	mov	r3, r8
 8004b42:	4698      	mov	r8, r3
 8004b44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b48:	2a39      	cmp	r2, #57	; 0x39
 8004b4a:	d106      	bne.n	8004b5a <_dtoa_r+0x622>
 8004b4c:	9a00      	ldr	r2, [sp, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d1f7      	bne.n	8004b42 <_dtoa_r+0x60a>
 8004b52:	9900      	ldr	r1, [sp, #0]
 8004b54:	2230      	movs	r2, #48	; 0x30
 8004b56:	3701      	adds	r7, #1
 8004b58:	700a      	strb	r2, [r1, #0]
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e7ae      	b.n	8004ac0 <_dtoa_r+0x588>
 8004b62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004b66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	d1b2      	bne.n	8004ad6 <_dtoa_r+0x59e>
 8004b70:	e7d3      	b.n	8004b1a <_dtoa_r+0x5e2>
 8004b72:	bf00      	nop
 8004b74:	080069d0 	.word	0x080069d0
 8004b78:	080069a8 	.word	0x080069a8
 8004b7c:	9908      	ldr	r1, [sp, #32]
 8004b7e:	2900      	cmp	r1, #0
 8004b80:	f000 80d1 	beq.w	8004d26 <_dtoa_r+0x7ee>
 8004b84:	9907      	ldr	r1, [sp, #28]
 8004b86:	2901      	cmp	r1, #1
 8004b88:	f300 80b4 	bgt.w	8004cf4 <_dtoa_r+0x7bc>
 8004b8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	f000 80ac 	beq.w	8004cec <_dtoa_r+0x7b4>
 8004b94:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004b98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004b9c:	461c      	mov	r4, r3
 8004b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004ba0:	9b05      	ldr	r3, [sp, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	9305      	str	r3, [sp, #20]
 8004ba6:	9b06      	ldr	r3, [sp, #24]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	4630      	mov	r0, r6
 8004bae:	9306      	str	r3, [sp, #24]
 8004bb0:	f000 fb5a 	bl	8005268 <__i2b>
 8004bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	f1b8 0f00 	cmp.w	r8, #0
 8004bbc:	dd0d      	ble.n	8004bda <_dtoa_r+0x6a2>
 8004bbe:	9a06      	ldr	r2, [sp, #24]
 8004bc0:	2a00      	cmp	r2, #0
 8004bc2:	dd0a      	ble.n	8004bda <_dtoa_r+0x6a2>
 8004bc4:	4542      	cmp	r2, r8
 8004bc6:	9905      	ldr	r1, [sp, #20]
 8004bc8:	bfa8      	it	ge
 8004bca:	4642      	movge	r2, r8
 8004bcc:	1a89      	subs	r1, r1, r2
 8004bce:	9105      	str	r1, [sp, #20]
 8004bd0:	9906      	ldr	r1, [sp, #24]
 8004bd2:	eba8 0802 	sub.w	r8, r8, r2
 8004bd6:	1a8a      	subs	r2, r1, r2
 8004bd8:	9206      	str	r2, [sp, #24]
 8004bda:	b303      	cbz	r3, 8004c1e <_dtoa_r+0x6e6>
 8004bdc:	9a08      	ldr	r2, [sp, #32]
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	f000 80a6 	beq.w	8004d30 <_dtoa_r+0x7f8>
 8004be4:	2c00      	cmp	r4, #0
 8004be6:	dd13      	ble.n	8004c10 <_dtoa_r+0x6d8>
 8004be8:	4639      	mov	r1, r7
 8004bea:	4622      	mov	r2, r4
 8004bec:	4630      	mov	r0, r6
 8004bee:	930c      	str	r3, [sp, #48]	; 0x30
 8004bf0:	f000 fbf6 	bl	80053e0 <__pow5mult>
 8004bf4:	462a      	mov	r2, r5
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 fb4a 	bl	8005294 <__multiply>
 8004c00:	4629      	mov	r1, r5
 8004c02:	900a      	str	r0, [sp, #40]	; 0x28
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 fa73 	bl	80050f0 <_Bfree>
 8004c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c0e:	4615      	mov	r5, r2
 8004c10:	1b1a      	subs	r2, r3, r4
 8004c12:	d004      	beq.n	8004c1e <_dtoa_r+0x6e6>
 8004c14:	4629      	mov	r1, r5
 8004c16:	4630      	mov	r0, r6
 8004c18:	f000 fbe2 	bl	80053e0 <__pow5mult>
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 fb21 	bl	8005268 <__i2b>
 8004c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	f340 8082 	ble.w	8004d34 <_dtoa_r+0x7fc>
 8004c30:	461a      	mov	r2, r3
 8004c32:	4601      	mov	r1, r0
 8004c34:	4630      	mov	r0, r6
 8004c36:	f000 fbd3 	bl	80053e0 <__pow5mult>
 8004c3a:	9b07      	ldr	r3, [sp, #28]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	4604      	mov	r4, r0
 8004c40:	dd7b      	ble.n	8004d3a <_dtoa_r+0x802>
 8004c42:	2300      	movs	r3, #0
 8004c44:	930a      	str	r3, [sp, #40]	; 0x28
 8004c46:	6922      	ldr	r2, [r4, #16]
 8004c48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004c4c:	6910      	ldr	r0, [r2, #16]
 8004c4e:	f000 fabb 	bl	80051c8 <__hi0bits>
 8004c52:	f1c0 0020 	rsb	r0, r0, #32
 8004c56:	9b06      	ldr	r3, [sp, #24]
 8004c58:	4418      	add	r0, r3
 8004c5a:	f010 001f 	ands.w	r0, r0, #31
 8004c5e:	f000 808d 	beq.w	8004d7c <_dtoa_r+0x844>
 8004c62:	f1c0 0220 	rsb	r2, r0, #32
 8004c66:	2a04      	cmp	r2, #4
 8004c68:	f340 8086 	ble.w	8004d78 <_dtoa_r+0x840>
 8004c6c:	f1c0 001c 	rsb	r0, r0, #28
 8004c70:	9b05      	ldr	r3, [sp, #20]
 8004c72:	4403      	add	r3, r0
 8004c74:	9305      	str	r3, [sp, #20]
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	4403      	add	r3, r0
 8004c7a:	4480      	add	r8, r0
 8004c7c:	9306      	str	r3, [sp, #24]
 8004c7e:	9b05      	ldr	r3, [sp, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dd05      	ble.n	8004c90 <_dtoa_r+0x758>
 8004c84:	4629      	mov	r1, r5
 8004c86:	461a      	mov	r2, r3
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f000 fc03 	bl	8005494 <__lshift>
 8004c8e:	4605      	mov	r5, r0
 8004c90:	9b06      	ldr	r3, [sp, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dd05      	ble.n	8004ca2 <_dtoa_r+0x76a>
 8004c96:	4621      	mov	r1, r4
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 fbfa 	bl	8005494 <__lshift>
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d06b      	beq.n	8004d80 <_dtoa_r+0x848>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 fc5e 	bl	800556c <__mcmp>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	da65      	bge.n	8004d80 <_dtoa_r+0x848>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	220a      	movs	r2, #10
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 fa3a 	bl	8005134 <__multadd>
 8004cc0:	9b08      	ldr	r3, [sp, #32]
 8004cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8192 	beq.w	8004ff2 <_dtoa_r+0xaba>
 8004cce:	4639      	mov	r1, r7
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	220a      	movs	r2, #10
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 fa2d 	bl	8005134 <__multadd>
 8004cda:	f1ba 0f00 	cmp.w	sl, #0
 8004cde:	4607      	mov	r7, r0
 8004ce0:	f300 808e 	bgt.w	8004e00 <_dtoa_r+0x8c8>
 8004ce4:	9b07      	ldr	r3, [sp, #28]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	dc51      	bgt.n	8004d8e <_dtoa_r+0x856>
 8004cea:	e089      	b.n	8004e00 <_dtoa_r+0x8c8>
 8004cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004cf2:	e751      	b.n	8004b98 <_dtoa_r+0x660>
 8004cf4:	f109 34ff 	add.w	r4, r9, #4294967295
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	bfbf      	itttt	lt
 8004cfc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004cfe:	1ae3      	sublt	r3, r4, r3
 8004d00:	18d2      	addlt	r2, r2, r3
 8004d02:	4613      	movlt	r3, r2
 8004d04:	bfb7      	itett	lt
 8004d06:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d08:	1b1c      	subge	r4, r3, r4
 8004d0a:	4623      	movlt	r3, r4
 8004d0c:	2400      	movlt	r4, #0
 8004d0e:	f1b9 0f00 	cmp.w	r9, #0
 8004d12:	bfb5      	itete	lt
 8004d14:	9a05      	ldrlt	r2, [sp, #20]
 8004d16:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8004d1a:	eba2 0809 	sublt.w	r8, r2, r9
 8004d1e:	464a      	movge	r2, r9
 8004d20:	bfb8      	it	lt
 8004d22:	2200      	movlt	r2, #0
 8004d24:	e73b      	b.n	8004b9e <_dtoa_r+0x666>
 8004d26:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004d2a:	9f08      	ldr	r7, [sp, #32]
 8004d2c:	461c      	mov	r4, r3
 8004d2e:	e743      	b.n	8004bb8 <_dtoa_r+0x680>
 8004d30:	461a      	mov	r2, r3
 8004d32:	e76f      	b.n	8004c14 <_dtoa_r+0x6dc>
 8004d34:	9b07      	ldr	r3, [sp, #28]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	dc18      	bgt.n	8004d6c <_dtoa_r+0x834>
 8004d3a:	9b02      	ldr	r3, [sp, #8]
 8004d3c:	b9b3      	cbnz	r3, 8004d6c <_dtoa_r+0x834>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004d44:	b9a2      	cbnz	r2, 8004d70 <_dtoa_r+0x838>
 8004d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d4a:	0d12      	lsrs	r2, r2, #20
 8004d4c:	0512      	lsls	r2, r2, #20
 8004d4e:	b18a      	cbz	r2, 8004d74 <_dtoa_r+0x83c>
 8004d50:	9b05      	ldr	r3, [sp, #20]
 8004d52:	3301      	adds	r3, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	9b06      	ldr	r3, [sp, #24]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	9306      	str	r3, [sp, #24]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f47f af6f 	bne.w	8004c46 <_dtoa_r+0x70e>
 8004d68:	2001      	movs	r0, #1
 8004d6a:	e774      	b.n	8004c56 <_dtoa_r+0x71e>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e7f6      	b.n	8004d5e <_dtoa_r+0x826>
 8004d70:	9b02      	ldr	r3, [sp, #8]
 8004d72:	e7f4      	b.n	8004d5e <_dtoa_r+0x826>
 8004d74:	920a      	str	r2, [sp, #40]	; 0x28
 8004d76:	e7f3      	b.n	8004d60 <_dtoa_r+0x828>
 8004d78:	d081      	beq.n	8004c7e <_dtoa_r+0x746>
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	301c      	adds	r0, #28
 8004d7e:	e777      	b.n	8004c70 <_dtoa_r+0x738>
 8004d80:	f1b9 0f00 	cmp.w	r9, #0
 8004d84:	dc37      	bgt.n	8004df6 <_dtoa_r+0x8be>
 8004d86:	9b07      	ldr	r3, [sp, #28]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	dd34      	ble.n	8004df6 <_dtoa_r+0x8be>
 8004d8c:	46ca      	mov	sl, r9
 8004d8e:	f1ba 0f00 	cmp.w	sl, #0
 8004d92:	d10d      	bne.n	8004db0 <_dtoa_r+0x878>
 8004d94:	4621      	mov	r1, r4
 8004d96:	4653      	mov	r3, sl
 8004d98:	2205      	movs	r2, #5
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f000 f9ca 	bl	8005134 <__multadd>
 8004da0:	4601      	mov	r1, r0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fbe1 	bl	800556c <__mcmp>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f73f adde 	bgt.w	800496c <_dtoa_r+0x434>
 8004db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db2:	f8dd 8000 	ldr.w	r8, [sp]
 8004db6:	ea6f 0b03 	mvn.w	fp, r3
 8004dba:	f04f 0900 	mov.w	r9, #0
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f995 	bl	80050f0 <_Bfree>
 8004dc6:	2f00      	cmp	r7, #0
 8004dc8:	f43f aea7 	beq.w	8004b1a <_dtoa_r+0x5e2>
 8004dcc:	f1b9 0f00 	cmp.w	r9, #0
 8004dd0:	d005      	beq.n	8004dde <_dtoa_r+0x8a6>
 8004dd2:	45b9      	cmp	r9, r7
 8004dd4:	d003      	beq.n	8004dde <_dtoa_r+0x8a6>
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f989 	bl	80050f0 <_Bfree>
 8004dde:	4639      	mov	r1, r7
 8004de0:	4630      	mov	r0, r6
 8004de2:	f000 f985 	bl	80050f0 <_Bfree>
 8004de6:	e698      	b.n	8004b1a <_dtoa_r+0x5e2>
 8004de8:	2400      	movs	r4, #0
 8004dea:	4627      	mov	r7, r4
 8004dec:	e7e0      	b.n	8004db0 <_dtoa_r+0x878>
 8004dee:	46bb      	mov	fp, r7
 8004df0:	4604      	mov	r4, r0
 8004df2:	4607      	mov	r7, r0
 8004df4:	e5ba      	b.n	800496c <_dtoa_r+0x434>
 8004df6:	9b08      	ldr	r3, [sp, #32]
 8004df8:	46ca      	mov	sl, r9
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8100 	beq.w	8005000 <_dtoa_r+0xac8>
 8004e00:	f1b8 0f00 	cmp.w	r8, #0
 8004e04:	dd05      	ble.n	8004e12 <_dtoa_r+0x8da>
 8004e06:	4639      	mov	r1, r7
 8004e08:	4642      	mov	r2, r8
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f000 fb42 	bl	8005494 <__lshift>
 8004e10:	4607      	mov	r7, r0
 8004e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05d      	beq.n	8004ed4 <_dtoa_r+0x99c>
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f000 f928 	bl	8005070 <_Balloc>
 8004e20:	4680      	mov	r8, r0
 8004e22:	b928      	cbnz	r0, 8004e30 <_dtoa_r+0x8f8>
 8004e24:	4b82      	ldr	r3, [pc, #520]	; (8005030 <_dtoa_r+0xaf8>)
 8004e26:	4602      	mov	r2, r0
 8004e28:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e2c:	f7ff bb9a 	b.w	8004564 <_dtoa_r+0x2c>
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	3202      	adds	r2, #2
 8004e34:	0092      	lsls	r2, r2, #2
 8004e36:	f107 010c 	add.w	r1, r7, #12
 8004e3a:	300c      	adds	r0, #12
 8004e3c:	f000 f90a 	bl	8005054 <memcpy>
 8004e40:	2201      	movs	r2, #1
 8004e42:	4641      	mov	r1, r8
 8004e44:	4630      	mov	r0, r6
 8004e46:	f000 fb25 	bl	8005494 <__lshift>
 8004e4a:	9b00      	ldr	r3, [sp, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	9305      	str	r3, [sp, #20]
 8004e50:	9b00      	ldr	r3, [sp, #0]
 8004e52:	4453      	add	r3, sl
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	9b02      	ldr	r3, [sp, #8]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	46b9      	mov	r9, r7
 8004e5e:	9308      	str	r3, [sp, #32]
 8004e60:	4607      	mov	r7, r0
 8004e62:	9b05      	ldr	r3, [sp, #20]
 8004e64:	4621      	mov	r1, r4
 8004e66:	3b01      	subs	r3, #1
 8004e68:	4628      	mov	r0, r5
 8004e6a:	9302      	str	r3, [sp, #8]
 8004e6c:	f7ff fad6 	bl	800441c <quorem>
 8004e70:	4603      	mov	r3, r0
 8004e72:	3330      	adds	r3, #48	; 0x30
 8004e74:	9006      	str	r0, [sp, #24]
 8004e76:	4649      	mov	r1, r9
 8004e78:	4628      	mov	r0, r5
 8004e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e7c:	f000 fb76 	bl	800556c <__mcmp>
 8004e80:	463a      	mov	r2, r7
 8004e82:	4682      	mov	sl, r0
 8004e84:	4621      	mov	r1, r4
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 fb8c 	bl	80055a4 <__mdiff>
 8004e8c:	68c2      	ldr	r2, [r0, #12]
 8004e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e90:	4680      	mov	r8, r0
 8004e92:	bb0a      	cbnz	r2, 8004ed8 <_dtoa_r+0x9a0>
 8004e94:	4601      	mov	r1, r0
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 fb68 	bl	800556c <__mcmp>
 8004e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8004ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ea8:	f000 f922 	bl	80050f0 <_Bfree>
 8004eac:	9b07      	ldr	r3, [sp, #28]
 8004eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004eb4:	ea43 0102 	orr.w	r1, r3, r2
 8004eb8:	9b08      	ldr	r3, [sp, #32]
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ebe:	d10d      	bne.n	8004edc <_dtoa_r+0x9a4>
 8004ec0:	2b39      	cmp	r3, #57	; 0x39
 8004ec2:	d029      	beq.n	8004f18 <_dtoa_r+0x9e0>
 8004ec4:	f1ba 0f00 	cmp.w	sl, #0
 8004ec8:	dd01      	ble.n	8004ece <_dtoa_r+0x996>
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	3331      	adds	r3, #49	; 0x31
 8004ece:	9a02      	ldr	r2, [sp, #8]
 8004ed0:	7013      	strb	r3, [r2, #0]
 8004ed2:	e774      	b.n	8004dbe <_dtoa_r+0x886>
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	e7b8      	b.n	8004e4a <_dtoa_r+0x912>
 8004ed8:	2201      	movs	r2, #1
 8004eda:	e7e1      	b.n	8004ea0 <_dtoa_r+0x968>
 8004edc:	f1ba 0f00 	cmp.w	sl, #0
 8004ee0:	db06      	blt.n	8004ef0 <_dtoa_r+0x9b8>
 8004ee2:	9907      	ldr	r1, [sp, #28]
 8004ee4:	ea41 0a0a 	orr.w	sl, r1, sl
 8004ee8:	9908      	ldr	r1, [sp, #32]
 8004eea:	ea5a 0101 	orrs.w	r1, sl, r1
 8004eee:	d120      	bne.n	8004f32 <_dtoa_r+0x9fa>
 8004ef0:	2a00      	cmp	r2, #0
 8004ef2:	ddec      	ble.n	8004ece <_dtoa_r+0x996>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4630      	mov	r0, r6
 8004efa:	9305      	str	r3, [sp, #20]
 8004efc:	f000 faca 	bl	8005494 <__lshift>
 8004f00:	4621      	mov	r1, r4
 8004f02:	4605      	mov	r5, r0
 8004f04:	f000 fb32 	bl	800556c <__mcmp>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	9b05      	ldr	r3, [sp, #20]
 8004f0c:	dc02      	bgt.n	8004f14 <_dtoa_r+0x9dc>
 8004f0e:	d1de      	bne.n	8004ece <_dtoa_r+0x996>
 8004f10:	07da      	lsls	r2, r3, #31
 8004f12:	d5dc      	bpl.n	8004ece <_dtoa_r+0x996>
 8004f14:	2b39      	cmp	r3, #57	; 0x39
 8004f16:	d1d8      	bne.n	8004eca <_dtoa_r+0x992>
 8004f18:	9a02      	ldr	r2, [sp, #8]
 8004f1a:	2339      	movs	r3, #57	; 0x39
 8004f1c:	7013      	strb	r3, [r2, #0]
 8004f1e:	4643      	mov	r3, r8
 8004f20:	4698      	mov	r8, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004f28:	2a39      	cmp	r2, #57	; 0x39
 8004f2a:	d051      	beq.n	8004fd0 <_dtoa_r+0xa98>
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e745      	b.n	8004dbe <_dtoa_r+0x886>
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	dd03      	ble.n	8004f3e <_dtoa_r+0xa06>
 8004f36:	2b39      	cmp	r3, #57	; 0x39
 8004f38:	d0ee      	beq.n	8004f18 <_dtoa_r+0x9e0>
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	e7c7      	b.n	8004ece <_dtoa_r+0x996>
 8004f3e:	9a05      	ldr	r2, [sp, #20]
 8004f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f42:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f46:	428a      	cmp	r2, r1
 8004f48:	d02b      	beq.n	8004fa2 <_dtoa_r+0xa6a>
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	220a      	movs	r2, #10
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 f8ef 	bl	8005134 <__multadd>
 8004f56:	45b9      	cmp	r9, r7
 8004f58:	4605      	mov	r5, r0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	f04f 020a 	mov.w	r2, #10
 8004f62:	4649      	mov	r1, r9
 8004f64:	4630      	mov	r0, r6
 8004f66:	d107      	bne.n	8004f78 <_dtoa_r+0xa40>
 8004f68:	f000 f8e4 	bl	8005134 <__multadd>
 8004f6c:	4681      	mov	r9, r0
 8004f6e:	4607      	mov	r7, r0
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	3301      	adds	r3, #1
 8004f74:	9305      	str	r3, [sp, #20]
 8004f76:	e774      	b.n	8004e62 <_dtoa_r+0x92a>
 8004f78:	f000 f8dc 	bl	8005134 <__multadd>
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	4681      	mov	r9, r0
 8004f80:	2300      	movs	r3, #0
 8004f82:	220a      	movs	r2, #10
 8004f84:	4630      	mov	r0, r6
 8004f86:	f000 f8d5 	bl	8005134 <__multadd>
 8004f8a:	4607      	mov	r7, r0
 8004f8c:	e7f0      	b.n	8004f70 <_dtoa_r+0xa38>
 8004f8e:	f1ba 0f00 	cmp.w	sl, #0
 8004f92:	9a00      	ldr	r2, [sp, #0]
 8004f94:	bfcc      	ite	gt
 8004f96:	46d0      	movgt	r8, sl
 8004f98:	f04f 0801 	movle.w	r8, #1
 8004f9c:	4490      	add	r8, r2
 8004f9e:	f04f 0900 	mov.w	r9, #0
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	f000 fa73 	bl	8005494 <__lshift>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	f000 fadb 	bl	800556c <__mcmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dcb1      	bgt.n	8004f1e <_dtoa_r+0x9e6>
 8004fba:	d102      	bne.n	8004fc2 <_dtoa_r+0xa8a>
 8004fbc:	9b02      	ldr	r3, [sp, #8]
 8004fbe:	07db      	lsls	r3, r3, #31
 8004fc0:	d4ad      	bmi.n	8004f1e <_dtoa_r+0x9e6>
 8004fc2:	4643      	mov	r3, r8
 8004fc4:	4698      	mov	r8, r3
 8004fc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fca:	2a30      	cmp	r2, #48	; 0x30
 8004fcc:	d0fa      	beq.n	8004fc4 <_dtoa_r+0xa8c>
 8004fce:	e6f6      	b.n	8004dbe <_dtoa_r+0x886>
 8004fd0:	9a00      	ldr	r2, [sp, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d1a4      	bne.n	8004f20 <_dtoa_r+0x9e8>
 8004fd6:	f10b 0b01 	add.w	fp, fp, #1
 8004fda:	2331      	movs	r3, #49	; 0x31
 8004fdc:	e778      	b.n	8004ed0 <_dtoa_r+0x998>
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <_dtoa_r+0xafc>)
 8004fe0:	f7ff bb12 	b.w	8004608 <_dtoa_r+0xd0>
 8004fe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f47f aaee 	bne.w	80045c8 <_dtoa_r+0x90>
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <_dtoa_r+0xb00>)
 8004fee:	f7ff bb0b 	b.w	8004608 <_dtoa_r+0xd0>
 8004ff2:	f1ba 0f00 	cmp.w	sl, #0
 8004ff6:	dc03      	bgt.n	8005000 <_dtoa_r+0xac8>
 8004ff8:	9b07      	ldr	r3, [sp, #28]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	f73f aec7 	bgt.w	8004d8e <_dtoa_r+0x856>
 8005000:	f8dd 8000 	ldr.w	r8, [sp]
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f7ff fa08 	bl	800441c <quorem>
 800500c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005010:	f808 3b01 	strb.w	r3, [r8], #1
 8005014:	9a00      	ldr	r2, [sp, #0]
 8005016:	eba8 0202 	sub.w	r2, r8, r2
 800501a:	4592      	cmp	sl, r2
 800501c:	ddb7      	ble.n	8004f8e <_dtoa_r+0xa56>
 800501e:	4629      	mov	r1, r5
 8005020:	2300      	movs	r3, #0
 8005022:	220a      	movs	r2, #10
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f885 	bl	8005134 <__multadd>
 800502a:	4605      	mov	r5, r0
 800502c:	e7ea      	b.n	8005004 <_dtoa_r+0xacc>
 800502e:	bf00      	nop
 8005030:	08006933 	.word	0x08006933
 8005034:	0800688c 	.word	0x0800688c
 8005038:	080068b0 	.word	0x080068b0

0800503c <_localeconv_r>:
 800503c:	4800      	ldr	r0, [pc, #0]	; (8005040 <_localeconv_r+0x4>)
 800503e:	4770      	bx	lr
 8005040:	20000160 	.word	0x20000160

08005044 <malloc>:
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <malloc+0xc>)
 8005046:	4601      	mov	r1, r0
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	f000 bbef 	b.w	800582c <_malloc_r>
 800504e:	bf00      	nop
 8005050:	2000000c 	.word	0x2000000c

08005054 <memcpy>:
 8005054:	440a      	add	r2, r1
 8005056:	4291      	cmp	r1, r2
 8005058:	f100 33ff 	add.w	r3, r0, #4294967295
 800505c:	d100      	bne.n	8005060 <memcpy+0xc>
 800505e:	4770      	bx	lr
 8005060:	b510      	push	{r4, lr}
 8005062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800506a:	4291      	cmp	r1, r2
 800506c:	d1f9      	bne.n	8005062 <memcpy+0xe>
 800506e:	bd10      	pop	{r4, pc}

08005070 <_Balloc>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005074:	4604      	mov	r4, r0
 8005076:	460d      	mov	r5, r1
 8005078:	b976      	cbnz	r6, 8005098 <_Balloc+0x28>
 800507a:	2010      	movs	r0, #16
 800507c:	f7ff ffe2 	bl	8005044 <malloc>
 8005080:	4602      	mov	r2, r0
 8005082:	6260      	str	r0, [r4, #36]	; 0x24
 8005084:	b920      	cbnz	r0, 8005090 <_Balloc+0x20>
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <_Balloc+0x78>)
 8005088:	4818      	ldr	r0, [pc, #96]	; (80050ec <_Balloc+0x7c>)
 800508a:	2166      	movs	r1, #102	; 0x66
 800508c:	f000 fd94 	bl	8005bb8 <__assert_func>
 8005090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005094:	6006      	str	r6, [r0, #0]
 8005096:	60c6      	str	r6, [r0, #12]
 8005098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800509a:	68f3      	ldr	r3, [r6, #12]
 800509c:	b183      	cbz	r3, 80050c0 <_Balloc+0x50>
 800509e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050a6:	b9b8      	cbnz	r0, 80050d8 <_Balloc+0x68>
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f605 	lsl.w	r6, r1, r5
 80050ae:	1d72      	adds	r2, r6, #5
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 fb5a 	bl	800576c <_calloc_r>
 80050b8:	b160      	cbz	r0, 80050d4 <_Balloc+0x64>
 80050ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050be:	e00e      	b.n	80050de <_Balloc+0x6e>
 80050c0:	2221      	movs	r2, #33	; 0x21
 80050c2:	2104      	movs	r1, #4
 80050c4:	4620      	mov	r0, r4
 80050c6:	f000 fb51 	bl	800576c <_calloc_r>
 80050ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050cc:	60f0      	str	r0, [r6, #12]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e4      	bne.n	800509e <_Balloc+0x2e>
 80050d4:	2000      	movs	r0, #0
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	6802      	ldr	r2, [r0, #0]
 80050da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050de:	2300      	movs	r3, #0
 80050e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050e4:	e7f7      	b.n	80050d6 <_Balloc+0x66>
 80050e6:	bf00      	nop
 80050e8:	080068bd 	.word	0x080068bd
 80050ec:	08006944 	.word	0x08006944

080050f0 <_Bfree>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050f4:	4605      	mov	r5, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	b976      	cbnz	r6, 8005118 <_Bfree+0x28>
 80050fa:	2010      	movs	r0, #16
 80050fc:	f7ff ffa2 	bl	8005044 <malloc>
 8005100:	4602      	mov	r2, r0
 8005102:	6268      	str	r0, [r5, #36]	; 0x24
 8005104:	b920      	cbnz	r0, 8005110 <_Bfree+0x20>
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <_Bfree+0x3c>)
 8005108:	4809      	ldr	r0, [pc, #36]	; (8005130 <_Bfree+0x40>)
 800510a:	218a      	movs	r1, #138	; 0x8a
 800510c:	f000 fd54 	bl	8005bb8 <__assert_func>
 8005110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005114:	6006      	str	r6, [r0, #0]
 8005116:	60c6      	str	r6, [r0, #12]
 8005118:	b13c      	cbz	r4, 800512a <_Bfree+0x3a>
 800511a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800511c:	6862      	ldr	r2, [r4, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005124:	6021      	str	r1, [r4, #0]
 8005126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800512a:	bd70      	pop	{r4, r5, r6, pc}
 800512c:	080068bd 	.word	0x080068bd
 8005130:	08006944 	.word	0x08006944

08005134 <__multadd>:
 8005134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005138:	690e      	ldr	r6, [r1, #16]
 800513a:	4607      	mov	r7, r0
 800513c:	4698      	mov	r8, r3
 800513e:	460c      	mov	r4, r1
 8005140:	f101 0014 	add.w	r0, r1, #20
 8005144:	2300      	movs	r3, #0
 8005146:	6805      	ldr	r5, [r0, #0]
 8005148:	b2a9      	uxth	r1, r5
 800514a:	fb02 8101 	mla	r1, r2, r1, r8
 800514e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005152:	0c2d      	lsrs	r5, r5, #16
 8005154:	fb02 c505 	mla	r5, r2, r5, ip
 8005158:	b289      	uxth	r1, r1
 800515a:	3301      	adds	r3, #1
 800515c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005160:	429e      	cmp	r6, r3
 8005162:	f840 1b04 	str.w	r1, [r0], #4
 8005166:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800516a:	dcec      	bgt.n	8005146 <__multadd+0x12>
 800516c:	f1b8 0f00 	cmp.w	r8, #0
 8005170:	d022      	beq.n	80051b8 <__multadd+0x84>
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	42b3      	cmp	r3, r6
 8005176:	dc19      	bgt.n	80051ac <__multadd+0x78>
 8005178:	6861      	ldr	r1, [r4, #4]
 800517a:	4638      	mov	r0, r7
 800517c:	3101      	adds	r1, #1
 800517e:	f7ff ff77 	bl	8005070 <_Balloc>
 8005182:	4605      	mov	r5, r0
 8005184:	b928      	cbnz	r0, 8005192 <__multadd+0x5e>
 8005186:	4602      	mov	r2, r0
 8005188:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <__multadd+0x8c>)
 800518a:	480e      	ldr	r0, [pc, #56]	; (80051c4 <__multadd+0x90>)
 800518c:	21b5      	movs	r1, #181	; 0xb5
 800518e:	f000 fd13 	bl	8005bb8 <__assert_func>
 8005192:	6922      	ldr	r2, [r4, #16]
 8005194:	3202      	adds	r2, #2
 8005196:	f104 010c 	add.w	r1, r4, #12
 800519a:	0092      	lsls	r2, r2, #2
 800519c:	300c      	adds	r0, #12
 800519e:	f7ff ff59 	bl	8005054 <memcpy>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4638      	mov	r0, r7
 80051a6:	f7ff ffa3 	bl	80050f0 <_Bfree>
 80051aa:	462c      	mov	r4, r5
 80051ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051b0:	3601      	adds	r6, #1
 80051b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80051b6:	6126      	str	r6, [r4, #16]
 80051b8:	4620      	mov	r0, r4
 80051ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051be:	bf00      	nop
 80051c0:	08006933 	.word	0x08006933
 80051c4:	08006944 	.word	0x08006944

080051c8 <__hi0bits>:
 80051c8:	0c03      	lsrs	r3, r0, #16
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	b9d3      	cbnz	r3, 8005204 <__hi0bits+0x3c>
 80051ce:	0400      	lsls	r0, r0, #16
 80051d0:	2310      	movs	r3, #16
 80051d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051d6:	bf04      	itt	eq
 80051d8:	0200      	lsleq	r0, r0, #8
 80051da:	3308      	addeq	r3, #8
 80051dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051e0:	bf04      	itt	eq
 80051e2:	0100      	lsleq	r0, r0, #4
 80051e4:	3304      	addeq	r3, #4
 80051e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051ea:	bf04      	itt	eq
 80051ec:	0080      	lsleq	r0, r0, #2
 80051ee:	3302      	addeq	r3, #2
 80051f0:	2800      	cmp	r0, #0
 80051f2:	db05      	blt.n	8005200 <__hi0bits+0x38>
 80051f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051f8:	f103 0301 	add.w	r3, r3, #1
 80051fc:	bf08      	it	eq
 80051fe:	2320      	moveq	r3, #32
 8005200:	4618      	mov	r0, r3
 8005202:	4770      	bx	lr
 8005204:	2300      	movs	r3, #0
 8005206:	e7e4      	b.n	80051d2 <__hi0bits+0xa>

08005208 <__lo0bits>:
 8005208:	6803      	ldr	r3, [r0, #0]
 800520a:	f013 0207 	ands.w	r2, r3, #7
 800520e:	4601      	mov	r1, r0
 8005210:	d00b      	beq.n	800522a <__lo0bits+0x22>
 8005212:	07da      	lsls	r2, r3, #31
 8005214:	d424      	bmi.n	8005260 <__lo0bits+0x58>
 8005216:	0798      	lsls	r0, r3, #30
 8005218:	bf49      	itett	mi
 800521a:	085b      	lsrmi	r3, r3, #1
 800521c:	089b      	lsrpl	r3, r3, #2
 800521e:	2001      	movmi	r0, #1
 8005220:	600b      	strmi	r3, [r1, #0]
 8005222:	bf5c      	itt	pl
 8005224:	600b      	strpl	r3, [r1, #0]
 8005226:	2002      	movpl	r0, #2
 8005228:	4770      	bx	lr
 800522a:	b298      	uxth	r0, r3
 800522c:	b9b0      	cbnz	r0, 800525c <__lo0bits+0x54>
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	2010      	movs	r0, #16
 8005232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005236:	bf04      	itt	eq
 8005238:	0a1b      	lsreq	r3, r3, #8
 800523a:	3008      	addeq	r0, #8
 800523c:	071a      	lsls	r2, r3, #28
 800523e:	bf04      	itt	eq
 8005240:	091b      	lsreq	r3, r3, #4
 8005242:	3004      	addeq	r0, #4
 8005244:	079a      	lsls	r2, r3, #30
 8005246:	bf04      	itt	eq
 8005248:	089b      	lsreq	r3, r3, #2
 800524a:	3002      	addeq	r0, #2
 800524c:	07da      	lsls	r2, r3, #31
 800524e:	d403      	bmi.n	8005258 <__lo0bits+0x50>
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	f100 0001 	add.w	r0, r0, #1
 8005256:	d005      	beq.n	8005264 <__lo0bits+0x5c>
 8005258:	600b      	str	r3, [r1, #0]
 800525a:	4770      	bx	lr
 800525c:	4610      	mov	r0, r2
 800525e:	e7e8      	b.n	8005232 <__lo0bits+0x2a>
 8005260:	2000      	movs	r0, #0
 8005262:	4770      	bx	lr
 8005264:	2020      	movs	r0, #32
 8005266:	4770      	bx	lr

08005268 <__i2b>:
 8005268:	b510      	push	{r4, lr}
 800526a:	460c      	mov	r4, r1
 800526c:	2101      	movs	r1, #1
 800526e:	f7ff feff 	bl	8005070 <_Balloc>
 8005272:	4602      	mov	r2, r0
 8005274:	b928      	cbnz	r0, 8005282 <__i2b+0x1a>
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <__i2b+0x24>)
 8005278:	4805      	ldr	r0, [pc, #20]	; (8005290 <__i2b+0x28>)
 800527a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800527e:	f000 fc9b 	bl	8005bb8 <__assert_func>
 8005282:	2301      	movs	r3, #1
 8005284:	6144      	str	r4, [r0, #20]
 8005286:	6103      	str	r3, [r0, #16]
 8005288:	bd10      	pop	{r4, pc}
 800528a:	bf00      	nop
 800528c:	08006933 	.word	0x08006933
 8005290:	08006944 	.word	0x08006944

08005294 <__multiply>:
 8005294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005298:	4614      	mov	r4, r2
 800529a:	690a      	ldr	r2, [r1, #16]
 800529c:	6923      	ldr	r3, [r4, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	bfb8      	it	lt
 80052a2:	460b      	movlt	r3, r1
 80052a4:	460d      	mov	r5, r1
 80052a6:	bfbc      	itt	lt
 80052a8:	4625      	movlt	r5, r4
 80052aa:	461c      	movlt	r4, r3
 80052ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052b4:	68ab      	ldr	r3, [r5, #8]
 80052b6:	6869      	ldr	r1, [r5, #4]
 80052b8:	eb0a 0709 	add.w	r7, sl, r9
 80052bc:	42bb      	cmp	r3, r7
 80052be:	b085      	sub	sp, #20
 80052c0:	bfb8      	it	lt
 80052c2:	3101      	addlt	r1, #1
 80052c4:	f7ff fed4 	bl	8005070 <_Balloc>
 80052c8:	b930      	cbnz	r0, 80052d8 <__multiply+0x44>
 80052ca:	4602      	mov	r2, r0
 80052cc:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <__multiply+0x144>)
 80052ce:	4843      	ldr	r0, [pc, #268]	; (80053dc <__multiply+0x148>)
 80052d0:	f240 115d 	movw	r1, #349	; 0x15d
 80052d4:	f000 fc70 	bl	8005bb8 <__assert_func>
 80052d8:	f100 0614 	add.w	r6, r0, #20
 80052dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80052e0:	4633      	mov	r3, r6
 80052e2:	2200      	movs	r2, #0
 80052e4:	4543      	cmp	r3, r8
 80052e6:	d31e      	bcc.n	8005326 <__multiply+0x92>
 80052e8:	f105 0c14 	add.w	ip, r5, #20
 80052ec:	f104 0314 	add.w	r3, r4, #20
 80052f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80052f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80052f8:	9202      	str	r2, [sp, #8]
 80052fa:	ebac 0205 	sub.w	r2, ip, r5
 80052fe:	3a15      	subs	r2, #21
 8005300:	f022 0203 	bic.w	r2, r2, #3
 8005304:	3204      	adds	r2, #4
 8005306:	f105 0115 	add.w	r1, r5, #21
 800530a:	458c      	cmp	ip, r1
 800530c:	bf38      	it	cc
 800530e:	2204      	movcc	r2, #4
 8005310:	9201      	str	r2, [sp, #4]
 8005312:	9a02      	ldr	r2, [sp, #8]
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	429a      	cmp	r2, r3
 8005318:	d808      	bhi.n	800532c <__multiply+0x98>
 800531a:	2f00      	cmp	r7, #0
 800531c:	dc55      	bgt.n	80053ca <__multiply+0x136>
 800531e:	6107      	str	r7, [r0, #16]
 8005320:	b005      	add	sp, #20
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005326:	f843 2b04 	str.w	r2, [r3], #4
 800532a:	e7db      	b.n	80052e4 <__multiply+0x50>
 800532c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005330:	f1ba 0f00 	cmp.w	sl, #0
 8005334:	d020      	beq.n	8005378 <__multiply+0xe4>
 8005336:	f105 0e14 	add.w	lr, r5, #20
 800533a:	46b1      	mov	r9, r6
 800533c:	2200      	movs	r2, #0
 800533e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005342:	f8d9 b000 	ldr.w	fp, [r9]
 8005346:	b2a1      	uxth	r1, r4
 8005348:	fa1f fb8b 	uxth.w	fp, fp
 800534c:	fb0a b101 	mla	r1, sl, r1, fp
 8005350:	4411      	add	r1, r2
 8005352:	f8d9 2000 	ldr.w	r2, [r9]
 8005356:	0c24      	lsrs	r4, r4, #16
 8005358:	0c12      	lsrs	r2, r2, #16
 800535a:	fb0a 2404 	mla	r4, sl, r4, r2
 800535e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005362:	b289      	uxth	r1, r1
 8005364:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005368:	45f4      	cmp	ip, lr
 800536a:	f849 1b04 	str.w	r1, [r9], #4
 800536e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005372:	d8e4      	bhi.n	800533e <__multiply+0xaa>
 8005374:	9901      	ldr	r1, [sp, #4]
 8005376:	5072      	str	r2, [r6, r1]
 8005378:	9a03      	ldr	r2, [sp, #12]
 800537a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800537e:	3304      	adds	r3, #4
 8005380:	f1b9 0f00 	cmp.w	r9, #0
 8005384:	d01f      	beq.n	80053c6 <__multiply+0x132>
 8005386:	6834      	ldr	r4, [r6, #0]
 8005388:	f105 0114 	add.w	r1, r5, #20
 800538c:	46b6      	mov	lr, r6
 800538e:	f04f 0a00 	mov.w	sl, #0
 8005392:	880a      	ldrh	r2, [r1, #0]
 8005394:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005398:	fb09 b202 	mla	r2, r9, r2, fp
 800539c:	4492      	add	sl, r2
 800539e:	b2a4      	uxth	r4, r4
 80053a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80053a4:	f84e 4b04 	str.w	r4, [lr], #4
 80053a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80053ac:	f8be 2000 	ldrh.w	r2, [lr]
 80053b0:	0c24      	lsrs	r4, r4, #16
 80053b2:	fb09 2404 	mla	r4, r9, r4, r2
 80053b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80053ba:	458c      	cmp	ip, r1
 80053bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053c0:	d8e7      	bhi.n	8005392 <__multiply+0xfe>
 80053c2:	9a01      	ldr	r2, [sp, #4]
 80053c4:	50b4      	str	r4, [r6, r2]
 80053c6:	3604      	adds	r6, #4
 80053c8:	e7a3      	b.n	8005312 <__multiply+0x7e>
 80053ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1a5      	bne.n	800531e <__multiply+0x8a>
 80053d2:	3f01      	subs	r7, #1
 80053d4:	e7a1      	b.n	800531a <__multiply+0x86>
 80053d6:	bf00      	nop
 80053d8:	08006933 	.word	0x08006933
 80053dc:	08006944 	.word	0x08006944

080053e0 <__pow5mult>:
 80053e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e4:	4615      	mov	r5, r2
 80053e6:	f012 0203 	ands.w	r2, r2, #3
 80053ea:	4606      	mov	r6, r0
 80053ec:	460f      	mov	r7, r1
 80053ee:	d007      	beq.n	8005400 <__pow5mult+0x20>
 80053f0:	4c25      	ldr	r4, [pc, #148]	; (8005488 <__pow5mult+0xa8>)
 80053f2:	3a01      	subs	r2, #1
 80053f4:	2300      	movs	r3, #0
 80053f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053fa:	f7ff fe9b 	bl	8005134 <__multadd>
 80053fe:	4607      	mov	r7, r0
 8005400:	10ad      	asrs	r5, r5, #2
 8005402:	d03d      	beq.n	8005480 <__pow5mult+0xa0>
 8005404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005406:	b97c      	cbnz	r4, 8005428 <__pow5mult+0x48>
 8005408:	2010      	movs	r0, #16
 800540a:	f7ff fe1b 	bl	8005044 <malloc>
 800540e:	4602      	mov	r2, r0
 8005410:	6270      	str	r0, [r6, #36]	; 0x24
 8005412:	b928      	cbnz	r0, 8005420 <__pow5mult+0x40>
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <__pow5mult+0xac>)
 8005416:	481e      	ldr	r0, [pc, #120]	; (8005490 <__pow5mult+0xb0>)
 8005418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800541c:	f000 fbcc 	bl	8005bb8 <__assert_func>
 8005420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005424:	6004      	str	r4, [r0, #0]
 8005426:	60c4      	str	r4, [r0, #12]
 8005428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800542c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005430:	b94c      	cbnz	r4, 8005446 <__pow5mult+0x66>
 8005432:	f240 2171 	movw	r1, #625	; 0x271
 8005436:	4630      	mov	r0, r6
 8005438:	f7ff ff16 	bl	8005268 <__i2b>
 800543c:	2300      	movs	r3, #0
 800543e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005442:	4604      	mov	r4, r0
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	f04f 0900 	mov.w	r9, #0
 800544a:	07eb      	lsls	r3, r5, #31
 800544c:	d50a      	bpl.n	8005464 <__pow5mult+0x84>
 800544e:	4639      	mov	r1, r7
 8005450:	4622      	mov	r2, r4
 8005452:	4630      	mov	r0, r6
 8005454:	f7ff ff1e 	bl	8005294 <__multiply>
 8005458:	4639      	mov	r1, r7
 800545a:	4680      	mov	r8, r0
 800545c:	4630      	mov	r0, r6
 800545e:	f7ff fe47 	bl	80050f0 <_Bfree>
 8005462:	4647      	mov	r7, r8
 8005464:	106d      	asrs	r5, r5, #1
 8005466:	d00b      	beq.n	8005480 <__pow5mult+0xa0>
 8005468:	6820      	ldr	r0, [r4, #0]
 800546a:	b938      	cbnz	r0, 800547c <__pow5mult+0x9c>
 800546c:	4622      	mov	r2, r4
 800546e:	4621      	mov	r1, r4
 8005470:	4630      	mov	r0, r6
 8005472:	f7ff ff0f 	bl	8005294 <__multiply>
 8005476:	6020      	str	r0, [r4, #0]
 8005478:	f8c0 9000 	str.w	r9, [r0]
 800547c:	4604      	mov	r4, r0
 800547e:	e7e4      	b.n	800544a <__pow5mult+0x6a>
 8005480:	4638      	mov	r0, r7
 8005482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005486:	bf00      	nop
 8005488:	08006a98 	.word	0x08006a98
 800548c:	080068bd 	.word	0x080068bd
 8005490:	08006944 	.word	0x08006944

08005494 <__lshift>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	460c      	mov	r4, r1
 800549a:	6849      	ldr	r1, [r1, #4]
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054a2:	68a3      	ldr	r3, [r4, #8]
 80054a4:	4607      	mov	r7, r0
 80054a6:	4691      	mov	r9, r2
 80054a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054ac:	f108 0601 	add.w	r6, r8, #1
 80054b0:	42b3      	cmp	r3, r6
 80054b2:	db0b      	blt.n	80054cc <__lshift+0x38>
 80054b4:	4638      	mov	r0, r7
 80054b6:	f7ff fddb 	bl	8005070 <_Balloc>
 80054ba:	4605      	mov	r5, r0
 80054bc:	b948      	cbnz	r0, 80054d2 <__lshift+0x3e>
 80054be:	4602      	mov	r2, r0
 80054c0:	4b28      	ldr	r3, [pc, #160]	; (8005564 <__lshift+0xd0>)
 80054c2:	4829      	ldr	r0, [pc, #164]	; (8005568 <__lshift+0xd4>)
 80054c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054c8:	f000 fb76 	bl	8005bb8 <__assert_func>
 80054cc:	3101      	adds	r1, #1
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	e7ee      	b.n	80054b0 <__lshift+0x1c>
 80054d2:	2300      	movs	r3, #0
 80054d4:	f100 0114 	add.w	r1, r0, #20
 80054d8:	f100 0210 	add.w	r2, r0, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	4553      	cmp	r3, sl
 80054e0:	db33      	blt.n	800554a <__lshift+0xb6>
 80054e2:	6920      	ldr	r0, [r4, #16]
 80054e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054e8:	f104 0314 	add.w	r3, r4, #20
 80054ec:	f019 091f 	ands.w	r9, r9, #31
 80054f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054f8:	d02b      	beq.n	8005552 <__lshift+0xbe>
 80054fa:	f1c9 0e20 	rsb	lr, r9, #32
 80054fe:	468a      	mov	sl, r1
 8005500:	2200      	movs	r2, #0
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	fa00 f009 	lsl.w	r0, r0, r9
 8005508:	4302      	orrs	r2, r0
 800550a:	f84a 2b04 	str.w	r2, [sl], #4
 800550e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005512:	459c      	cmp	ip, r3
 8005514:	fa22 f20e 	lsr.w	r2, r2, lr
 8005518:	d8f3      	bhi.n	8005502 <__lshift+0x6e>
 800551a:	ebac 0304 	sub.w	r3, ip, r4
 800551e:	3b15      	subs	r3, #21
 8005520:	f023 0303 	bic.w	r3, r3, #3
 8005524:	3304      	adds	r3, #4
 8005526:	f104 0015 	add.w	r0, r4, #21
 800552a:	4584      	cmp	ip, r0
 800552c:	bf38      	it	cc
 800552e:	2304      	movcc	r3, #4
 8005530:	50ca      	str	r2, [r1, r3]
 8005532:	b10a      	cbz	r2, 8005538 <__lshift+0xa4>
 8005534:	f108 0602 	add.w	r6, r8, #2
 8005538:	3e01      	subs	r6, #1
 800553a:	4638      	mov	r0, r7
 800553c:	612e      	str	r6, [r5, #16]
 800553e:	4621      	mov	r1, r4
 8005540:	f7ff fdd6 	bl	80050f0 <_Bfree>
 8005544:	4628      	mov	r0, r5
 8005546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554a:	f842 0f04 	str.w	r0, [r2, #4]!
 800554e:	3301      	adds	r3, #1
 8005550:	e7c5      	b.n	80054de <__lshift+0x4a>
 8005552:	3904      	subs	r1, #4
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	f841 2f04 	str.w	r2, [r1, #4]!
 800555c:	459c      	cmp	ip, r3
 800555e:	d8f9      	bhi.n	8005554 <__lshift+0xc0>
 8005560:	e7ea      	b.n	8005538 <__lshift+0xa4>
 8005562:	bf00      	nop
 8005564:	08006933 	.word	0x08006933
 8005568:	08006944 	.word	0x08006944

0800556c <__mcmp>:
 800556c:	b530      	push	{r4, r5, lr}
 800556e:	6902      	ldr	r2, [r0, #16]
 8005570:	690c      	ldr	r4, [r1, #16]
 8005572:	1b12      	subs	r2, r2, r4
 8005574:	d10e      	bne.n	8005594 <__mcmp+0x28>
 8005576:	f100 0314 	add.w	r3, r0, #20
 800557a:	3114      	adds	r1, #20
 800557c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800558c:	42a5      	cmp	r5, r4
 800558e:	d003      	beq.n	8005598 <__mcmp+0x2c>
 8005590:	d305      	bcc.n	800559e <__mcmp+0x32>
 8005592:	2201      	movs	r2, #1
 8005594:	4610      	mov	r0, r2
 8005596:	bd30      	pop	{r4, r5, pc}
 8005598:	4283      	cmp	r3, r0
 800559a:	d3f3      	bcc.n	8005584 <__mcmp+0x18>
 800559c:	e7fa      	b.n	8005594 <__mcmp+0x28>
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	e7f7      	b.n	8005594 <__mcmp+0x28>

080055a4 <__mdiff>:
 80055a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	460c      	mov	r4, r1
 80055aa:	4606      	mov	r6, r0
 80055ac:	4611      	mov	r1, r2
 80055ae:	4620      	mov	r0, r4
 80055b0:	4617      	mov	r7, r2
 80055b2:	f7ff ffdb 	bl	800556c <__mcmp>
 80055b6:	1e05      	subs	r5, r0, #0
 80055b8:	d110      	bne.n	80055dc <__mdiff+0x38>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4630      	mov	r0, r6
 80055be:	f7ff fd57 	bl	8005070 <_Balloc>
 80055c2:	b930      	cbnz	r0, 80055d2 <__mdiff+0x2e>
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <__mdiff+0x108>)
 80055c6:	4602      	mov	r2, r0
 80055c8:	f240 2132 	movw	r1, #562	; 0x232
 80055cc:	4838      	ldr	r0, [pc, #224]	; (80056b0 <__mdiff+0x10c>)
 80055ce:	f000 faf3 	bl	8005bb8 <__assert_func>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055dc:	bfa4      	itt	ge
 80055de:	463b      	movge	r3, r7
 80055e0:	4627      	movge	r7, r4
 80055e2:	4630      	mov	r0, r6
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	bfa6      	itte	ge
 80055e8:	461c      	movge	r4, r3
 80055ea:	2500      	movge	r5, #0
 80055ec:	2501      	movlt	r5, #1
 80055ee:	f7ff fd3f 	bl	8005070 <_Balloc>
 80055f2:	b920      	cbnz	r0, 80055fe <__mdiff+0x5a>
 80055f4:	4b2d      	ldr	r3, [pc, #180]	; (80056ac <__mdiff+0x108>)
 80055f6:	4602      	mov	r2, r0
 80055f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80055fc:	e7e6      	b.n	80055cc <__mdiff+0x28>
 80055fe:	693e      	ldr	r6, [r7, #16]
 8005600:	60c5      	str	r5, [r0, #12]
 8005602:	6925      	ldr	r5, [r4, #16]
 8005604:	f107 0114 	add.w	r1, r7, #20
 8005608:	f104 0914 	add.w	r9, r4, #20
 800560c:	f100 0e14 	add.w	lr, r0, #20
 8005610:	f107 0210 	add.w	r2, r7, #16
 8005614:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005618:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800561c:	46f2      	mov	sl, lr
 800561e:	2700      	movs	r7, #0
 8005620:	f859 3b04 	ldr.w	r3, [r9], #4
 8005624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005628:	fa1f f883 	uxth.w	r8, r3
 800562c:	fa17 f78b 	uxtah	r7, r7, fp
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	eba7 0808 	sub.w	r8, r7, r8
 8005636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800563a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800563e:	fa1f f888 	uxth.w	r8, r8
 8005642:	141f      	asrs	r7, r3, #16
 8005644:	454d      	cmp	r5, r9
 8005646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800564a:	f84a 3b04 	str.w	r3, [sl], #4
 800564e:	d8e7      	bhi.n	8005620 <__mdiff+0x7c>
 8005650:	1b2b      	subs	r3, r5, r4
 8005652:	3b15      	subs	r3, #21
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	3304      	adds	r3, #4
 800565a:	3415      	adds	r4, #21
 800565c:	42a5      	cmp	r5, r4
 800565e:	bf38      	it	cc
 8005660:	2304      	movcc	r3, #4
 8005662:	4419      	add	r1, r3
 8005664:	4473      	add	r3, lr
 8005666:	469e      	mov	lr, r3
 8005668:	460d      	mov	r5, r1
 800566a:	4565      	cmp	r5, ip
 800566c:	d30e      	bcc.n	800568c <__mdiff+0xe8>
 800566e:	f10c 0203 	add.w	r2, ip, #3
 8005672:	1a52      	subs	r2, r2, r1
 8005674:	f022 0203 	bic.w	r2, r2, #3
 8005678:	3903      	subs	r1, #3
 800567a:	458c      	cmp	ip, r1
 800567c:	bf38      	it	cc
 800567e:	2200      	movcc	r2, #0
 8005680:	441a      	add	r2, r3
 8005682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005686:	b17b      	cbz	r3, 80056a8 <__mdiff+0x104>
 8005688:	6106      	str	r6, [r0, #16]
 800568a:	e7a5      	b.n	80055d8 <__mdiff+0x34>
 800568c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005690:	fa17 f488 	uxtah	r4, r7, r8
 8005694:	1422      	asrs	r2, r4, #16
 8005696:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800569a:	b2a4      	uxth	r4, r4
 800569c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80056a0:	f84e 4b04 	str.w	r4, [lr], #4
 80056a4:	1417      	asrs	r7, r2, #16
 80056a6:	e7e0      	b.n	800566a <__mdiff+0xc6>
 80056a8:	3e01      	subs	r6, #1
 80056aa:	e7ea      	b.n	8005682 <__mdiff+0xde>
 80056ac:	08006933 	.word	0x08006933
 80056b0:	08006944 	.word	0x08006944

080056b4 <__d2b>:
 80056b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056b8:	4689      	mov	r9, r1
 80056ba:	2101      	movs	r1, #1
 80056bc:	ec57 6b10 	vmov	r6, r7, d0
 80056c0:	4690      	mov	r8, r2
 80056c2:	f7ff fcd5 	bl	8005070 <_Balloc>
 80056c6:	4604      	mov	r4, r0
 80056c8:	b930      	cbnz	r0, 80056d8 <__d2b+0x24>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b25      	ldr	r3, [pc, #148]	; (8005764 <__d2b+0xb0>)
 80056ce:	4826      	ldr	r0, [pc, #152]	; (8005768 <__d2b+0xb4>)
 80056d0:	f240 310a 	movw	r1, #778	; 0x30a
 80056d4:	f000 fa70 	bl	8005bb8 <__assert_func>
 80056d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80056dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056e0:	bb35      	cbnz	r5, 8005730 <__d2b+0x7c>
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	9301      	str	r3, [sp, #4]
 80056e6:	d028      	beq.n	800573a <__d2b+0x86>
 80056e8:	4668      	mov	r0, sp
 80056ea:	9600      	str	r6, [sp, #0]
 80056ec:	f7ff fd8c 	bl	8005208 <__lo0bits>
 80056f0:	9900      	ldr	r1, [sp, #0]
 80056f2:	b300      	cbz	r0, 8005736 <__d2b+0x82>
 80056f4:	9a01      	ldr	r2, [sp, #4]
 80056f6:	f1c0 0320 	rsb	r3, r0, #32
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	430b      	orrs	r3, r1
 8005700:	40c2      	lsrs	r2, r0
 8005702:	6163      	str	r3, [r4, #20]
 8005704:	9201      	str	r2, [sp, #4]
 8005706:	9b01      	ldr	r3, [sp, #4]
 8005708:	61a3      	str	r3, [r4, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf14      	ite	ne
 800570e:	2202      	movne	r2, #2
 8005710:	2201      	moveq	r2, #1
 8005712:	6122      	str	r2, [r4, #16]
 8005714:	b1d5      	cbz	r5, 800574c <__d2b+0x98>
 8005716:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800571a:	4405      	add	r5, r0
 800571c:	f8c9 5000 	str.w	r5, [r9]
 8005720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005724:	f8c8 0000 	str.w	r0, [r8]
 8005728:	4620      	mov	r0, r4
 800572a:	b003      	add	sp, #12
 800572c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005734:	e7d5      	b.n	80056e2 <__d2b+0x2e>
 8005736:	6161      	str	r1, [r4, #20]
 8005738:	e7e5      	b.n	8005706 <__d2b+0x52>
 800573a:	a801      	add	r0, sp, #4
 800573c:	f7ff fd64 	bl	8005208 <__lo0bits>
 8005740:	9b01      	ldr	r3, [sp, #4]
 8005742:	6163      	str	r3, [r4, #20]
 8005744:	2201      	movs	r2, #1
 8005746:	6122      	str	r2, [r4, #16]
 8005748:	3020      	adds	r0, #32
 800574a:	e7e3      	b.n	8005714 <__d2b+0x60>
 800574c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005754:	f8c9 0000 	str.w	r0, [r9]
 8005758:	6918      	ldr	r0, [r3, #16]
 800575a:	f7ff fd35 	bl	80051c8 <__hi0bits>
 800575e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005762:	e7df      	b.n	8005724 <__d2b+0x70>
 8005764:	08006933 	.word	0x08006933
 8005768:	08006944 	.word	0x08006944

0800576c <_calloc_r>:
 800576c:	b513      	push	{r0, r1, r4, lr}
 800576e:	434a      	muls	r2, r1
 8005770:	4611      	mov	r1, r2
 8005772:	9201      	str	r2, [sp, #4]
 8005774:	f000 f85a 	bl	800582c <_malloc_r>
 8005778:	4604      	mov	r4, r0
 800577a:	b118      	cbz	r0, 8005784 <_calloc_r+0x18>
 800577c:	9a01      	ldr	r2, [sp, #4]
 800577e:	2100      	movs	r1, #0
 8005780:	f7fe f9e0 	bl	8003b44 <memset>
 8005784:	4620      	mov	r0, r4
 8005786:	b002      	add	sp, #8
 8005788:	bd10      	pop	{r4, pc}
	...

0800578c <_free_r>:
 800578c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800578e:	2900      	cmp	r1, #0
 8005790:	d048      	beq.n	8005824 <_free_r+0x98>
 8005792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005796:	9001      	str	r0, [sp, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f1a1 0404 	sub.w	r4, r1, #4
 800579e:	bfb8      	it	lt
 80057a0:	18e4      	addlt	r4, r4, r3
 80057a2:	f000 fa65 	bl	8005c70 <__malloc_lock>
 80057a6:	4a20      	ldr	r2, [pc, #128]	; (8005828 <_free_r+0x9c>)
 80057a8:	9801      	ldr	r0, [sp, #4]
 80057aa:	6813      	ldr	r3, [r2, #0]
 80057ac:	4615      	mov	r5, r2
 80057ae:	b933      	cbnz	r3, 80057be <_free_r+0x32>
 80057b0:	6063      	str	r3, [r4, #4]
 80057b2:	6014      	str	r4, [r2, #0]
 80057b4:	b003      	add	sp, #12
 80057b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ba:	f000 ba5f 	b.w	8005c7c <__malloc_unlock>
 80057be:	42a3      	cmp	r3, r4
 80057c0:	d90b      	bls.n	80057da <_free_r+0x4e>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	1862      	adds	r2, r4, r1
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bf04      	itt	eq
 80057ca:	681a      	ldreq	r2, [r3, #0]
 80057cc:	685b      	ldreq	r3, [r3, #4]
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	bf04      	itt	eq
 80057d2:	1852      	addeq	r2, r2, r1
 80057d4:	6022      	streq	r2, [r4, #0]
 80057d6:	602c      	str	r4, [r5, #0]
 80057d8:	e7ec      	b.n	80057b4 <_free_r+0x28>
 80057da:	461a      	mov	r2, r3
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b10b      	cbz	r3, 80057e4 <_free_r+0x58>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d9fa      	bls.n	80057da <_free_r+0x4e>
 80057e4:	6811      	ldr	r1, [r2, #0]
 80057e6:	1855      	adds	r5, r2, r1
 80057e8:	42a5      	cmp	r5, r4
 80057ea:	d10b      	bne.n	8005804 <_free_r+0x78>
 80057ec:	6824      	ldr	r4, [r4, #0]
 80057ee:	4421      	add	r1, r4
 80057f0:	1854      	adds	r4, r2, r1
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	6011      	str	r1, [r2, #0]
 80057f6:	d1dd      	bne.n	80057b4 <_free_r+0x28>
 80057f8:	681c      	ldr	r4, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	6053      	str	r3, [r2, #4]
 80057fe:	4421      	add	r1, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	e7d7      	b.n	80057b4 <_free_r+0x28>
 8005804:	d902      	bls.n	800580c <_free_r+0x80>
 8005806:	230c      	movs	r3, #12
 8005808:	6003      	str	r3, [r0, #0]
 800580a:	e7d3      	b.n	80057b4 <_free_r+0x28>
 800580c:	6825      	ldr	r5, [r4, #0]
 800580e:	1961      	adds	r1, r4, r5
 8005810:	428b      	cmp	r3, r1
 8005812:	bf04      	itt	eq
 8005814:	6819      	ldreq	r1, [r3, #0]
 8005816:	685b      	ldreq	r3, [r3, #4]
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	bf04      	itt	eq
 800581c:	1949      	addeq	r1, r1, r5
 800581e:	6021      	streq	r1, [r4, #0]
 8005820:	6054      	str	r4, [r2, #4]
 8005822:	e7c7      	b.n	80057b4 <_free_r+0x28>
 8005824:	b003      	add	sp, #12
 8005826:	bd30      	pop	{r4, r5, pc}
 8005828:	200002d4 	.word	0x200002d4

0800582c <_malloc_r>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	1ccd      	adds	r5, r1, #3
 8005830:	f025 0503 	bic.w	r5, r5, #3
 8005834:	3508      	adds	r5, #8
 8005836:	2d0c      	cmp	r5, #12
 8005838:	bf38      	it	cc
 800583a:	250c      	movcc	r5, #12
 800583c:	2d00      	cmp	r5, #0
 800583e:	4606      	mov	r6, r0
 8005840:	db01      	blt.n	8005846 <_malloc_r+0x1a>
 8005842:	42a9      	cmp	r1, r5
 8005844:	d903      	bls.n	800584e <_malloc_r+0x22>
 8005846:	230c      	movs	r3, #12
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	2000      	movs	r0, #0
 800584c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800584e:	f000 fa0f 	bl	8005c70 <__malloc_lock>
 8005852:	4921      	ldr	r1, [pc, #132]	; (80058d8 <_malloc_r+0xac>)
 8005854:	680a      	ldr	r2, [r1, #0]
 8005856:	4614      	mov	r4, r2
 8005858:	b99c      	cbnz	r4, 8005882 <_malloc_r+0x56>
 800585a:	4f20      	ldr	r7, [pc, #128]	; (80058dc <_malloc_r+0xb0>)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	b923      	cbnz	r3, 800586a <_malloc_r+0x3e>
 8005860:	4621      	mov	r1, r4
 8005862:	4630      	mov	r0, r6
 8005864:	f000 f998 	bl	8005b98 <_sbrk_r>
 8005868:	6038      	str	r0, [r7, #0]
 800586a:	4629      	mov	r1, r5
 800586c:	4630      	mov	r0, r6
 800586e:	f000 f993 	bl	8005b98 <_sbrk_r>
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	d123      	bne.n	80058be <_malloc_r+0x92>
 8005876:	230c      	movs	r3, #12
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	4630      	mov	r0, r6
 800587c:	f000 f9fe 	bl	8005c7c <__malloc_unlock>
 8005880:	e7e3      	b.n	800584a <_malloc_r+0x1e>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	1b5b      	subs	r3, r3, r5
 8005886:	d417      	bmi.n	80058b8 <_malloc_r+0x8c>
 8005888:	2b0b      	cmp	r3, #11
 800588a:	d903      	bls.n	8005894 <_malloc_r+0x68>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	441c      	add	r4, r3
 8005890:	6025      	str	r5, [r4, #0]
 8005892:	e004      	b.n	800589e <_malloc_r+0x72>
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	42a2      	cmp	r2, r4
 8005898:	bf0c      	ite	eq
 800589a:	600b      	streq	r3, [r1, #0]
 800589c:	6053      	strne	r3, [r2, #4]
 800589e:	4630      	mov	r0, r6
 80058a0:	f000 f9ec 	bl	8005c7c <__malloc_unlock>
 80058a4:	f104 000b 	add.w	r0, r4, #11
 80058a8:	1d23      	adds	r3, r4, #4
 80058aa:	f020 0007 	bic.w	r0, r0, #7
 80058ae:	1ac2      	subs	r2, r0, r3
 80058b0:	d0cc      	beq.n	800584c <_malloc_r+0x20>
 80058b2:	1a1b      	subs	r3, r3, r0
 80058b4:	50a3      	str	r3, [r4, r2]
 80058b6:	e7c9      	b.n	800584c <_malloc_r+0x20>
 80058b8:	4622      	mov	r2, r4
 80058ba:	6864      	ldr	r4, [r4, #4]
 80058bc:	e7cc      	b.n	8005858 <_malloc_r+0x2c>
 80058be:	1cc4      	adds	r4, r0, #3
 80058c0:	f024 0403 	bic.w	r4, r4, #3
 80058c4:	42a0      	cmp	r0, r4
 80058c6:	d0e3      	beq.n	8005890 <_malloc_r+0x64>
 80058c8:	1a21      	subs	r1, r4, r0
 80058ca:	4630      	mov	r0, r6
 80058cc:	f000 f964 	bl	8005b98 <_sbrk_r>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d1dd      	bne.n	8005890 <_malloc_r+0x64>
 80058d4:	e7cf      	b.n	8005876 <_malloc_r+0x4a>
 80058d6:	bf00      	nop
 80058d8:	200002d4 	.word	0x200002d4
 80058dc:	200002d8 	.word	0x200002d8

080058e0 <__ssputs_r>:
 80058e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e4:	688e      	ldr	r6, [r1, #8]
 80058e6:	429e      	cmp	r6, r3
 80058e8:	4682      	mov	sl, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4690      	mov	r8, r2
 80058ee:	461f      	mov	r7, r3
 80058f0:	d838      	bhi.n	8005964 <__ssputs_r+0x84>
 80058f2:	898a      	ldrh	r2, [r1, #12]
 80058f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f8:	d032      	beq.n	8005960 <__ssputs_r+0x80>
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	6909      	ldr	r1, [r1, #16]
 80058fe:	eba5 0901 	sub.w	r9, r5, r1
 8005902:	6965      	ldr	r5, [r4, #20]
 8005904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800590c:	3301      	adds	r3, #1
 800590e:	444b      	add	r3, r9
 8005910:	106d      	asrs	r5, r5, #1
 8005912:	429d      	cmp	r5, r3
 8005914:	bf38      	it	cc
 8005916:	461d      	movcc	r5, r3
 8005918:	0553      	lsls	r3, r2, #21
 800591a:	d531      	bpl.n	8005980 <__ssputs_r+0xa0>
 800591c:	4629      	mov	r1, r5
 800591e:	f7ff ff85 	bl	800582c <_malloc_r>
 8005922:	4606      	mov	r6, r0
 8005924:	b950      	cbnz	r0, 800593c <__ssputs_r+0x5c>
 8005926:	230c      	movs	r3, #12
 8005928:	f8ca 3000 	str.w	r3, [sl]
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	6921      	ldr	r1, [r4, #16]
 800593e:	464a      	mov	r2, r9
 8005940:	f7ff fb88 	bl	8005054 <memcpy>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800594a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	6126      	str	r6, [r4, #16]
 8005952:	6165      	str	r5, [r4, #20]
 8005954:	444e      	add	r6, r9
 8005956:	eba5 0509 	sub.w	r5, r5, r9
 800595a:	6026      	str	r6, [r4, #0]
 800595c:	60a5      	str	r5, [r4, #8]
 800595e:	463e      	mov	r6, r7
 8005960:	42be      	cmp	r6, r7
 8005962:	d900      	bls.n	8005966 <__ssputs_r+0x86>
 8005964:	463e      	mov	r6, r7
 8005966:	4632      	mov	r2, r6
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	4641      	mov	r1, r8
 800596c:	f000 f966 	bl	8005c3c <memmove>
 8005970:	68a3      	ldr	r3, [r4, #8]
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	1b9b      	subs	r3, r3, r6
 8005976:	4432      	add	r2, r6
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	2000      	movs	r0, #0
 800597e:	e7db      	b.n	8005938 <__ssputs_r+0x58>
 8005980:	462a      	mov	r2, r5
 8005982:	f000 f981 	bl	8005c88 <_realloc_r>
 8005986:	4606      	mov	r6, r0
 8005988:	2800      	cmp	r0, #0
 800598a:	d1e1      	bne.n	8005950 <__ssputs_r+0x70>
 800598c:	6921      	ldr	r1, [r4, #16]
 800598e:	4650      	mov	r0, sl
 8005990:	f7ff fefc 	bl	800578c <_free_r>
 8005994:	e7c7      	b.n	8005926 <__ssputs_r+0x46>
	...

08005998 <_svfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4698      	mov	r8, r3
 800599e:	898b      	ldrh	r3, [r1, #12]
 80059a0:	061b      	lsls	r3, r3, #24
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4607      	mov	r7, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	d50e      	bpl.n	80059ca <_svfiprintf_r+0x32>
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	b963      	cbnz	r3, 80059ca <_svfiprintf_r+0x32>
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	f7ff ff3b 	bl	800582c <_malloc_r>
 80059b6:	6028      	str	r0, [r5, #0]
 80059b8:	6128      	str	r0, [r5, #16]
 80059ba:	b920      	cbnz	r0, 80059c6 <_svfiprintf_r+0x2e>
 80059bc:	230c      	movs	r3, #12
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e0d1      	b.n	8005b6a <_svfiprintf_r+0x1d2>
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	616b      	str	r3, [r5, #20]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	2320      	movs	r3, #32
 80059d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d8:	2330      	movs	r3, #48	; 0x30
 80059da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b84 <_svfiprintf_r+0x1ec>
 80059de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e2:	f04f 0901 	mov.w	r9, #1
 80059e6:	4623      	mov	r3, r4
 80059e8:	469a      	mov	sl, r3
 80059ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ee:	b10a      	cbz	r2, 80059f4 <_svfiprintf_r+0x5c>
 80059f0:	2a25      	cmp	r2, #37	; 0x25
 80059f2:	d1f9      	bne.n	80059e8 <_svfiprintf_r+0x50>
 80059f4:	ebba 0b04 	subs.w	fp, sl, r4
 80059f8:	d00b      	beq.n	8005a12 <_svfiprintf_r+0x7a>
 80059fa:	465b      	mov	r3, fp
 80059fc:	4622      	mov	r2, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ff6d 	bl	80058e0 <__ssputs_r>
 8005a06:	3001      	adds	r0, #1
 8005a08:	f000 80aa 	beq.w	8005b60 <_svfiprintf_r+0x1c8>
 8005a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a0e:	445a      	add	r2, fp
 8005a10:	9209      	str	r2, [sp, #36]	; 0x24
 8005a12:	f89a 3000 	ldrb.w	r3, [sl]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80a2 	beq.w	8005b60 <_svfiprintf_r+0x1c8>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a26:	f10a 0a01 	add.w	sl, sl, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	9307      	str	r3, [sp, #28]
 8005a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a32:	931a      	str	r3, [sp, #104]	; 0x68
 8005a34:	4654      	mov	r4, sl
 8005a36:	2205      	movs	r2, #5
 8005a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3c:	4851      	ldr	r0, [pc, #324]	; (8005b84 <_svfiprintf_r+0x1ec>)
 8005a3e:	f7fa fc07 	bl	8000250 <memchr>
 8005a42:	9a04      	ldr	r2, [sp, #16]
 8005a44:	b9d8      	cbnz	r0, 8005a7e <_svfiprintf_r+0xe6>
 8005a46:	06d0      	lsls	r0, r2, #27
 8005a48:	bf44      	itt	mi
 8005a4a:	2320      	movmi	r3, #32
 8005a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a50:	0711      	lsls	r1, r2, #28
 8005a52:	bf44      	itt	mi
 8005a54:	232b      	movmi	r3, #43	; 0x2b
 8005a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a60:	d015      	beq.n	8005a8e <_svfiprintf_r+0xf6>
 8005a62:	9a07      	ldr	r2, [sp, #28]
 8005a64:	4654      	mov	r4, sl
 8005a66:	2000      	movs	r0, #0
 8005a68:	f04f 0c0a 	mov.w	ip, #10
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a72:	3b30      	subs	r3, #48	; 0x30
 8005a74:	2b09      	cmp	r3, #9
 8005a76:	d94e      	bls.n	8005b16 <_svfiprintf_r+0x17e>
 8005a78:	b1b0      	cbz	r0, 8005aa8 <_svfiprintf_r+0x110>
 8005a7a:	9207      	str	r2, [sp, #28]
 8005a7c:	e014      	b.n	8005aa8 <_svfiprintf_r+0x110>
 8005a7e:	eba0 0308 	sub.w	r3, r0, r8
 8005a82:	fa09 f303 	lsl.w	r3, r9, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	46a2      	mov	sl, r4
 8005a8c:	e7d2      	b.n	8005a34 <_svfiprintf_r+0x9c>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	1d19      	adds	r1, r3, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	9103      	str	r1, [sp, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfbb      	ittet	lt
 8005a9a:	425b      	neglt	r3, r3
 8005a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa0:	9307      	strge	r3, [sp, #28]
 8005aa2:	9307      	strlt	r3, [sp, #28]
 8005aa4:	bfb8      	it	lt
 8005aa6:	9204      	strlt	r2, [sp, #16]
 8005aa8:	7823      	ldrb	r3, [r4, #0]
 8005aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8005aac:	d10c      	bne.n	8005ac8 <_svfiprintf_r+0x130>
 8005aae:	7863      	ldrb	r3, [r4, #1]
 8005ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab2:	d135      	bne.n	8005b20 <_svfiprintf_r+0x188>
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	1d1a      	adds	r2, r3, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	9203      	str	r2, [sp, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	bfb8      	it	lt
 8005ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ac4:	3402      	adds	r4, #2
 8005ac6:	9305      	str	r3, [sp, #20]
 8005ac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b94 <_svfiprintf_r+0x1fc>
 8005acc:	7821      	ldrb	r1, [r4, #0]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	f7fa fbbd 	bl	8000250 <memchr>
 8005ad6:	b140      	cbz	r0, 8005aea <_svfiprintf_r+0x152>
 8005ad8:	2340      	movs	r3, #64	; 0x40
 8005ada:	eba0 000a 	sub.w	r0, r0, sl
 8005ade:	fa03 f000 	lsl.w	r0, r3, r0
 8005ae2:	9b04      	ldr	r3, [sp, #16]
 8005ae4:	4303      	orrs	r3, r0
 8005ae6:	3401      	adds	r4, #1
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aee:	4826      	ldr	r0, [pc, #152]	; (8005b88 <_svfiprintf_r+0x1f0>)
 8005af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005af4:	2206      	movs	r2, #6
 8005af6:	f7fa fbab 	bl	8000250 <memchr>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d038      	beq.n	8005b70 <_svfiprintf_r+0x1d8>
 8005afe:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <_svfiprintf_r+0x1f4>)
 8005b00:	bb1b      	cbnz	r3, 8005b4a <_svfiprintf_r+0x1b2>
 8005b02:	9b03      	ldr	r3, [sp, #12]
 8005b04:	3307      	adds	r3, #7
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b10:	4433      	add	r3, r6
 8005b12:	9309      	str	r3, [sp, #36]	; 0x24
 8005b14:	e767      	b.n	80059e6 <_svfiprintf_r+0x4e>
 8005b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	e7a5      	b.n	8005a6c <_svfiprintf_r+0xd4>
 8005b20:	2300      	movs	r3, #0
 8005b22:	3401      	adds	r4, #1
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	4619      	mov	r1, r3
 8005b28:	f04f 0c0a 	mov.w	ip, #10
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b32:	3a30      	subs	r2, #48	; 0x30
 8005b34:	2a09      	cmp	r2, #9
 8005b36:	d903      	bls.n	8005b40 <_svfiprintf_r+0x1a8>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0c5      	beq.n	8005ac8 <_svfiprintf_r+0x130>
 8005b3c:	9105      	str	r1, [sp, #20]
 8005b3e:	e7c3      	b.n	8005ac8 <_svfiprintf_r+0x130>
 8005b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b44:	4604      	mov	r4, r0
 8005b46:	2301      	movs	r3, #1
 8005b48:	e7f0      	b.n	8005b2c <_svfiprintf_r+0x194>
 8005b4a:	ab03      	add	r3, sp, #12
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	462a      	mov	r2, r5
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <_svfiprintf_r+0x1f8>)
 8005b52:	a904      	add	r1, sp, #16
 8005b54:	4638      	mov	r0, r7
 8005b56:	f7fe f88f 	bl	8003c78 <_printf_float>
 8005b5a:	1c42      	adds	r2, r0, #1
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	d1d6      	bne.n	8005b0e <_svfiprintf_r+0x176>
 8005b60:	89ab      	ldrh	r3, [r5, #12]
 8005b62:	065b      	lsls	r3, r3, #25
 8005b64:	f53f af2c 	bmi.w	80059c0 <_svfiprintf_r+0x28>
 8005b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b6a:	b01d      	add	sp, #116	; 0x74
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	ab03      	add	r3, sp, #12
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	462a      	mov	r2, r5
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <_svfiprintf_r+0x1f8>)
 8005b78:	a904      	add	r1, sp, #16
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f7fe fb08 	bl	8004190 <_printf_i>
 8005b80:	e7eb      	b.n	8005b5a <_svfiprintf_r+0x1c2>
 8005b82:	bf00      	nop
 8005b84:	08006aa4 	.word	0x08006aa4
 8005b88:	08006aae 	.word	0x08006aae
 8005b8c:	08003c79 	.word	0x08003c79
 8005b90:	080058e1 	.word	0x080058e1
 8005b94:	08006aaa 	.word	0x08006aaa

08005b98 <_sbrk_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	; (8005bb4 <_sbrk_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f000 fe14 	bl	80067d0 <_sbrk>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_sbrk_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_sbrk_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200002e4 	.word	0x200002e4

08005bb8 <__assert_func>:
 8005bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bba:	4614      	mov	r4, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <__assert_func+0x2c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	68d8      	ldr	r0, [r3, #12]
 8005bc6:	b14c      	cbz	r4, 8005bdc <__assert_func+0x24>
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <__assert_func+0x30>)
 8005bca:	9100      	str	r1, [sp, #0]
 8005bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bd0:	4906      	ldr	r1, [pc, #24]	; (8005bec <__assert_func+0x34>)
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f000 f80e 	bl	8005bf4 <fiprintf>
 8005bd8:	f000 faa4 	bl	8006124 <abort>
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <__assert_func+0x38>)
 8005bde:	461c      	mov	r4, r3
 8005be0:	e7f3      	b.n	8005bca <__assert_func+0x12>
 8005be2:	bf00      	nop
 8005be4:	2000000c 	.word	0x2000000c
 8005be8:	08006ab5 	.word	0x08006ab5
 8005bec:	08006ac2 	.word	0x08006ac2
 8005bf0:	08006af0 	.word	0x08006af0

08005bf4 <fiprintf>:
 8005bf4:	b40e      	push	{r1, r2, r3}
 8005bf6:	b503      	push	{r0, r1, lr}
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	4805      	ldr	r0, [pc, #20]	; (8005c14 <fiprintf+0x20>)
 8005bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f000 f88f 	bl	8005d28 <_vfiprintf_r>
 8005c0a:	b002      	add	sp, #8
 8005c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c10:	b003      	add	sp, #12
 8005c12:	4770      	bx	lr
 8005c14:	2000000c 	.word	0x2000000c

08005c18 <__ascii_mbtowc>:
 8005c18:	b082      	sub	sp, #8
 8005c1a:	b901      	cbnz	r1, 8005c1e <__ascii_mbtowc+0x6>
 8005c1c:	a901      	add	r1, sp, #4
 8005c1e:	b142      	cbz	r2, 8005c32 <__ascii_mbtowc+0x1a>
 8005c20:	b14b      	cbz	r3, 8005c36 <__ascii_mbtowc+0x1e>
 8005c22:	7813      	ldrb	r3, [r2, #0]
 8005c24:	600b      	str	r3, [r1, #0]
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	1e10      	subs	r0, r2, #0
 8005c2a:	bf18      	it	ne
 8005c2c:	2001      	movne	r0, #1
 8005c2e:	b002      	add	sp, #8
 8005c30:	4770      	bx	lr
 8005c32:	4610      	mov	r0, r2
 8005c34:	e7fb      	b.n	8005c2e <__ascii_mbtowc+0x16>
 8005c36:	f06f 0001 	mvn.w	r0, #1
 8005c3a:	e7f8      	b.n	8005c2e <__ascii_mbtowc+0x16>

08005c3c <memmove>:
 8005c3c:	4288      	cmp	r0, r1
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	eb01 0402 	add.w	r4, r1, r2
 8005c44:	d902      	bls.n	8005c4c <memmove+0x10>
 8005c46:	4284      	cmp	r4, r0
 8005c48:	4623      	mov	r3, r4
 8005c4a:	d807      	bhi.n	8005c5c <memmove+0x20>
 8005c4c:	1e43      	subs	r3, r0, #1
 8005c4e:	42a1      	cmp	r1, r4
 8005c50:	d008      	beq.n	8005c64 <memmove+0x28>
 8005c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c5a:	e7f8      	b.n	8005c4e <memmove+0x12>
 8005c5c:	4402      	add	r2, r0
 8005c5e:	4601      	mov	r1, r0
 8005c60:	428a      	cmp	r2, r1
 8005c62:	d100      	bne.n	8005c66 <memmove+0x2a>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c6e:	e7f7      	b.n	8005c60 <memmove+0x24>

08005c70 <__malloc_lock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__malloc_lock+0x8>)
 8005c72:	f000 bc17 	b.w	80064a4 <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	200002ec 	.word	0x200002ec

08005c7c <__malloc_unlock>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__malloc_unlock+0x8>)
 8005c7e:	f000 bc12 	b.w	80064a6 <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	200002ec 	.word	0x200002ec

08005c88 <_realloc_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	460e      	mov	r6, r1
 8005c90:	b921      	cbnz	r1, 8005c9c <_realloc_r+0x14>
 8005c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c96:	4611      	mov	r1, r2
 8005c98:	f7ff bdc8 	b.w	800582c <_malloc_r>
 8005c9c:	b922      	cbnz	r2, 8005ca8 <_realloc_r+0x20>
 8005c9e:	f7ff fd75 	bl	800578c <_free_r>
 8005ca2:	4625      	mov	r5, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca8:	f000 fc62 	bl	8006570 <_malloc_usable_size_r>
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d20f      	bcs.n	8005cd0 <_realloc_r+0x48>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	f7ff fdba 	bl	800582c <_malloc_r>
 8005cb8:	4605      	mov	r5, r0
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d0f2      	beq.n	8005ca4 <_realloc_r+0x1c>
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	f7ff f9c7 	bl	8005054 <memcpy>
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff fd5f 	bl	800578c <_free_r>
 8005cce:	e7e9      	b.n	8005ca4 <_realloc_r+0x1c>
 8005cd0:	4635      	mov	r5, r6
 8005cd2:	e7e7      	b.n	8005ca4 <_realloc_r+0x1c>

08005cd4 <__sfputc_r>:
 8005cd4:	6893      	ldr	r3, [r2, #8]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	b410      	push	{r4}
 8005cdc:	6093      	str	r3, [r2, #8]
 8005cde:	da08      	bge.n	8005cf2 <__sfputc_r+0x1e>
 8005ce0:	6994      	ldr	r4, [r2, #24]
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	db01      	blt.n	8005cea <__sfputc_r+0x16>
 8005ce6:	290a      	cmp	r1, #10
 8005ce8:	d103      	bne.n	8005cf2 <__sfputc_r+0x1e>
 8005cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cee:	f000 b94b 	b.w	8005f88 <__swbuf_r>
 8005cf2:	6813      	ldr	r3, [r2, #0]
 8005cf4:	1c58      	adds	r0, r3, #1
 8005cf6:	6010      	str	r0, [r2, #0]
 8005cf8:	7019      	strb	r1, [r3, #0]
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <__sfputs_r>:
 8005d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	4614      	mov	r4, r2
 8005d0a:	18d5      	adds	r5, r2, r3
 8005d0c:	42ac      	cmp	r4, r5
 8005d0e:	d101      	bne.n	8005d14 <__sfputs_r+0x12>
 8005d10:	2000      	movs	r0, #0
 8005d12:	e007      	b.n	8005d24 <__sfputs_r+0x22>
 8005d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d18:	463a      	mov	r2, r7
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7ff ffda 	bl	8005cd4 <__sfputc_r>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d1f3      	bne.n	8005d0c <__sfputs_r+0xa>
 8005d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d28 <_vfiprintf_r>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	b09d      	sub	sp, #116	; 0x74
 8005d30:	4614      	mov	r4, r2
 8005d32:	4698      	mov	r8, r3
 8005d34:	4606      	mov	r6, r0
 8005d36:	b118      	cbz	r0, 8005d40 <_vfiprintf_r+0x18>
 8005d38:	6983      	ldr	r3, [r0, #24]
 8005d3a:	b90b      	cbnz	r3, 8005d40 <_vfiprintf_r+0x18>
 8005d3c:	f000 fb14 	bl	8006368 <__sinit>
 8005d40:	4b89      	ldr	r3, [pc, #548]	; (8005f68 <_vfiprintf_r+0x240>)
 8005d42:	429d      	cmp	r5, r3
 8005d44:	d11b      	bne.n	8005d7e <_vfiprintf_r+0x56>
 8005d46:	6875      	ldr	r5, [r6, #4]
 8005d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d4a:	07d9      	lsls	r1, r3, #31
 8005d4c:	d405      	bmi.n	8005d5a <_vfiprintf_r+0x32>
 8005d4e:	89ab      	ldrh	r3, [r5, #12]
 8005d50:	059a      	lsls	r2, r3, #22
 8005d52:	d402      	bmi.n	8005d5a <_vfiprintf_r+0x32>
 8005d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d56:	f000 fba5 	bl	80064a4 <__retarget_lock_acquire_recursive>
 8005d5a:	89ab      	ldrh	r3, [r5, #12]
 8005d5c:	071b      	lsls	r3, r3, #28
 8005d5e:	d501      	bpl.n	8005d64 <_vfiprintf_r+0x3c>
 8005d60:	692b      	ldr	r3, [r5, #16]
 8005d62:	b9eb      	cbnz	r3, 8005da0 <_vfiprintf_r+0x78>
 8005d64:	4629      	mov	r1, r5
 8005d66:	4630      	mov	r0, r6
 8005d68:	f000 f96e 	bl	8006048 <__swsetup_r>
 8005d6c:	b1c0      	cbz	r0, 8005da0 <_vfiprintf_r+0x78>
 8005d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d70:	07dc      	lsls	r4, r3, #31
 8005d72:	d50e      	bpl.n	8005d92 <_vfiprintf_r+0x6a>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	b01d      	add	sp, #116	; 0x74
 8005d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7e:	4b7b      	ldr	r3, [pc, #492]	; (8005f6c <_vfiprintf_r+0x244>)
 8005d80:	429d      	cmp	r5, r3
 8005d82:	d101      	bne.n	8005d88 <_vfiprintf_r+0x60>
 8005d84:	68b5      	ldr	r5, [r6, #8]
 8005d86:	e7df      	b.n	8005d48 <_vfiprintf_r+0x20>
 8005d88:	4b79      	ldr	r3, [pc, #484]	; (8005f70 <_vfiprintf_r+0x248>)
 8005d8a:	429d      	cmp	r5, r3
 8005d8c:	bf08      	it	eq
 8005d8e:	68f5      	ldreq	r5, [r6, #12]
 8005d90:	e7da      	b.n	8005d48 <_vfiprintf_r+0x20>
 8005d92:	89ab      	ldrh	r3, [r5, #12]
 8005d94:	0598      	lsls	r0, r3, #22
 8005d96:	d4ed      	bmi.n	8005d74 <_vfiprintf_r+0x4c>
 8005d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d9a:	f000 fb84 	bl	80064a6 <__retarget_lock_release_recursive>
 8005d9e:	e7e9      	b.n	8005d74 <_vfiprintf_r+0x4c>
 8005da0:	2300      	movs	r3, #0
 8005da2:	9309      	str	r3, [sp, #36]	; 0x24
 8005da4:	2320      	movs	r3, #32
 8005da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dae:	2330      	movs	r3, #48	; 0x30
 8005db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f74 <_vfiprintf_r+0x24c>
 8005db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005db8:	f04f 0901 	mov.w	r9, #1
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	469a      	mov	sl, r3
 8005dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dc4:	b10a      	cbz	r2, 8005dca <_vfiprintf_r+0xa2>
 8005dc6:	2a25      	cmp	r2, #37	; 0x25
 8005dc8:	d1f9      	bne.n	8005dbe <_vfiprintf_r+0x96>
 8005dca:	ebba 0b04 	subs.w	fp, sl, r4
 8005dce:	d00b      	beq.n	8005de8 <_vfiprintf_r+0xc0>
 8005dd0:	465b      	mov	r3, fp
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff ff93 	bl	8005d02 <__sfputs_r>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f000 80aa 	beq.w	8005f36 <_vfiprintf_r+0x20e>
 8005de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de4:	445a      	add	r2, fp
 8005de6:	9209      	str	r2, [sp, #36]	; 0x24
 8005de8:	f89a 3000 	ldrb.w	r3, [sl]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80a2 	beq.w	8005f36 <_vfiprintf_r+0x20e>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f04f 32ff 	mov.w	r2, #4294967295
 8005df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dfc:	f10a 0a01 	add.w	sl, sl, #1
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	9307      	str	r3, [sp, #28]
 8005e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e08:	931a      	str	r3, [sp, #104]	; 0x68
 8005e0a:	4654      	mov	r4, sl
 8005e0c:	2205      	movs	r2, #5
 8005e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e12:	4858      	ldr	r0, [pc, #352]	; (8005f74 <_vfiprintf_r+0x24c>)
 8005e14:	f7fa fa1c 	bl	8000250 <memchr>
 8005e18:	9a04      	ldr	r2, [sp, #16]
 8005e1a:	b9d8      	cbnz	r0, 8005e54 <_vfiprintf_r+0x12c>
 8005e1c:	06d1      	lsls	r1, r2, #27
 8005e1e:	bf44      	itt	mi
 8005e20:	2320      	movmi	r3, #32
 8005e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e26:	0713      	lsls	r3, r2, #28
 8005e28:	bf44      	itt	mi
 8005e2a:	232b      	movmi	r3, #43	; 0x2b
 8005e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e30:	f89a 3000 	ldrb.w	r3, [sl]
 8005e34:	2b2a      	cmp	r3, #42	; 0x2a
 8005e36:	d015      	beq.n	8005e64 <_vfiprintf_r+0x13c>
 8005e38:	9a07      	ldr	r2, [sp, #28]
 8005e3a:	4654      	mov	r4, sl
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f04f 0c0a 	mov.w	ip, #10
 8005e42:	4621      	mov	r1, r4
 8005e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e48:	3b30      	subs	r3, #48	; 0x30
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	d94e      	bls.n	8005eec <_vfiprintf_r+0x1c4>
 8005e4e:	b1b0      	cbz	r0, 8005e7e <_vfiprintf_r+0x156>
 8005e50:	9207      	str	r2, [sp, #28]
 8005e52:	e014      	b.n	8005e7e <_vfiprintf_r+0x156>
 8005e54:	eba0 0308 	sub.w	r3, r0, r8
 8005e58:	fa09 f303 	lsl.w	r3, r9, r3
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	46a2      	mov	sl, r4
 8005e62:	e7d2      	b.n	8005e0a <_vfiprintf_r+0xe2>
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	1d19      	adds	r1, r3, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	9103      	str	r1, [sp, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bfbb      	ittet	lt
 8005e70:	425b      	neglt	r3, r3
 8005e72:	f042 0202 	orrlt.w	r2, r2, #2
 8005e76:	9307      	strge	r3, [sp, #28]
 8005e78:	9307      	strlt	r3, [sp, #28]
 8005e7a:	bfb8      	it	lt
 8005e7c:	9204      	strlt	r2, [sp, #16]
 8005e7e:	7823      	ldrb	r3, [r4, #0]
 8005e80:	2b2e      	cmp	r3, #46	; 0x2e
 8005e82:	d10c      	bne.n	8005e9e <_vfiprintf_r+0x176>
 8005e84:	7863      	ldrb	r3, [r4, #1]
 8005e86:	2b2a      	cmp	r3, #42	; 0x2a
 8005e88:	d135      	bne.n	8005ef6 <_vfiprintf_r+0x1ce>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	1d1a      	adds	r2, r3, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	9203      	str	r2, [sp, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfb8      	it	lt
 8005e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e9a:	3402      	adds	r4, #2
 8005e9c:	9305      	str	r3, [sp, #20]
 8005e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f84 <_vfiprintf_r+0x25c>
 8005ea2:	7821      	ldrb	r1, [r4, #0]
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	f7fa f9d2 	bl	8000250 <memchr>
 8005eac:	b140      	cbz	r0, 8005ec0 <_vfiprintf_r+0x198>
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	eba0 000a 	sub.w	r0, r0, sl
 8005eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005eb8:	9b04      	ldr	r3, [sp, #16]
 8005eba:	4303      	orrs	r3, r0
 8005ebc:	3401      	adds	r4, #1
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	482c      	ldr	r0, [pc, #176]	; (8005f78 <_vfiprintf_r+0x250>)
 8005ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eca:	2206      	movs	r2, #6
 8005ecc:	f7fa f9c0 	bl	8000250 <memchr>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d03f      	beq.n	8005f54 <_vfiprintf_r+0x22c>
 8005ed4:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <_vfiprintf_r+0x254>)
 8005ed6:	bb1b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x1f8>
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	3307      	adds	r3, #7
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee6:	443b      	add	r3, r7
 8005ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eea:	e767      	b.n	8005dbc <_vfiprintf_r+0x94>
 8005eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	e7a5      	b.n	8005e42 <_vfiprintf_r+0x11a>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	3401      	adds	r4, #1
 8005efa:	9305      	str	r3, [sp, #20]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f04f 0c0a 	mov.w	ip, #10
 8005f02:	4620      	mov	r0, r4
 8005f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f08:	3a30      	subs	r2, #48	; 0x30
 8005f0a:	2a09      	cmp	r2, #9
 8005f0c:	d903      	bls.n	8005f16 <_vfiprintf_r+0x1ee>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0c5      	beq.n	8005e9e <_vfiprintf_r+0x176>
 8005f12:	9105      	str	r1, [sp, #20]
 8005f14:	e7c3      	b.n	8005e9e <_vfiprintf_r+0x176>
 8005f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e7f0      	b.n	8005f02 <_vfiprintf_r+0x1da>
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <_vfiprintf_r+0x258>)
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7fd fea4 	bl	8003c78 <_printf_float>
 8005f30:	4607      	mov	r7, r0
 8005f32:	1c78      	adds	r0, r7, #1
 8005f34:	d1d6      	bne.n	8005ee4 <_vfiprintf_r+0x1bc>
 8005f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f38:	07d9      	lsls	r1, r3, #31
 8005f3a:	d405      	bmi.n	8005f48 <_vfiprintf_r+0x220>
 8005f3c:	89ab      	ldrh	r3, [r5, #12]
 8005f3e:	059a      	lsls	r2, r3, #22
 8005f40:	d402      	bmi.n	8005f48 <_vfiprintf_r+0x220>
 8005f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f44:	f000 faaf 	bl	80064a6 <__retarget_lock_release_recursive>
 8005f48:	89ab      	ldrh	r3, [r5, #12]
 8005f4a:	065b      	lsls	r3, r3, #25
 8005f4c:	f53f af12 	bmi.w	8005d74 <_vfiprintf_r+0x4c>
 8005f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f52:	e711      	b.n	8005d78 <_vfiprintf_r+0x50>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <_vfiprintf_r+0x258>)
 8005f5c:	a904      	add	r1, sp, #16
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f7fe f916 	bl	8004190 <_printf_i>
 8005f64:	e7e4      	b.n	8005f30 <_vfiprintf_r+0x208>
 8005f66:	bf00      	nop
 8005f68:	08006c1c 	.word	0x08006c1c
 8005f6c:	08006c3c 	.word	0x08006c3c
 8005f70:	08006bfc 	.word	0x08006bfc
 8005f74:	08006aa4 	.word	0x08006aa4
 8005f78:	08006aae 	.word	0x08006aae
 8005f7c:	08003c79 	.word	0x08003c79
 8005f80:	08005d03 	.word	0x08005d03
 8005f84:	08006aaa 	.word	0x08006aaa

08005f88 <__swbuf_r>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	4605      	mov	r5, r0
 8005f90:	b118      	cbz	r0, 8005f9a <__swbuf_r+0x12>
 8005f92:	6983      	ldr	r3, [r0, #24]
 8005f94:	b90b      	cbnz	r3, 8005f9a <__swbuf_r+0x12>
 8005f96:	f000 f9e7 	bl	8006368 <__sinit>
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <__swbuf_r+0x98>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d12b      	bne.n	8005ff8 <__swbuf_r+0x70>
 8005fa0:	686c      	ldr	r4, [r5, #4]
 8005fa2:	69a3      	ldr	r3, [r4, #24]
 8005fa4:	60a3      	str	r3, [r4, #8]
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	071a      	lsls	r2, r3, #28
 8005faa:	d52f      	bpl.n	800600c <__swbuf_r+0x84>
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	b36b      	cbz	r3, 800600c <__swbuf_r+0x84>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	1ac0      	subs	r0, r0, r3
 8005fb6:	6963      	ldr	r3, [r4, #20]
 8005fb8:	b2f6      	uxtb	r6, r6
 8005fba:	4283      	cmp	r3, r0
 8005fbc:	4637      	mov	r7, r6
 8005fbe:	dc04      	bgt.n	8005fca <__swbuf_r+0x42>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f93c 	bl	8006240 <_fflush_r>
 8005fc8:	bb30      	cbnz	r0, 8006018 <__swbuf_r+0x90>
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	6022      	str	r2, [r4, #0]
 8005fd6:	701e      	strb	r6, [r3, #0]
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	3001      	adds	r0, #1
 8005fdc:	4283      	cmp	r3, r0
 8005fde:	d004      	beq.n	8005fea <__swbuf_r+0x62>
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	07db      	lsls	r3, r3, #31
 8005fe4:	d506      	bpl.n	8005ff4 <__swbuf_r+0x6c>
 8005fe6:	2e0a      	cmp	r6, #10
 8005fe8:	d104      	bne.n	8005ff4 <__swbuf_r+0x6c>
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f927 	bl	8006240 <_fflush_r>
 8005ff2:	b988      	cbnz	r0, 8006018 <__swbuf_r+0x90>
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <__swbuf_r+0x9c>)
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d101      	bne.n	8006002 <__swbuf_r+0x7a>
 8005ffe:	68ac      	ldr	r4, [r5, #8]
 8006000:	e7cf      	b.n	8005fa2 <__swbuf_r+0x1a>
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <__swbuf_r+0xa0>)
 8006004:	429c      	cmp	r4, r3
 8006006:	bf08      	it	eq
 8006008:	68ec      	ldreq	r4, [r5, #12]
 800600a:	e7ca      	b.n	8005fa2 <__swbuf_r+0x1a>
 800600c:	4621      	mov	r1, r4
 800600e:	4628      	mov	r0, r5
 8006010:	f000 f81a 	bl	8006048 <__swsetup_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	d0cb      	beq.n	8005fb0 <__swbuf_r+0x28>
 8006018:	f04f 37ff 	mov.w	r7, #4294967295
 800601c:	e7ea      	b.n	8005ff4 <__swbuf_r+0x6c>
 800601e:	bf00      	nop
 8006020:	08006c1c 	.word	0x08006c1c
 8006024:	08006c3c 	.word	0x08006c3c
 8006028:	08006bfc 	.word	0x08006bfc

0800602c <__ascii_wctomb>:
 800602c:	b149      	cbz	r1, 8006042 <__ascii_wctomb+0x16>
 800602e:	2aff      	cmp	r2, #255	; 0xff
 8006030:	bf85      	ittet	hi
 8006032:	238a      	movhi	r3, #138	; 0x8a
 8006034:	6003      	strhi	r3, [r0, #0]
 8006036:	700a      	strbls	r2, [r1, #0]
 8006038:	f04f 30ff 	movhi.w	r0, #4294967295
 800603c:	bf98      	it	ls
 800603e:	2001      	movls	r0, #1
 8006040:	4770      	bx	lr
 8006042:	4608      	mov	r0, r1
 8006044:	4770      	bx	lr
	...

08006048 <__swsetup_r>:
 8006048:	4b32      	ldr	r3, [pc, #200]	; (8006114 <__swsetup_r+0xcc>)
 800604a:	b570      	push	{r4, r5, r6, lr}
 800604c:	681d      	ldr	r5, [r3, #0]
 800604e:	4606      	mov	r6, r0
 8006050:	460c      	mov	r4, r1
 8006052:	b125      	cbz	r5, 800605e <__swsetup_r+0x16>
 8006054:	69ab      	ldr	r3, [r5, #24]
 8006056:	b913      	cbnz	r3, 800605e <__swsetup_r+0x16>
 8006058:	4628      	mov	r0, r5
 800605a:	f000 f985 	bl	8006368 <__sinit>
 800605e:	4b2e      	ldr	r3, [pc, #184]	; (8006118 <__swsetup_r+0xd0>)
 8006060:	429c      	cmp	r4, r3
 8006062:	d10f      	bne.n	8006084 <__swsetup_r+0x3c>
 8006064:	686c      	ldr	r4, [r5, #4]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800606c:	0719      	lsls	r1, r3, #28
 800606e:	d42c      	bmi.n	80060ca <__swsetup_r+0x82>
 8006070:	06dd      	lsls	r5, r3, #27
 8006072:	d411      	bmi.n	8006098 <__swsetup_r+0x50>
 8006074:	2309      	movs	r3, #9
 8006076:	6033      	str	r3, [r6, #0]
 8006078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	f04f 30ff 	mov.w	r0, #4294967295
 8006082:	e03e      	b.n	8006102 <__swsetup_r+0xba>
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <__swsetup_r+0xd4>)
 8006086:	429c      	cmp	r4, r3
 8006088:	d101      	bne.n	800608e <__swsetup_r+0x46>
 800608a:	68ac      	ldr	r4, [r5, #8]
 800608c:	e7eb      	b.n	8006066 <__swsetup_r+0x1e>
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <__swsetup_r+0xd8>)
 8006090:	429c      	cmp	r4, r3
 8006092:	bf08      	it	eq
 8006094:	68ec      	ldreq	r4, [r5, #12]
 8006096:	e7e6      	b.n	8006066 <__swsetup_r+0x1e>
 8006098:	0758      	lsls	r0, r3, #29
 800609a:	d512      	bpl.n	80060c2 <__swsetup_r+0x7a>
 800609c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800609e:	b141      	cbz	r1, 80060b2 <__swsetup_r+0x6a>
 80060a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d002      	beq.n	80060ae <__swsetup_r+0x66>
 80060a8:	4630      	mov	r0, r6
 80060aa:	f7ff fb6f 	bl	800578c <_free_r>
 80060ae:	2300      	movs	r3, #0
 80060b0:	6363      	str	r3, [r4, #52]	; 0x34
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060b8:	81a3      	strh	r3, [r4, #12]
 80060ba:	2300      	movs	r3, #0
 80060bc:	6063      	str	r3, [r4, #4]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f043 0308 	orr.w	r3, r3, #8
 80060c8:	81a3      	strh	r3, [r4, #12]
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	b94b      	cbnz	r3, 80060e2 <__swsetup_r+0x9a>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d003      	beq.n	80060e2 <__swsetup_r+0x9a>
 80060da:	4621      	mov	r1, r4
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 fa07 	bl	80064f0 <__smakebuf_r>
 80060e2:	89a0      	ldrh	r0, [r4, #12]
 80060e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e8:	f010 0301 	ands.w	r3, r0, #1
 80060ec:	d00a      	beq.n	8006104 <__swsetup_r+0xbc>
 80060ee:	2300      	movs	r3, #0
 80060f0:	60a3      	str	r3, [r4, #8]
 80060f2:	6963      	ldr	r3, [r4, #20]
 80060f4:	425b      	negs	r3, r3
 80060f6:	61a3      	str	r3, [r4, #24]
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	b943      	cbnz	r3, 800610e <__swsetup_r+0xc6>
 80060fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006100:	d1ba      	bne.n	8006078 <__swsetup_r+0x30>
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	0781      	lsls	r1, r0, #30
 8006106:	bf58      	it	pl
 8006108:	6963      	ldrpl	r3, [r4, #20]
 800610a:	60a3      	str	r3, [r4, #8]
 800610c:	e7f4      	b.n	80060f8 <__swsetup_r+0xb0>
 800610e:	2000      	movs	r0, #0
 8006110:	e7f7      	b.n	8006102 <__swsetup_r+0xba>
 8006112:	bf00      	nop
 8006114:	2000000c 	.word	0x2000000c
 8006118:	08006c1c 	.word	0x08006c1c
 800611c:	08006c3c 	.word	0x08006c3c
 8006120:	08006bfc 	.word	0x08006bfc

08006124 <abort>:
 8006124:	b508      	push	{r3, lr}
 8006126:	2006      	movs	r0, #6
 8006128:	f000 fa52 	bl	80065d0 <raise>
 800612c:	2001      	movs	r0, #1
 800612e:	f000 fb65 	bl	80067fc <_exit>
	...

08006134 <__sflush_r>:
 8006134:	898a      	ldrh	r2, [r1, #12]
 8006136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613a:	4605      	mov	r5, r0
 800613c:	0710      	lsls	r0, r2, #28
 800613e:	460c      	mov	r4, r1
 8006140:	d458      	bmi.n	80061f4 <__sflush_r+0xc0>
 8006142:	684b      	ldr	r3, [r1, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dc05      	bgt.n	8006154 <__sflush_r+0x20>
 8006148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	dc02      	bgt.n	8006154 <__sflush_r+0x20>
 800614e:	2000      	movs	r0, #0
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006156:	2e00      	cmp	r6, #0
 8006158:	d0f9      	beq.n	800614e <__sflush_r+0x1a>
 800615a:	2300      	movs	r3, #0
 800615c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006160:	682f      	ldr	r7, [r5, #0]
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	d032      	beq.n	80061cc <__sflush_r+0x98>
 8006166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	075a      	lsls	r2, r3, #29
 800616c:	d505      	bpl.n	800617a <__sflush_r+0x46>
 800616e:	6863      	ldr	r3, [r4, #4]
 8006170:	1ac0      	subs	r0, r0, r3
 8006172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006174:	b10b      	cbz	r3, 800617a <__sflush_r+0x46>
 8006176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006178:	1ac0      	subs	r0, r0, r3
 800617a:	2300      	movs	r3, #0
 800617c:	4602      	mov	r2, r0
 800617e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006180:	6a21      	ldr	r1, [r4, #32]
 8006182:	4628      	mov	r0, r5
 8006184:	47b0      	blx	r6
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	d106      	bne.n	800619a <__sflush_r+0x66>
 800618c:	6829      	ldr	r1, [r5, #0]
 800618e:	291d      	cmp	r1, #29
 8006190:	d82c      	bhi.n	80061ec <__sflush_r+0xb8>
 8006192:	4a2a      	ldr	r2, [pc, #168]	; (800623c <__sflush_r+0x108>)
 8006194:	40ca      	lsrs	r2, r1
 8006196:	07d6      	lsls	r6, r2, #31
 8006198:	d528      	bpl.n	80061ec <__sflush_r+0xb8>
 800619a:	2200      	movs	r2, #0
 800619c:	6062      	str	r2, [r4, #4]
 800619e:	04d9      	lsls	r1, r3, #19
 80061a0:	6922      	ldr	r2, [r4, #16]
 80061a2:	6022      	str	r2, [r4, #0]
 80061a4:	d504      	bpl.n	80061b0 <__sflush_r+0x7c>
 80061a6:	1c42      	adds	r2, r0, #1
 80061a8:	d101      	bne.n	80061ae <__sflush_r+0x7a>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	b903      	cbnz	r3, 80061b0 <__sflush_r+0x7c>
 80061ae:	6560      	str	r0, [r4, #84]	; 0x54
 80061b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b2:	602f      	str	r7, [r5, #0]
 80061b4:	2900      	cmp	r1, #0
 80061b6:	d0ca      	beq.n	800614e <__sflush_r+0x1a>
 80061b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061bc:	4299      	cmp	r1, r3
 80061be:	d002      	beq.n	80061c6 <__sflush_r+0x92>
 80061c0:	4628      	mov	r0, r5
 80061c2:	f7ff fae3 	bl	800578c <_free_r>
 80061c6:	2000      	movs	r0, #0
 80061c8:	6360      	str	r0, [r4, #52]	; 0x34
 80061ca:	e7c1      	b.n	8006150 <__sflush_r+0x1c>
 80061cc:	6a21      	ldr	r1, [r4, #32]
 80061ce:	2301      	movs	r3, #1
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b0      	blx	r6
 80061d4:	1c41      	adds	r1, r0, #1
 80061d6:	d1c7      	bne.n	8006168 <__sflush_r+0x34>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0c4      	beq.n	8006168 <__sflush_r+0x34>
 80061de:	2b1d      	cmp	r3, #29
 80061e0:	d001      	beq.n	80061e6 <__sflush_r+0xb2>
 80061e2:	2b16      	cmp	r3, #22
 80061e4:	d101      	bne.n	80061ea <__sflush_r+0xb6>
 80061e6:	602f      	str	r7, [r5, #0]
 80061e8:	e7b1      	b.n	800614e <__sflush_r+0x1a>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	e7ad      	b.n	8006150 <__sflush_r+0x1c>
 80061f4:	690f      	ldr	r7, [r1, #16]
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	d0a9      	beq.n	800614e <__sflush_r+0x1a>
 80061fa:	0793      	lsls	r3, r2, #30
 80061fc:	680e      	ldr	r6, [r1, #0]
 80061fe:	bf08      	it	eq
 8006200:	694b      	ldreq	r3, [r1, #20]
 8006202:	600f      	str	r7, [r1, #0]
 8006204:	bf18      	it	ne
 8006206:	2300      	movne	r3, #0
 8006208:	eba6 0807 	sub.w	r8, r6, r7
 800620c:	608b      	str	r3, [r1, #8]
 800620e:	f1b8 0f00 	cmp.w	r8, #0
 8006212:	dd9c      	ble.n	800614e <__sflush_r+0x1a>
 8006214:	6a21      	ldr	r1, [r4, #32]
 8006216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006218:	4643      	mov	r3, r8
 800621a:	463a      	mov	r2, r7
 800621c:	4628      	mov	r0, r5
 800621e:	47b0      	blx	r6
 8006220:	2800      	cmp	r0, #0
 8006222:	dc06      	bgt.n	8006232 <__sflush_r+0xfe>
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800622a:	81a3      	strh	r3, [r4, #12]
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	e78e      	b.n	8006150 <__sflush_r+0x1c>
 8006232:	4407      	add	r7, r0
 8006234:	eba8 0800 	sub.w	r8, r8, r0
 8006238:	e7e9      	b.n	800620e <__sflush_r+0xda>
 800623a:	bf00      	nop
 800623c:	20400001 	.word	0x20400001

08006240 <_fflush_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	690b      	ldr	r3, [r1, #16]
 8006244:	4605      	mov	r5, r0
 8006246:	460c      	mov	r4, r1
 8006248:	b913      	cbnz	r3, 8006250 <_fflush_r+0x10>
 800624a:	2500      	movs	r5, #0
 800624c:	4628      	mov	r0, r5
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	b118      	cbz	r0, 800625a <_fflush_r+0x1a>
 8006252:	6983      	ldr	r3, [r0, #24]
 8006254:	b90b      	cbnz	r3, 800625a <_fflush_r+0x1a>
 8006256:	f000 f887 	bl	8006368 <__sinit>
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <_fflush_r+0x6c>)
 800625c:	429c      	cmp	r4, r3
 800625e:	d11b      	bne.n	8006298 <_fflush_r+0x58>
 8006260:	686c      	ldr	r4, [r5, #4]
 8006262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ef      	beq.n	800624a <_fflush_r+0xa>
 800626a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800626c:	07d0      	lsls	r0, r2, #31
 800626e:	d404      	bmi.n	800627a <_fflush_r+0x3a>
 8006270:	0599      	lsls	r1, r3, #22
 8006272:	d402      	bmi.n	800627a <_fflush_r+0x3a>
 8006274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006276:	f000 f915 	bl	80064a4 <__retarget_lock_acquire_recursive>
 800627a:	4628      	mov	r0, r5
 800627c:	4621      	mov	r1, r4
 800627e:	f7ff ff59 	bl	8006134 <__sflush_r>
 8006282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006284:	07da      	lsls	r2, r3, #31
 8006286:	4605      	mov	r5, r0
 8006288:	d4e0      	bmi.n	800624c <_fflush_r+0xc>
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	059b      	lsls	r3, r3, #22
 800628e:	d4dd      	bmi.n	800624c <_fflush_r+0xc>
 8006290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006292:	f000 f908 	bl	80064a6 <__retarget_lock_release_recursive>
 8006296:	e7d9      	b.n	800624c <_fflush_r+0xc>
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <_fflush_r+0x70>)
 800629a:	429c      	cmp	r4, r3
 800629c:	d101      	bne.n	80062a2 <_fflush_r+0x62>
 800629e:	68ac      	ldr	r4, [r5, #8]
 80062a0:	e7df      	b.n	8006262 <_fflush_r+0x22>
 80062a2:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <_fflush_r+0x74>)
 80062a4:	429c      	cmp	r4, r3
 80062a6:	bf08      	it	eq
 80062a8:	68ec      	ldreq	r4, [r5, #12]
 80062aa:	e7da      	b.n	8006262 <_fflush_r+0x22>
 80062ac:	08006c1c 	.word	0x08006c1c
 80062b0:	08006c3c 	.word	0x08006c3c
 80062b4:	08006bfc 	.word	0x08006bfc

080062b8 <std>:
 80062b8:	2300      	movs	r3, #0
 80062ba:	b510      	push	{r4, lr}
 80062bc:	4604      	mov	r4, r0
 80062be:	e9c0 3300 	strd	r3, r3, [r0]
 80062c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062c6:	6083      	str	r3, [r0, #8]
 80062c8:	8181      	strh	r1, [r0, #12]
 80062ca:	6643      	str	r3, [r0, #100]	; 0x64
 80062cc:	81c2      	strh	r2, [r0, #14]
 80062ce:	6183      	str	r3, [r0, #24]
 80062d0:	4619      	mov	r1, r3
 80062d2:	2208      	movs	r2, #8
 80062d4:	305c      	adds	r0, #92	; 0x5c
 80062d6:	f7fd fc35 	bl	8003b44 <memset>
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <std+0x38>)
 80062dc:	6263      	str	r3, [r4, #36]	; 0x24
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <std+0x3c>)
 80062e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <std+0x40>)
 80062e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <std+0x44>)
 80062e8:	6224      	str	r4, [r4, #32]
 80062ea:	6323      	str	r3, [r4, #48]	; 0x30
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	08006609 	.word	0x08006609
 80062f4:	0800662b 	.word	0x0800662b
 80062f8:	08006663 	.word	0x08006663
 80062fc:	08006687 	.word	0x08006687

08006300 <_cleanup_r>:
 8006300:	4901      	ldr	r1, [pc, #4]	; (8006308 <_cleanup_r+0x8>)
 8006302:	f000 b8af 	b.w	8006464 <_fwalk_reent>
 8006306:	bf00      	nop
 8006308:	08006241 	.word	0x08006241

0800630c <__sfmoreglue>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	1e4a      	subs	r2, r1, #1
 8006310:	2568      	movs	r5, #104	; 0x68
 8006312:	4355      	muls	r5, r2
 8006314:	460e      	mov	r6, r1
 8006316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800631a:	f7ff fa87 	bl	800582c <_malloc_r>
 800631e:	4604      	mov	r4, r0
 8006320:	b140      	cbz	r0, 8006334 <__sfmoreglue+0x28>
 8006322:	2100      	movs	r1, #0
 8006324:	e9c0 1600 	strd	r1, r6, [r0]
 8006328:	300c      	adds	r0, #12
 800632a:	60a0      	str	r0, [r4, #8]
 800632c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006330:	f7fd fc08 	bl	8003b44 <memset>
 8006334:	4620      	mov	r0, r4
 8006336:	bd70      	pop	{r4, r5, r6, pc}

08006338 <__sfp_lock_acquire>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__sfp_lock_acquire+0x8>)
 800633a:	f000 b8b3 	b.w	80064a4 <__retarget_lock_acquire_recursive>
 800633e:	bf00      	nop
 8006340:	200002f0 	.word	0x200002f0

08006344 <__sfp_lock_release>:
 8006344:	4801      	ldr	r0, [pc, #4]	; (800634c <__sfp_lock_release+0x8>)
 8006346:	f000 b8ae 	b.w	80064a6 <__retarget_lock_release_recursive>
 800634a:	bf00      	nop
 800634c:	200002f0 	.word	0x200002f0

08006350 <__sinit_lock_acquire>:
 8006350:	4801      	ldr	r0, [pc, #4]	; (8006358 <__sinit_lock_acquire+0x8>)
 8006352:	f000 b8a7 	b.w	80064a4 <__retarget_lock_acquire_recursive>
 8006356:	bf00      	nop
 8006358:	200002eb 	.word	0x200002eb

0800635c <__sinit_lock_release>:
 800635c:	4801      	ldr	r0, [pc, #4]	; (8006364 <__sinit_lock_release+0x8>)
 800635e:	f000 b8a2 	b.w	80064a6 <__retarget_lock_release_recursive>
 8006362:	bf00      	nop
 8006364:	200002eb 	.word	0x200002eb

08006368 <__sinit>:
 8006368:	b510      	push	{r4, lr}
 800636a:	4604      	mov	r4, r0
 800636c:	f7ff fff0 	bl	8006350 <__sinit_lock_acquire>
 8006370:	69a3      	ldr	r3, [r4, #24]
 8006372:	b11b      	cbz	r3, 800637c <__sinit+0x14>
 8006374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006378:	f7ff bff0 	b.w	800635c <__sinit_lock_release>
 800637c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006380:	6523      	str	r3, [r4, #80]	; 0x50
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <__sinit+0x68>)
 8006384:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <__sinit+0x6c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	62a2      	str	r2, [r4, #40]	; 0x28
 800638a:	42a3      	cmp	r3, r4
 800638c:	bf04      	itt	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	61a3      	streq	r3, [r4, #24]
 8006392:	4620      	mov	r0, r4
 8006394:	f000 f820 	bl	80063d8 <__sfp>
 8006398:	6060      	str	r0, [r4, #4]
 800639a:	4620      	mov	r0, r4
 800639c:	f000 f81c 	bl	80063d8 <__sfp>
 80063a0:	60a0      	str	r0, [r4, #8]
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f818 	bl	80063d8 <__sfp>
 80063a8:	2200      	movs	r2, #0
 80063aa:	60e0      	str	r0, [r4, #12]
 80063ac:	2104      	movs	r1, #4
 80063ae:	6860      	ldr	r0, [r4, #4]
 80063b0:	f7ff ff82 	bl	80062b8 <std>
 80063b4:	68a0      	ldr	r0, [r4, #8]
 80063b6:	2201      	movs	r2, #1
 80063b8:	2109      	movs	r1, #9
 80063ba:	f7ff ff7d 	bl	80062b8 <std>
 80063be:	68e0      	ldr	r0, [r4, #12]
 80063c0:	2202      	movs	r2, #2
 80063c2:	2112      	movs	r1, #18
 80063c4:	f7ff ff78 	bl	80062b8 <std>
 80063c8:	2301      	movs	r3, #1
 80063ca:	61a3      	str	r3, [r4, #24]
 80063cc:	e7d2      	b.n	8006374 <__sinit+0xc>
 80063ce:	bf00      	nop
 80063d0:	08006878 	.word	0x08006878
 80063d4:	08006301 	.word	0x08006301

080063d8 <__sfp>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	4607      	mov	r7, r0
 80063dc:	f7ff ffac 	bl	8006338 <__sfp_lock_acquire>
 80063e0:	4b1e      	ldr	r3, [pc, #120]	; (800645c <__sfp+0x84>)
 80063e2:	681e      	ldr	r6, [r3, #0]
 80063e4:	69b3      	ldr	r3, [r6, #24]
 80063e6:	b913      	cbnz	r3, 80063ee <__sfp+0x16>
 80063e8:	4630      	mov	r0, r6
 80063ea:	f7ff ffbd 	bl	8006368 <__sinit>
 80063ee:	3648      	adds	r6, #72	; 0x48
 80063f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	d503      	bpl.n	8006400 <__sfp+0x28>
 80063f8:	6833      	ldr	r3, [r6, #0]
 80063fa:	b30b      	cbz	r3, 8006440 <__sfp+0x68>
 80063fc:	6836      	ldr	r6, [r6, #0]
 80063fe:	e7f7      	b.n	80063f0 <__sfp+0x18>
 8006400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006404:	b9d5      	cbnz	r5, 800643c <__sfp+0x64>
 8006406:	4b16      	ldr	r3, [pc, #88]	; (8006460 <__sfp+0x88>)
 8006408:	60e3      	str	r3, [r4, #12]
 800640a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800640e:	6665      	str	r5, [r4, #100]	; 0x64
 8006410:	f000 f847 	bl	80064a2 <__retarget_lock_init_recursive>
 8006414:	f7ff ff96 	bl	8006344 <__sfp_lock_release>
 8006418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800641c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006420:	6025      	str	r5, [r4, #0]
 8006422:	61a5      	str	r5, [r4, #24]
 8006424:	2208      	movs	r2, #8
 8006426:	4629      	mov	r1, r5
 8006428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800642c:	f7fd fb8a 	bl	8003b44 <memset>
 8006430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006438:	4620      	mov	r0, r4
 800643a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800643c:	3468      	adds	r4, #104	; 0x68
 800643e:	e7d9      	b.n	80063f4 <__sfp+0x1c>
 8006440:	2104      	movs	r1, #4
 8006442:	4638      	mov	r0, r7
 8006444:	f7ff ff62 	bl	800630c <__sfmoreglue>
 8006448:	4604      	mov	r4, r0
 800644a:	6030      	str	r0, [r6, #0]
 800644c:	2800      	cmp	r0, #0
 800644e:	d1d5      	bne.n	80063fc <__sfp+0x24>
 8006450:	f7ff ff78 	bl	8006344 <__sfp_lock_release>
 8006454:	230c      	movs	r3, #12
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	e7ee      	b.n	8006438 <__sfp+0x60>
 800645a:	bf00      	nop
 800645c:	08006878 	.word	0x08006878
 8006460:	ffff0001 	.word	0xffff0001

08006464 <_fwalk_reent>:
 8006464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006468:	4606      	mov	r6, r0
 800646a:	4688      	mov	r8, r1
 800646c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006470:	2700      	movs	r7, #0
 8006472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006476:	f1b9 0901 	subs.w	r9, r9, #1
 800647a:	d505      	bpl.n	8006488 <_fwalk_reent+0x24>
 800647c:	6824      	ldr	r4, [r4, #0]
 800647e:	2c00      	cmp	r4, #0
 8006480:	d1f7      	bne.n	8006472 <_fwalk_reent+0xe>
 8006482:	4638      	mov	r0, r7
 8006484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006488:	89ab      	ldrh	r3, [r5, #12]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d907      	bls.n	800649e <_fwalk_reent+0x3a>
 800648e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006492:	3301      	adds	r3, #1
 8006494:	d003      	beq.n	800649e <_fwalk_reent+0x3a>
 8006496:	4629      	mov	r1, r5
 8006498:	4630      	mov	r0, r6
 800649a:	47c0      	blx	r8
 800649c:	4307      	orrs	r7, r0
 800649e:	3568      	adds	r5, #104	; 0x68
 80064a0:	e7e9      	b.n	8006476 <_fwalk_reent+0x12>

080064a2 <__retarget_lock_init_recursive>:
 80064a2:	4770      	bx	lr

080064a4 <__retarget_lock_acquire_recursive>:
 80064a4:	4770      	bx	lr

080064a6 <__retarget_lock_release_recursive>:
 80064a6:	4770      	bx	lr

080064a8 <__swhatbuf_r>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	460e      	mov	r6, r1
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	2900      	cmp	r1, #0
 80064b2:	b096      	sub	sp, #88	; 0x58
 80064b4:	4614      	mov	r4, r2
 80064b6:	461d      	mov	r5, r3
 80064b8:	da07      	bge.n	80064ca <__swhatbuf_r+0x22>
 80064ba:	2300      	movs	r3, #0
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	89b3      	ldrh	r3, [r6, #12]
 80064c0:	061a      	lsls	r2, r3, #24
 80064c2:	d410      	bmi.n	80064e6 <__swhatbuf_r+0x3e>
 80064c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c8:	e00e      	b.n	80064e8 <__swhatbuf_r+0x40>
 80064ca:	466a      	mov	r2, sp
 80064cc:	f000 f902 	bl	80066d4 <_fstat_r>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	dbf2      	blt.n	80064ba <__swhatbuf_r+0x12>
 80064d4:	9a01      	ldr	r2, [sp, #4]
 80064d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064de:	425a      	negs	r2, r3
 80064e0:	415a      	adcs	r2, r3
 80064e2:	602a      	str	r2, [r5, #0]
 80064e4:	e7ee      	b.n	80064c4 <__swhatbuf_r+0x1c>
 80064e6:	2340      	movs	r3, #64	; 0x40
 80064e8:	2000      	movs	r0, #0
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	b016      	add	sp, #88	; 0x58
 80064ee:	bd70      	pop	{r4, r5, r6, pc}

080064f0 <__smakebuf_r>:
 80064f0:	898b      	ldrh	r3, [r1, #12]
 80064f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f4:	079d      	lsls	r5, r3, #30
 80064f6:	4606      	mov	r6, r0
 80064f8:	460c      	mov	r4, r1
 80064fa:	d507      	bpl.n	800650c <__smakebuf_r+0x1c>
 80064fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	2301      	movs	r3, #1
 8006506:	6163      	str	r3, [r4, #20]
 8006508:	b002      	add	sp, #8
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	ab01      	add	r3, sp, #4
 800650e:	466a      	mov	r2, sp
 8006510:	f7ff ffca 	bl	80064a8 <__swhatbuf_r>
 8006514:	9900      	ldr	r1, [sp, #0]
 8006516:	4605      	mov	r5, r0
 8006518:	4630      	mov	r0, r6
 800651a:	f7ff f987 	bl	800582c <_malloc_r>
 800651e:	b948      	cbnz	r0, 8006534 <__smakebuf_r+0x44>
 8006520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006524:	059a      	lsls	r2, r3, #22
 8006526:	d4ef      	bmi.n	8006508 <__smakebuf_r+0x18>
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	f043 0302 	orr.w	r3, r3, #2
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	e7e3      	b.n	80064fc <__smakebuf_r+0xc>
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <__smakebuf_r+0x7c>)
 8006536:	62b3      	str	r3, [r6, #40]	; 0x28
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	6020      	str	r0, [r4, #0]
 800653c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	9b00      	ldr	r3, [sp, #0]
 8006544:	6163      	str	r3, [r4, #20]
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	6120      	str	r0, [r4, #16]
 800654a:	b15b      	cbz	r3, 8006564 <__smakebuf_r+0x74>
 800654c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f8d1 	bl	80066f8 <_isatty_r>
 8006556:	b128      	cbz	r0, 8006564 <__smakebuf_r+0x74>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	89a0      	ldrh	r0, [r4, #12]
 8006566:	4305      	orrs	r5, r0
 8006568:	81a5      	strh	r5, [r4, #12]
 800656a:	e7cd      	b.n	8006508 <__smakebuf_r+0x18>
 800656c:	08006301 	.word	0x08006301

08006570 <_malloc_usable_size_r>:
 8006570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006574:	1f18      	subs	r0, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfbc      	itt	lt
 800657a:	580b      	ldrlt	r3, [r1, r0]
 800657c:	18c0      	addlt	r0, r0, r3
 800657e:	4770      	bx	lr

08006580 <_raise_r>:
 8006580:	291f      	cmp	r1, #31
 8006582:	b538      	push	{r3, r4, r5, lr}
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	d904      	bls.n	8006594 <_raise_r+0x14>
 800658a:	2316      	movs	r3, #22
 800658c:	6003      	str	r3, [r0, #0]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006596:	b112      	cbz	r2, 800659e <_raise_r+0x1e>
 8006598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800659c:	b94b      	cbnz	r3, 80065b2 <_raise_r+0x32>
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 f830 	bl	8006604 <_getpid_r>
 80065a4:	462a      	mov	r2, r5
 80065a6:	4601      	mov	r1, r0
 80065a8:	4620      	mov	r0, r4
 80065aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ae:	f000 b817 	b.w	80065e0 <_kill_r>
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d00a      	beq.n	80065cc <_raise_r+0x4c>
 80065b6:	1c59      	adds	r1, r3, #1
 80065b8:	d103      	bne.n	80065c2 <_raise_r+0x42>
 80065ba:	2316      	movs	r3, #22
 80065bc:	6003      	str	r3, [r0, #0]
 80065be:	2001      	movs	r0, #1
 80065c0:	e7e7      	b.n	8006592 <_raise_r+0x12>
 80065c2:	2400      	movs	r4, #0
 80065c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065c8:	4628      	mov	r0, r5
 80065ca:	4798      	blx	r3
 80065cc:	2000      	movs	r0, #0
 80065ce:	e7e0      	b.n	8006592 <_raise_r+0x12>

080065d0 <raise>:
 80065d0:	4b02      	ldr	r3, [pc, #8]	; (80065dc <raise+0xc>)
 80065d2:	4601      	mov	r1, r0
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f7ff bfd3 	b.w	8006580 <_raise_r>
 80065da:	bf00      	nop
 80065dc:	2000000c 	.word	0x2000000c

080065e0 <_kill_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d07      	ldr	r5, [pc, #28]	; (8006600 <_kill_r+0x20>)
 80065e4:	2300      	movs	r3, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	602b      	str	r3, [r5, #0]
 80065ee:	f000 f8d7 	bl	80067a0 <_kill>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	d102      	bne.n	80065fc <_kill_r+0x1c>
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	b103      	cbz	r3, 80065fc <_kill_r+0x1c>
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	bd38      	pop	{r3, r4, r5, pc}
 80065fe:	bf00      	nop
 8006600:	200002e4 	.word	0x200002e4

08006604 <_getpid_r>:
 8006604:	f000 b8bc 	b.w	8006780 <_getpid>

08006608 <__sread>:
 8006608:	b510      	push	{r4, lr}
 800660a:	460c      	mov	r4, r1
 800660c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006610:	f000 f894 	bl	800673c <_read_r>
 8006614:	2800      	cmp	r0, #0
 8006616:	bfab      	itete	ge
 8006618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800661a:	89a3      	ldrhlt	r3, [r4, #12]
 800661c:	181b      	addge	r3, r3, r0
 800661e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006622:	bfac      	ite	ge
 8006624:	6563      	strge	r3, [r4, #84]	; 0x54
 8006626:	81a3      	strhlt	r3, [r4, #12]
 8006628:	bd10      	pop	{r4, pc}

0800662a <__swrite>:
 800662a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	461f      	mov	r7, r3
 8006630:	898b      	ldrh	r3, [r1, #12]
 8006632:	05db      	lsls	r3, r3, #23
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	4616      	mov	r6, r2
 800663a:	d505      	bpl.n	8006648 <__swrite+0x1e>
 800663c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006640:	2302      	movs	r3, #2
 8006642:	2200      	movs	r2, #0
 8006644:	f000 f868 	bl	8006718 <_lseek_r>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800664e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006652:	81a3      	strh	r3, [r4, #12]
 8006654:	4632      	mov	r2, r6
 8006656:	463b      	mov	r3, r7
 8006658:	4628      	mov	r0, r5
 800665a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	f000 b817 	b.w	8006690 <_write_r>

08006662 <__sseek>:
 8006662:	b510      	push	{r4, lr}
 8006664:	460c      	mov	r4, r1
 8006666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666a:	f000 f855 	bl	8006718 <_lseek_r>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	bf15      	itete	ne
 8006674:	6560      	strne	r0, [r4, #84]	; 0x54
 8006676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800667a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800667e:	81a3      	strheq	r3, [r4, #12]
 8006680:	bf18      	it	ne
 8006682:	81a3      	strhne	r3, [r4, #12]
 8006684:	bd10      	pop	{r4, pc}

08006686 <__sclose>:
 8006686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668a:	f000 b813 	b.w	80066b4 <_close_r>
	...

08006690 <_write_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d07      	ldr	r5, [pc, #28]	; (80066b0 <_write_r+0x20>)
 8006694:	4604      	mov	r4, r0
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	2200      	movs	r2, #0
 800669c:	602a      	str	r2, [r5, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 f8a4 	bl	80067ec <_write>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_write_r+0x1e>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_write_r+0x1e>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	200002e4 	.word	0x200002e4

080066b4 <_close_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	; (80066d0 <_close_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f000 f84e 	bl	8006760 <_close>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_close_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_close_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	200002e4 	.word	0x200002e4

080066d4 <_fstat_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	; (80066f4 <_fstat_r+0x20>)
 80066d8:	2300      	movs	r3, #0
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f000 f845 	bl	8006770 <_fstat>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d102      	bne.n	80066f0 <_fstat_r+0x1c>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	b103      	cbz	r3, 80066f0 <_fstat_r+0x1c>
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	bd38      	pop	{r3, r4, r5, pc}
 80066f2:	bf00      	nop
 80066f4:	200002e4 	.word	0x200002e4

080066f8 <_isatty_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	; (8006714 <_isatty_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f000 f844 	bl	8006790 <_isatty>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_isatty_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_isatty_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200002e4 	.word	0x200002e4

08006718 <_lseek_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	; (8006738 <_lseek_r+0x20>)
 800671c:	4604      	mov	r4, r0
 800671e:	4608      	mov	r0, r1
 8006720:	4611      	mov	r1, r2
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f000 f842 	bl	80067b0 <_lseek>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_lseek_r+0x1e>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_lseek_r+0x1e>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	200002e4 	.word	0x200002e4

0800673c <_read_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	; (800675c <_read_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f000 f838 	bl	80067c0 <_read>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_read_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_read_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	200002e4 	.word	0x200002e4

08006760 <_close>:
 8006760:	4b02      	ldr	r3, [pc, #8]	; (800676c <_close+0xc>)
 8006762:	2258      	movs	r2, #88	; 0x58
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f04f 30ff 	mov.w	r0, #4294967295
 800676a:	4770      	bx	lr
 800676c:	200002e4 	.word	0x200002e4

08006770 <_fstat>:
 8006770:	4b02      	ldr	r3, [pc, #8]	; (800677c <_fstat+0xc>)
 8006772:	2258      	movs	r2, #88	; 0x58
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	f04f 30ff 	mov.w	r0, #4294967295
 800677a:	4770      	bx	lr
 800677c:	200002e4 	.word	0x200002e4

08006780 <_getpid>:
 8006780:	4b02      	ldr	r3, [pc, #8]	; (800678c <_getpid+0xc>)
 8006782:	2258      	movs	r2, #88	; 0x58
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f04f 30ff 	mov.w	r0, #4294967295
 800678a:	4770      	bx	lr
 800678c:	200002e4 	.word	0x200002e4

08006790 <_isatty>:
 8006790:	4b02      	ldr	r3, [pc, #8]	; (800679c <_isatty+0xc>)
 8006792:	2258      	movs	r2, #88	; 0x58
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	2000      	movs	r0, #0
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	200002e4 	.word	0x200002e4

080067a0 <_kill>:
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <_kill+0xc>)
 80067a2:	2258      	movs	r2, #88	; 0x58
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	4770      	bx	lr
 80067ac:	200002e4 	.word	0x200002e4

080067b0 <_lseek>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <_lseek+0xc>)
 80067b2:	2258      	movs	r2, #88	; 0x58
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	4770      	bx	lr
 80067bc:	200002e4 	.word	0x200002e4

080067c0 <_read>:
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <_read+0xc>)
 80067c2:	2258      	movs	r2, #88	; 0x58
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ca:	4770      	bx	lr
 80067cc:	200002e4 	.word	0x200002e4

080067d0 <_sbrk>:
 80067d0:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <_sbrk+0x14>)
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	4602      	mov	r2, r0
 80067d6:	b909      	cbnz	r1, 80067dc <_sbrk+0xc>
 80067d8:	4903      	ldr	r1, [pc, #12]	; (80067e8 <_sbrk+0x18>)
 80067da:	6019      	str	r1, [r3, #0]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	4402      	add	r2, r0
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	4770      	bx	lr
 80067e4:	200002dc 	.word	0x200002dc
 80067e8:	200002f8 	.word	0x200002f8

080067ec <_write>:
 80067ec:	4b02      	ldr	r3, [pc, #8]	; (80067f8 <_write+0xc>)
 80067ee:	2258      	movs	r2, #88	; 0x58
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	f04f 30ff 	mov.w	r0, #4294967295
 80067f6:	4770      	bx	lr
 80067f8:	200002e4 	.word	0x200002e4

080067fc <_exit>:
 80067fc:	e7fe      	b.n	80067fc <_exit>
	...

08006800 <_init>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr

0800680c <_fini>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	bf00      	nop
 8006810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006812:	bc08      	pop	{r3}
 8006814:	469e      	mov	lr, r3
 8006816:	4770      	bx	lr
