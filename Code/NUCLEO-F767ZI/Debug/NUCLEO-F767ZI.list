
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002214  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002490  08002490  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002490  08002490  00012490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002498  08002498  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002498  08002498  00012498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08002510  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002510  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4bd  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d4  00000000  00000000  0002a55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f2f  00000000  00000000  0002c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000878a  00000000  00000000  00055417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a41  00000000  00000000  0005dba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001505e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bfc  00000000  00000000  00150638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080023fc 	.word	0x080023fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080023fc 	.word	0x080023fc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005ec:	f000 f9aa 	bl	8000944 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 80005f0:	f000 fad9 	bl	8000ba6 <HAL_SYSTICK_IRQHandler>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <main>:
#ifdef USE_UART_EXAMPLE
static inline char convert_to_Upper( char c );
#endif // USE_UART_EXAMPLE

int main( void )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fc:	f000 f965 	bl	80008ca <HAL_Init>
	// Print current settings of clocks.
	displayClkInfo();
#endif // USE_HSE_EXAMPLE

	/* Configure the system clock */
	SystemClock_Config();
 8000600:	f000 f803 	bl	800060a <_ZL18SystemClock_Configv>

	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
#endif // USE_UART_EXAMPLE

	// Print current settings of clocks.
	displayClkInfo();
 8000604:	f000 f846 	bl	8000694 <_ZL14displayClkInfov>

	while(true)
 8000608:	e7fe      	b.n	8000608 <main+0x10>

0800060a <_ZL18SystemClock_Configv>:
}

#endif // USE_UART_EXAMPLE

static void SystemClock_Config( void )
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
#endif // USE_HSE_EXAMPLE
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	std::memset( &huart3, 0, sizeof(huart3) );
 800061c:	2284      	movs	r2, #132	; 0x84
 800061e:	2100      	movs	r1, #0
 8000620:	4818      	ldr	r0, [pc, #96]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000622:	f001 faa7 	bl	8001b74 <memset>
	/* UART High level initilization */
	huart3.Instance = USART3;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <_ZL10UART3_Initv+0x70>)
 800062a:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 800062e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000632:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000648:	220c      	movs	r2, #12
 800064a:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init( &huart3 ) != HAL_OK)
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <_ZL10UART3_Initv+0x6c>)
 8000666:	f000 fd6d 	bl	8001144 <HAL_UART_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <_ZL10UART3_Initv+0x66>
	{
		// Initialization Error.
		Error_Handler();
 800067a:	f000 f807 	bl	800068c <_ZL13Error_Handlerv>
	}
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000008c 	.word	0x2000008c
 8000688:	40004800 	.word	0x40004800

0800068c <_ZL13Error_Handlerv>:
	return retVal;
}
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	for (;;);
 8000690:	e7fe      	b.n	8000690 <_ZL13Error_Handlerv+0x4>
	...

08000694 <_ZL14displayClkInfov>:
}

static void displayClkInfo( void )
{
 8000694:	b580      	push	{r7, lr}
 8000696:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800069a:	af00      	add	r7, sp, #0
	char msg[1024];

	/* Configure the UART for debug console */
	UART3_Init();
 800069c:	f7ff ffbc 	bl	8000618 <_ZL10UART3_Initv>

	std::sprintf (msg, "SYSCLK:%luMHZ\r\n", ( HAL_RCC_GetSysClockFreq() / 1000000 ) );
 80006a0:	f000 fc3a 	bl	8000f18 <HAL_RCC_GetSysClockFreq>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <_ZL14displayClkInfov+0xd8>)
 80006a8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ac:	0c9a      	lsrs	r2, r3, #18
 80006ae:	463b      	mov	r3, r7
 80006b0:	492f      	ldr	r1, [pc, #188]	; (8000770 <_ZL14displayClkInfov+0xdc>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fa66 	bl	8001b84 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 80006b8:	463b      	mov	r3, r7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdc0 	bl	8000240 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4639      	mov	r1, r7
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	482a      	ldr	r0, [pc, #168]	; (8000774 <_ZL14displayClkInfov+0xe0>)
 80006cc:	f000 fd88 	bl	80011e0 <HAL_UART_Transmit>
	std::sprintf( msg, "HCLK:%luMHZ\r\n", ( HAL_RCC_GetHCLKFreq() / 1000000 ) );
 80006d0:	f000 fd04 	bl	80010dc <HAL_RCC_GetHCLKFreq>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <_ZL14displayClkInfov+0xd8>)
 80006d8:	fba2 2303 	umull	r2, r3, r2, r3
 80006dc:	0c9a      	lsrs	r2, r3, #18
 80006de:	463b      	mov	r3, r7
 80006e0:	4925      	ldr	r1, [pc, #148]	; (8000778 <_ZL14displayClkInfov+0xe4>)
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fa4e 	bl	8001b84 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 80006e8:	463b      	mov	r3, r7
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fda8 	bl	8000240 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4639      	mov	r1, r7
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	481e      	ldr	r0, [pc, #120]	; (8000774 <_ZL14displayClkInfov+0xe0>)
 80006fc:	f000 fd70 	bl	80011e0 <HAL_UART_Transmit>
	std::sprintf( msg, "PCLK1:%luMHZ\r\n", ( HAL_RCC_GetPCLK1Freq() / 1000000 ) );
 8000700:	f000 fcf8 	bl	80010f4 <HAL_RCC_GetPCLK1Freq>
 8000704:	4603      	mov	r3, r0
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <_ZL14displayClkInfov+0xd8>)
 8000708:	fba2 2303 	umull	r2, r3, r2, r3
 800070c:	0c9a      	lsrs	r2, r3, #18
 800070e:	463b      	mov	r3, r7
 8000710:	491a      	ldr	r1, [pc, #104]	; (800077c <_ZL14displayClkInfov+0xe8>)
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fa36 	bl	8001b84 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 8000718:	463b      	mov	r3, r7
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd90 	bl	8000240 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	4639      	mov	r1, r7
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <_ZL14displayClkInfov+0xe0>)
 800072c:	f000 fd58 	bl	80011e0 <HAL_UART_Transmit>
	std::sprintf( msg, "PCLK2:%luMHZ\r\n", ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 8000730:	f000 fcf4 	bl	800111c <HAL_RCC_GetPCLK2Freq>
 8000734:	4603      	mov	r3, r0
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <_ZL14displayClkInfov+0xd8>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	0c9a      	lsrs	r2, r3, #18
 800073e:	463b      	mov	r3, r7
 8000740:	490f      	ldr	r1, [pc, #60]	; (8000780 <_ZL14displayClkInfov+0xec>)
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fa1e 	bl	8001b84 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 8000748:	463b      	mov	r3, r7
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd78 	bl	8000240 <strlen>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	4639      	mov	r1, r7
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <_ZL14displayClkInfov+0xe0>)
 800075c:	f000 fd40 	bl	80011e0 <HAL_UART_Transmit>
}
 8000760:	bf00      	nop
 8000762:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	431bde83 	.word	0x431bde83
 8000770:	08002414 	.word	0x08002414
 8000774:	2000008c 	.word	0x2000008c
 8000778:	08002424 	.word	0x08002424
 800077c:	08002434 	.word	0x08002434
 8000780:	08002444 	.word	0x08002444

08000784 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f9cb 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <HAL_MspInit+0x40>)
 8000790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <HAL_MspInit+0x40>)
 8000794:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000798:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	f06f 0009 	mvn.w	r0, #9
 80007a2:	f000 f9ca 	bl	8000b3a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	f06f 000a 	mvn.w	r0, #10
 80007ae:	f000 f9c4 	bl	8000b3a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	f06f 000b 	mvn.w	r0, #11
 80007ba:	f000 f9be 	bl	8000b3a <HAL_NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <HAL_UART_MspInit+0x84>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <HAL_UART_MspInit+0x84>)
 80007e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_UART_MspInit+0x84>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_UART_MspInit+0x84>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <HAL_UART_MspInit+0x84>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_UART_MspInit+0x84>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000810:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000814:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 8000822:	2307      	movs	r3, #7
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &USART3_gpio_config);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <HAL_UART_MspInit+0x88>)
 800082e:	f000 f9c7 	bl	8000bc0 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority(USART3_IRQn, 0x0F, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	2027      	movs	r0, #39	; 0x27
 8000838:	f000 f97f 	bl	8000b3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 800083c:	2027      	movs	r0, #39	; 0x27
 800083e:	f000 f998 	bl	8000b72 <HAL_NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	; 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40020c00 	.word	0x40020c00

08000854 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800087e:	490e      	ldr	r1, [pc, #56]	; (80008b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000894:	4c0b      	ldr	r4, [pc, #44]	; (80008c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008a2:	f7ff ffd7 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 f941 	bl	8001b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008aa:	f7ff fea5 	bl	80005f8 <main>
  bx  lr    
 80008ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008bc:	080024a0 	.word	0x080024a0
  ldr r2, =_sbss
 80008c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008c4:	20000130 	.word	0x20000130

080008c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>

080008ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ce:	2003      	movs	r0, #3
 80008d0:	f000 f928 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f805 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008da:	f7ff ff53 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f943 	bl	8000b8e <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f000 f90b 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000000 	.word	0x20000000
 800093c:	20000008 	.word	0x20000008
 8000940:	20000004 	.word	0x20000004

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000008 	.word	0x20000008
 8000968:	2000011c 	.word	0x2000011c

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000011c 	.word	0x2000011c

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <__NVIC_SetPriorityGrouping+0x40>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x40>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00
 80009c8:	05fa0000 	.word	0x05fa0000

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <__NVIC_EnableIRQ+0x38>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff8e 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff29 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff3e 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff8e 	bl	8000a78 <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff31 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffa2 	bl	8000ae0 <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000baa:	f000 f802 	bl	8000bb2 <HAL_SYSTICK_Callback>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e175      	b.n	8000ecc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8164 	bne.w	8000ec6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d005      	beq.n	8000c16 <HAL_GPIO_Init+0x56>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d130      	bne.n	8000c78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	f003 0201 	and.w	r2, r3, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d017      	beq.n	8000cb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d123      	bne.n	8000d08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	69b9      	ldr	r1, [r7, #24]
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0203 	and.w	r2, r3, #3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80be 	beq.w	8000ec6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b66      	ldr	r3, [pc, #408]	; (8000ee4 <HAL_GPIO_Init+0x324>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a65      	ldr	r2, [pc, #404]	; (8000ee4 <HAL_GPIO_Init+0x324>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b63      	ldr	r3, [pc, #396]	; (8000ee4 <HAL_GPIO_Init+0x324>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d62:	4a61      	ldr	r2, [pc, #388]	; (8000ee8 <HAL_GPIO_Init+0x328>)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	220f      	movs	r2, #15
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a58      	ldr	r2, [pc, #352]	; (8000eec <HAL_GPIO_Init+0x32c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d037      	beq.n	8000dfe <HAL_GPIO_Init+0x23e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a57      	ldr	r2, [pc, #348]	; (8000ef0 <HAL_GPIO_Init+0x330>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d031      	beq.n	8000dfa <HAL_GPIO_Init+0x23a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a56      	ldr	r2, [pc, #344]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d02b      	beq.n	8000df6 <HAL_GPIO_Init+0x236>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a55      	ldr	r2, [pc, #340]	; (8000ef8 <HAL_GPIO_Init+0x338>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d025      	beq.n	8000df2 <HAL_GPIO_Init+0x232>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a54      	ldr	r2, [pc, #336]	; (8000efc <HAL_GPIO_Init+0x33c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01f      	beq.n	8000dee <HAL_GPIO_Init+0x22e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a53      	ldr	r2, [pc, #332]	; (8000f00 <HAL_GPIO_Init+0x340>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0x22a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_GPIO_Init+0x344>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <HAL_GPIO_Init+0x348>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x222>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a50      	ldr	r2, [pc, #320]	; (8000f0c <HAL_GPIO_Init+0x34c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x21e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x21a>
 8000dd6:	2309      	movs	r3, #9
 8000dd8:	e012      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dda:	230a      	movs	r3, #10
 8000ddc:	e010      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dde:	2308      	movs	r3, #8
 8000de0:	e00e      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000de2:	2307      	movs	r3, #7
 8000de4:	e00c      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e00a      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dea:	2305      	movs	r3, #5
 8000dec:	e008      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000df2:	2303      	movs	r3, #3
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x240>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e10:	4935      	ldr	r1, [pc, #212]	; (8000ee8 <HAL_GPIO_Init+0x328>)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e42:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e6c:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_GPIO_Init+0x354>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	2b0f      	cmp	r3, #15
 8000ed0:	f67f ae86 	bls.w	8000be0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40021400 	.word	0x40021400
 8000f04:	40021800 	.word	0x40021800
 8000f08:	40021c00 	.word	0x40021c00
 8000f0c:	40022000 	.word	0x40022000
 8000f10:	40022400 	.word	0x40022400
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f30:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d00d      	beq.n	8000f58 <HAL_RCC_GetSysClockFreq+0x40>
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	f200 80bd 	bhi.w	80010bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <HAL_RCC_GetSysClockFreq+0x34>
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d003      	beq.n	8000f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8000f4a:	e0b7      	b.n	80010bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f4c:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8000f4e:	60bb      	str	r3, [r7, #8]
      break;
 8000f50:	e0b7      	b.n	80010c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8000f54:	60bb      	str	r3, [r7, #8]
      break;
 8000f56:	e0b4      	b.n	80010c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f58:	4b5d      	ldr	r3, [pc, #372]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f60:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000f62:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d04d      	beq.n	800100a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f6e:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	099b      	lsrs	r3, r3, #6
 8000f74:	461a      	mov	r2, r3
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f7e:	f04f 0100 	mov.w	r1, #0
 8000f82:	ea02 0800 	and.w	r8, r2, r0
 8000f86:	ea03 0901 	and.w	r9, r3, r1
 8000f8a:	4640      	mov	r0, r8
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	014b      	lsls	r3, r1, #5
 8000f98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f9c:	0142      	lsls	r2, r0, #5
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	ebb0 0008 	subs.w	r0, r0, r8
 8000fa6:	eb61 0109 	sbc.w	r1, r1, r9
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	018b      	lsls	r3, r1, #6
 8000fb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000fb8:	0182      	lsls	r2, r0, #6
 8000fba:	1a12      	subs	r2, r2, r0
 8000fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8000fc0:	f04f 0000 	mov.w	r0, #0
 8000fc4:	f04f 0100 	mov.w	r1, #0
 8000fc8:	00d9      	lsls	r1, r3, #3
 8000fca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000fce:	00d0      	lsls	r0, r2, #3
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	eb12 0208 	adds.w	r2, r2, r8
 8000fd8:	eb43 0309 	adc.w	r3, r3, r9
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	f04f 0100 	mov.w	r1, #0
 8000fe4:	0259      	lsls	r1, r3, #9
 8000fe6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8000fea:	0250      	lsls	r0, r2, #9
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	f7ff f978 	bl	80002f0 <__aeabi_uldivmod>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4613      	mov	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e04a      	b.n	80010a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	099b      	lsrs	r3, r3, #6
 8001010:	461a      	mov	r2, r3
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800101a:	f04f 0100 	mov.w	r1, #0
 800101e:	ea02 0400 	and.w	r4, r2, r0
 8001022:	ea03 0501 	and.w	r5, r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	014b      	lsls	r3, r1, #5
 8001034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001038:	0142      	lsls	r2, r0, #5
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	1b00      	subs	r0, r0, r4
 8001040:	eb61 0105 	sbc.w	r1, r1, r5
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	018b      	lsls	r3, r1, #6
 800104e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001052:	0182      	lsls	r2, r0, #6
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	eb63 0301 	sbc.w	r3, r3, r1
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	f04f 0100 	mov.w	r1, #0
 8001062:	00d9      	lsls	r1, r3, #3
 8001064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001068:	00d0      	lsls	r0, r2, #3
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	1912      	adds	r2, r2, r4
 8001070:	eb45 0303 	adc.w	r3, r5, r3
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	f04f 0100 	mov.w	r1, #0
 800107c:	0299      	lsls	r1, r3, #10
 800107e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001082:	0290      	lsls	r0, r2, #10
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	461a      	mov	r2, r3
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	f7ff f92c 	bl	80002f0 <__aeabi_uldivmod>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4613      	mov	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	0c1b      	lsrs	r3, r3, #16
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	3301      	adds	r3, #1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b8:	60bb      	str	r3, [r7, #8]
      break;
 80010ba:	e002      	b.n	80010c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80010be:	60bb      	str	r3, [r7, #8]
      break;
 80010c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010c2:	68bb      	ldr	r3, [r7, #8]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	00f42400 	.word	0x00f42400
 80010d8:	007a1200 	.word	0x007a1200

080010dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000000 	.word	0x20000000

080010f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010f8:	f7ff fff0 	bl	80010dc <HAL_RCC_GetHCLKFreq>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	0a9b      	lsrs	r3, r3, #10
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	4903      	ldr	r1, [pc, #12]	; (8001118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800110a:	5ccb      	ldrb	r3, [r1, r3]
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	08002454 	.word	0x08002454

0800111c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001120:	f7ff ffdc 	bl	80010dc <HAL_RCC_GetHCLKFreq>
 8001124:	4602      	mov	r2, r0
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	0b5b      	lsrs	r3, r3, #13
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	4903      	ldr	r1, [pc, #12]	; (8001140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001132:	5ccb      	ldrb	r3, [r1, r3]
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	08002454 	.word	0x08002454

08001144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e040      	b.n	80011d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fb2e 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2224      	movs	r2, #36	; 0x24
 8001170:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f8c0 	bl	8001308 <UART_SetConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e022      	b.n	80011d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fb16 	bl	80017cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fb9d 	bl	8001910 <UART_CheckIdleState>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	4613      	mov	r3, r2
 80011ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	f040 8081 	bne.w	80012fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <HAL_UART_Transmit+0x26>
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e079      	b.n	80012fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_UART_Transmit+0x38>
 8001214:	2302      	movs	r3, #2
 8001216:	e072      	b.n	80012fe <HAL_UART_Transmit+0x11e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2221      	movs	r2, #33	; 0x21
 800122c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800122e:	f7ff fb9d 	bl	800096c <HAL_GetTick>
 8001232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800124c:	d108      	bne.n	8001260 <HAL_UART_Transmit+0x80>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	e003      	b.n	8001268 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8001270:	e02c      	b.n	80012cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2200      	movs	r2, #0
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 fb90 	bl	80019a2 <UART_WaitOnFlagUntilTimeout>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e038      	b.n	80012fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10b      	bne.n	80012aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3302      	adds	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e007      	b.n	80012ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1cc      	bne.n	8001272 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2200      	movs	r2, #0
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fb5d 	bl	80019a2 <UART_WaitOnFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e005      	b.n	80012fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2220      	movs	r2, #32
 80012f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e000      	b.n	80012fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80012fc:	2302      	movs	r3, #2
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <UART_SetConfig+0x2c8>)
 8001334:	4013      	ands	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	6979      	ldr	r1, [r7, #20]
 800133c:	430b      	orrs	r3, r1
 800133e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a95      	ldr	r2, [pc, #596]	; (80015d4 <UART_SetConfig+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d120      	bne.n	80013c6 <UART_SetConfig+0xbe>
 8001384:	4b94      	ldr	r3, [pc, #592]	; (80015d8 <UART_SetConfig+0x2d0>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d816      	bhi.n	80013c0 <UART_SetConfig+0xb8>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <UART_SetConfig+0x90>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013af 	.word	0x080013af
 80013a4:	080013bb 	.word	0x080013bb
 80013a8:	2301      	movs	r3, #1
 80013aa:	77fb      	strb	r3, [r7, #31]
 80013ac:	e14f      	b.n	800164e <UART_SetConfig+0x346>
 80013ae:	2302      	movs	r3, #2
 80013b0:	77fb      	strb	r3, [r7, #31]
 80013b2:	e14c      	b.n	800164e <UART_SetConfig+0x346>
 80013b4:	2304      	movs	r3, #4
 80013b6:	77fb      	strb	r3, [r7, #31]
 80013b8:	e149      	b.n	800164e <UART_SetConfig+0x346>
 80013ba:	2308      	movs	r3, #8
 80013bc:	77fb      	strb	r3, [r7, #31]
 80013be:	e146      	b.n	800164e <UART_SetConfig+0x346>
 80013c0:	2310      	movs	r3, #16
 80013c2:	77fb      	strb	r3, [r7, #31]
 80013c4:	e143      	b.n	800164e <UART_SetConfig+0x346>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a84      	ldr	r2, [pc, #528]	; (80015dc <UART_SetConfig+0x2d4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d132      	bne.n	8001436 <UART_SetConfig+0x12e>
 80013d0:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <UART_SetConfig+0x2d0>)
 80013d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d828      	bhi.n	8001430 <UART_SetConfig+0x128>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <UART_SetConfig+0xdc>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	08001419 	.word	0x08001419
 80013e8:	08001431 	.word	0x08001431
 80013ec:	08001431 	.word	0x08001431
 80013f0:	08001431 	.word	0x08001431
 80013f4:	08001425 	.word	0x08001425
 80013f8:	08001431 	.word	0x08001431
 80013fc:	08001431 	.word	0x08001431
 8001400:	08001431 	.word	0x08001431
 8001404:	0800141f 	.word	0x0800141f
 8001408:	08001431 	.word	0x08001431
 800140c:	08001431 	.word	0x08001431
 8001410:	08001431 	.word	0x08001431
 8001414:	0800142b 	.word	0x0800142b
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
 800141c:	e117      	b.n	800164e <UART_SetConfig+0x346>
 800141e:	2302      	movs	r3, #2
 8001420:	77fb      	strb	r3, [r7, #31]
 8001422:	e114      	b.n	800164e <UART_SetConfig+0x346>
 8001424:	2304      	movs	r3, #4
 8001426:	77fb      	strb	r3, [r7, #31]
 8001428:	e111      	b.n	800164e <UART_SetConfig+0x346>
 800142a:	2308      	movs	r3, #8
 800142c:	77fb      	strb	r3, [r7, #31]
 800142e:	e10e      	b.n	800164e <UART_SetConfig+0x346>
 8001430:	2310      	movs	r3, #16
 8001432:	77fb      	strb	r3, [r7, #31]
 8001434:	e10b      	b.n	800164e <UART_SetConfig+0x346>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a69      	ldr	r2, [pc, #420]	; (80015e0 <UART_SetConfig+0x2d8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d120      	bne.n	8001482 <UART_SetConfig+0x17a>
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <UART_SetConfig+0x2d0>)
 8001442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001446:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800144a:	2b30      	cmp	r3, #48	; 0x30
 800144c:	d013      	beq.n	8001476 <UART_SetConfig+0x16e>
 800144e:	2b30      	cmp	r3, #48	; 0x30
 8001450:	d814      	bhi.n	800147c <UART_SetConfig+0x174>
 8001452:	2b20      	cmp	r3, #32
 8001454:	d009      	beq.n	800146a <UART_SetConfig+0x162>
 8001456:	2b20      	cmp	r3, #32
 8001458:	d810      	bhi.n	800147c <UART_SetConfig+0x174>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <UART_SetConfig+0x15c>
 800145e:	2b10      	cmp	r3, #16
 8001460:	d006      	beq.n	8001470 <UART_SetConfig+0x168>
 8001462:	e00b      	b.n	800147c <UART_SetConfig+0x174>
 8001464:	2300      	movs	r3, #0
 8001466:	77fb      	strb	r3, [r7, #31]
 8001468:	e0f1      	b.n	800164e <UART_SetConfig+0x346>
 800146a:	2302      	movs	r3, #2
 800146c:	77fb      	strb	r3, [r7, #31]
 800146e:	e0ee      	b.n	800164e <UART_SetConfig+0x346>
 8001470:	2304      	movs	r3, #4
 8001472:	77fb      	strb	r3, [r7, #31]
 8001474:	e0eb      	b.n	800164e <UART_SetConfig+0x346>
 8001476:	2308      	movs	r3, #8
 8001478:	77fb      	strb	r3, [r7, #31]
 800147a:	e0e8      	b.n	800164e <UART_SetConfig+0x346>
 800147c:	2310      	movs	r3, #16
 800147e:	77fb      	strb	r3, [r7, #31]
 8001480:	e0e5      	b.n	800164e <UART_SetConfig+0x346>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <UART_SetConfig+0x2dc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d120      	bne.n	80014ce <UART_SetConfig+0x1c6>
 800148c:	4b52      	ldr	r3, [pc, #328]	; (80015d8 <UART_SetConfig+0x2d0>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001496:	2bc0      	cmp	r3, #192	; 0xc0
 8001498:	d013      	beq.n	80014c2 <UART_SetConfig+0x1ba>
 800149a:	2bc0      	cmp	r3, #192	; 0xc0
 800149c:	d814      	bhi.n	80014c8 <UART_SetConfig+0x1c0>
 800149e:	2b80      	cmp	r3, #128	; 0x80
 80014a0:	d009      	beq.n	80014b6 <UART_SetConfig+0x1ae>
 80014a2:	2b80      	cmp	r3, #128	; 0x80
 80014a4:	d810      	bhi.n	80014c8 <UART_SetConfig+0x1c0>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <UART_SetConfig+0x1a8>
 80014aa:	2b40      	cmp	r3, #64	; 0x40
 80014ac:	d006      	beq.n	80014bc <UART_SetConfig+0x1b4>
 80014ae:	e00b      	b.n	80014c8 <UART_SetConfig+0x1c0>
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
 80014b4:	e0cb      	b.n	800164e <UART_SetConfig+0x346>
 80014b6:	2302      	movs	r3, #2
 80014b8:	77fb      	strb	r3, [r7, #31]
 80014ba:	e0c8      	b.n	800164e <UART_SetConfig+0x346>
 80014bc:	2304      	movs	r3, #4
 80014be:	77fb      	strb	r3, [r7, #31]
 80014c0:	e0c5      	b.n	800164e <UART_SetConfig+0x346>
 80014c2:	2308      	movs	r3, #8
 80014c4:	77fb      	strb	r3, [r7, #31]
 80014c6:	e0c2      	b.n	800164e <UART_SetConfig+0x346>
 80014c8:	2310      	movs	r3, #16
 80014ca:	77fb      	strb	r3, [r7, #31]
 80014cc:	e0bf      	b.n	800164e <UART_SetConfig+0x346>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a45      	ldr	r2, [pc, #276]	; (80015e8 <UART_SetConfig+0x2e0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d125      	bne.n	8001524 <UART_SetConfig+0x21c>
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <UART_SetConfig+0x2d0>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014e6:	d017      	beq.n	8001518 <UART_SetConfig+0x210>
 80014e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014ec:	d817      	bhi.n	800151e <UART_SetConfig+0x216>
 80014ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f2:	d00b      	beq.n	800150c <UART_SetConfig+0x204>
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d811      	bhi.n	800151e <UART_SetConfig+0x216>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <UART_SetConfig+0x1fe>
 80014fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001502:	d006      	beq.n	8001512 <UART_SetConfig+0x20a>
 8001504:	e00b      	b.n	800151e <UART_SetConfig+0x216>
 8001506:	2300      	movs	r3, #0
 8001508:	77fb      	strb	r3, [r7, #31]
 800150a:	e0a0      	b.n	800164e <UART_SetConfig+0x346>
 800150c:	2302      	movs	r3, #2
 800150e:	77fb      	strb	r3, [r7, #31]
 8001510:	e09d      	b.n	800164e <UART_SetConfig+0x346>
 8001512:	2304      	movs	r3, #4
 8001514:	77fb      	strb	r3, [r7, #31]
 8001516:	e09a      	b.n	800164e <UART_SetConfig+0x346>
 8001518:	2308      	movs	r3, #8
 800151a:	77fb      	strb	r3, [r7, #31]
 800151c:	e097      	b.n	800164e <UART_SetConfig+0x346>
 800151e:	2310      	movs	r3, #16
 8001520:	77fb      	strb	r3, [r7, #31]
 8001522:	e094      	b.n	800164e <UART_SetConfig+0x346>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a30      	ldr	r2, [pc, #192]	; (80015ec <UART_SetConfig+0x2e4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d125      	bne.n	800157a <UART_SetConfig+0x272>
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <UART_SetConfig+0x2d0>)
 8001530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800153c:	d017      	beq.n	800156e <UART_SetConfig+0x266>
 800153e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001542:	d817      	bhi.n	8001574 <UART_SetConfig+0x26c>
 8001544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001548:	d00b      	beq.n	8001562 <UART_SetConfig+0x25a>
 800154a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800154e:	d811      	bhi.n	8001574 <UART_SetConfig+0x26c>
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <UART_SetConfig+0x254>
 8001554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001558:	d006      	beq.n	8001568 <UART_SetConfig+0x260>
 800155a:	e00b      	b.n	8001574 <UART_SetConfig+0x26c>
 800155c:	2301      	movs	r3, #1
 800155e:	77fb      	strb	r3, [r7, #31]
 8001560:	e075      	b.n	800164e <UART_SetConfig+0x346>
 8001562:	2302      	movs	r3, #2
 8001564:	77fb      	strb	r3, [r7, #31]
 8001566:	e072      	b.n	800164e <UART_SetConfig+0x346>
 8001568:	2304      	movs	r3, #4
 800156a:	77fb      	strb	r3, [r7, #31]
 800156c:	e06f      	b.n	800164e <UART_SetConfig+0x346>
 800156e:	2308      	movs	r3, #8
 8001570:	77fb      	strb	r3, [r7, #31]
 8001572:	e06c      	b.n	800164e <UART_SetConfig+0x346>
 8001574:	2310      	movs	r3, #16
 8001576:	77fb      	strb	r3, [r7, #31]
 8001578:	e069      	b.n	800164e <UART_SetConfig+0x346>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <UART_SetConfig+0x2e8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d137      	bne.n	80015f4 <UART_SetConfig+0x2ec>
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <UART_SetConfig+0x2d0>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800158e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001592:	d017      	beq.n	80015c4 <UART_SetConfig+0x2bc>
 8001594:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001598:	d817      	bhi.n	80015ca <UART_SetConfig+0x2c2>
 800159a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159e:	d00b      	beq.n	80015b8 <UART_SetConfig+0x2b0>
 80015a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015a4:	d811      	bhi.n	80015ca <UART_SetConfig+0x2c2>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <UART_SetConfig+0x2aa>
 80015aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ae:	d006      	beq.n	80015be <UART_SetConfig+0x2b6>
 80015b0:	e00b      	b.n	80015ca <UART_SetConfig+0x2c2>
 80015b2:	2300      	movs	r3, #0
 80015b4:	77fb      	strb	r3, [r7, #31]
 80015b6:	e04a      	b.n	800164e <UART_SetConfig+0x346>
 80015b8:	2302      	movs	r3, #2
 80015ba:	77fb      	strb	r3, [r7, #31]
 80015bc:	e047      	b.n	800164e <UART_SetConfig+0x346>
 80015be:	2304      	movs	r3, #4
 80015c0:	77fb      	strb	r3, [r7, #31]
 80015c2:	e044      	b.n	800164e <UART_SetConfig+0x346>
 80015c4:	2308      	movs	r3, #8
 80015c6:	77fb      	strb	r3, [r7, #31]
 80015c8:	e041      	b.n	800164e <UART_SetConfig+0x346>
 80015ca:	2310      	movs	r3, #16
 80015cc:	77fb      	strb	r3, [r7, #31]
 80015ce:	e03e      	b.n	800164e <UART_SetConfig+0x346>
 80015d0:	efff69f3 	.word	0xefff69f3
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40004400 	.word	0x40004400
 80015e0:	40004800 	.word	0x40004800
 80015e4:	40004c00 	.word	0x40004c00
 80015e8:	40005000 	.word	0x40005000
 80015ec:	40011400 	.word	0x40011400
 80015f0:	40007800 	.word	0x40007800
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a71      	ldr	r2, [pc, #452]	; (80017c0 <UART_SetConfig+0x4b8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d125      	bne.n	800164a <UART_SetConfig+0x342>
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <UART_SetConfig+0x4bc>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001608:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800160c:	d017      	beq.n	800163e <UART_SetConfig+0x336>
 800160e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001612:	d817      	bhi.n	8001644 <UART_SetConfig+0x33c>
 8001614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001618:	d00b      	beq.n	8001632 <UART_SetConfig+0x32a>
 800161a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800161e:	d811      	bhi.n	8001644 <UART_SetConfig+0x33c>
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <UART_SetConfig+0x324>
 8001624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001628:	d006      	beq.n	8001638 <UART_SetConfig+0x330>
 800162a:	e00b      	b.n	8001644 <UART_SetConfig+0x33c>
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]
 8001630:	e00d      	b.n	800164e <UART_SetConfig+0x346>
 8001632:	2302      	movs	r3, #2
 8001634:	77fb      	strb	r3, [r7, #31]
 8001636:	e00a      	b.n	800164e <UART_SetConfig+0x346>
 8001638:	2304      	movs	r3, #4
 800163a:	77fb      	strb	r3, [r7, #31]
 800163c:	e007      	b.n	800164e <UART_SetConfig+0x346>
 800163e:	2308      	movs	r3, #8
 8001640:	77fb      	strb	r3, [r7, #31]
 8001642:	e004      	b.n	800164e <UART_SetConfig+0x346>
 8001644:	2310      	movs	r3, #16
 8001646:	77fb      	strb	r3, [r7, #31]
 8001648:	e001      	b.n	800164e <UART_SetConfig+0x346>
 800164a:	2310      	movs	r3, #16
 800164c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001656:	d15a      	bne.n	800170e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d827      	bhi.n	80016ae <UART_SetConfig+0x3a6>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <UART_SetConfig+0x35c>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001689 	.word	0x08001689
 8001668:	08001691 	.word	0x08001691
 800166c:	08001699 	.word	0x08001699
 8001670:	080016af 	.word	0x080016af
 8001674:	0800169f 	.word	0x0800169f
 8001678:	080016af 	.word	0x080016af
 800167c:	080016af 	.word	0x080016af
 8001680:	080016af 	.word	0x080016af
 8001684:	080016a7 	.word	0x080016a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001688:	f7ff fd34 	bl	80010f4 <HAL_RCC_GetPCLK1Freq>
 800168c:	61b8      	str	r0, [r7, #24]
        break;
 800168e:	e013      	b.n	80016b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001690:	f7ff fd44 	bl	800111c <HAL_RCC_GetPCLK2Freq>
 8001694:	61b8      	str	r0, [r7, #24]
        break;
 8001696:	e00f      	b.n	80016b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <UART_SetConfig+0x4c0>)
 800169a:	61bb      	str	r3, [r7, #24]
        break;
 800169c:	e00c      	b.n	80016b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800169e:	f7ff fc3b 	bl	8000f18 <HAL_RCC_GetSysClockFreq>
 80016a2:	61b8      	str	r0, [r7, #24]
        break;
 80016a4:	e008      	b.n	80016b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016aa:	61bb      	str	r3, [r7, #24]
        break;
 80016ac:	e004      	b.n	80016b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	77bb      	strb	r3, [r7, #30]
        break;
 80016b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d074      	beq.n	80017a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	005a      	lsls	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d916      	bls.n	8001708 <UART_SetConfig+0x400>
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d212      	bcs.n	8001708 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f023 030f 	bic.w	r3, r3, #15
 80016ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	89fa      	ldrh	r2, [r7, #14]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	e04f      	b.n	80017a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	77bb      	strb	r3, [r7, #30]
 800170c:	e04c      	b.n	80017a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	2b08      	cmp	r3, #8
 8001712:	d828      	bhi.n	8001766 <UART_SetConfig+0x45e>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <UART_SetConfig+0x414>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	08001741 	.word	0x08001741
 8001720:	08001749 	.word	0x08001749
 8001724:	08001751 	.word	0x08001751
 8001728:	08001767 	.word	0x08001767
 800172c:	08001757 	.word	0x08001757
 8001730:	08001767 	.word	0x08001767
 8001734:	08001767 	.word	0x08001767
 8001738:	08001767 	.word	0x08001767
 800173c:	0800175f 	.word	0x0800175f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001740:	f7ff fcd8 	bl	80010f4 <HAL_RCC_GetPCLK1Freq>
 8001744:	61b8      	str	r0, [r7, #24]
        break;
 8001746:	e013      	b.n	8001770 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001748:	f7ff fce8 	bl	800111c <HAL_RCC_GetPCLK2Freq>
 800174c:	61b8      	str	r0, [r7, #24]
        break;
 800174e:	e00f      	b.n	8001770 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <UART_SetConfig+0x4c0>)
 8001752:	61bb      	str	r3, [r7, #24]
        break;
 8001754:	e00c      	b.n	8001770 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001756:	f7ff fbdf 	bl	8000f18 <HAL_RCC_GetSysClockFreq>
 800175a:	61b8      	str	r0, [r7, #24]
        break;
 800175c:	e008      	b.n	8001770 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800175e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001762:	61bb      	str	r3, [r7, #24]
        break;
 8001764:	e004      	b.n	8001770 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	77bb      	strb	r3, [r7, #30]
        break;
 800176e:	bf00      	nop
    }

    if (pclk != 0U)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d018      	beq.n	80017a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	085a      	lsrs	r2, r3, #1
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	441a      	add	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d909      	bls.n	80017a4 <UART_SetConfig+0x49c>
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001796:	d205      	bcs.n	80017a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	e001      	b.n	80017a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80017b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40007c00 	.word	0x40007c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400

080017cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00a      	beq.n	80017f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00a      	beq.n	800183a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00a      	beq.n	800187e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01a      	beq.n	80018e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ca:	d10a      	bne.n	80018e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]
  }
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001920:	f7ff f824 	bl	800096c <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b08      	cmp	r3, #8
 8001932:	d10e      	bne.n	8001952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f82d 	bl	80019a2 <UART_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e023      	b.n	800199a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b04      	cmp	r3, #4
 800195e:	d10e      	bne.n	800197e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f817 	bl	80019a2 <UART_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e00d      	b.n	800199a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b09c      	sub	sp, #112	; 0x70
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4613      	mov	r3, r2
 80019b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019b2:	e0a5      	b.n	8001b00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ba:	f000 80a1 	beq.w	8001b00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019be:	f7fe ffd5 	bl	800096c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d302      	bcc.n	80019d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80019ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d13e      	bne.n	8001a52 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019dc:	e853 3f00 	ldrex	r3, [r3]
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80019e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80019e8:	667b      	str	r3, [r7, #100]	; 0x64
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80019f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019fa:	e841 2300 	strex	r3, r2, [r1]
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e6      	bne.n	80019d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a10:	e853 3f00 	ldrex	r3, [r3]
 8001a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3308      	adds	r3, #8
 8001a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a26:	64ba      	str	r2, [r7, #72]	; 0x48
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a2e:	e841 2300 	strex	r3, r2, [r1]
 8001a32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1e5      	bne.n	8001a06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e067      	b.n	8001b22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d04f      	beq.n	8001b00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6e:	d147      	bne.n	8001b00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	e853 3f00 	ldrex	r3, [r3]
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aa0:	e841 2300 	strex	r3, r2, [r1]
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e6      	bne.n	8001a7a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	e853 3f00 	ldrex	r3, [r3]
 8001aba:	613b      	str	r3, [r7, #16]
   return(result);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3308      	adds	r3, #8
 8001aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001acc:	623a      	str	r2, [r7, #32]
 8001ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad0:	69f9      	ldr	r1, [r7, #28]
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	e841 2300 	strex	r3, r2, [r1]
 8001ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1e5      	bne.n	8001aac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e010      	b.n	8001b22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f43f af4a 	beq.w	80019b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3770      	adds	r7, #112	; 0x70
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <__libc_init_array>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	4d0d      	ldr	r5, [pc, #52]	; (8001b64 <__libc_init_array+0x38>)
 8001b30:	4c0d      	ldr	r4, [pc, #52]	; (8001b68 <__libc_init_array+0x3c>)
 8001b32:	1b64      	subs	r4, r4, r5
 8001b34:	10a4      	asrs	r4, r4, #2
 8001b36:	2600      	movs	r6, #0
 8001b38:	42a6      	cmp	r6, r4
 8001b3a:	d109      	bne.n	8001b50 <__libc_init_array+0x24>
 8001b3c:	4d0b      	ldr	r5, [pc, #44]	; (8001b6c <__libc_init_array+0x40>)
 8001b3e:	4c0c      	ldr	r4, [pc, #48]	; (8001b70 <__libc_init_array+0x44>)
 8001b40:	f000 fc5c 	bl	80023fc <_init>
 8001b44:	1b64      	subs	r4, r4, r5
 8001b46:	10a4      	asrs	r4, r4, #2
 8001b48:	2600      	movs	r6, #0
 8001b4a:	42a6      	cmp	r6, r4
 8001b4c:	d105      	bne.n	8001b5a <__libc_init_array+0x2e>
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b54:	4798      	blx	r3
 8001b56:	3601      	adds	r6, #1
 8001b58:	e7ee      	b.n	8001b38 <__libc_init_array+0xc>
 8001b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5e:	4798      	blx	r3
 8001b60:	3601      	adds	r6, #1
 8001b62:	e7f2      	b.n	8001b4a <__libc_init_array+0x1e>
 8001b64:	08002498 	.word	0x08002498
 8001b68:	08002498 	.word	0x08002498
 8001b6c:	08002498 	.word	0x08002498
 8001b70:	0800249c 	.word	0x0800249c

08001b74 <memset>:
 8001b74:	4402      	add	r2, r0
 8001b76:	4603      	mov	r3, r0
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <memset+0xa>
 8001b7c:	4770      	bx	lr
 8001b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b82:	e7f9      	b.n	8001b78 <memset+0x4>

08001b84 <siprintf>:
 8001b84:	b40e      	push	{r1, r2, r3}
 8001b86:	b500      	push	{lr}
 8001b88:	b09c      	sub	sp, #112	; 0x70
 8001b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8001b8c:	9002      	str	r0, [sp, #8]
 8001b8e:	9006      	str	r0, [sp, #24]
 8001b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <siprintf+0x38>)
 8001b96:	9107      	str	r1, [sp, #28]
 8001b98:	9104      	str	r1, [sp, #16]
 8001b9a:	4909      	ldr	r1, [pc, #36]	; (8001bc0 <siprintf+0x3c>)
 8001b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ba0:	9105      	str	r1, [sp, #20]
 8001ba2:	6800      	ldr	r0, [r0, #0]
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	a902      	add	r1, sp, #8
 8001ba8:	f000 f868 	bl	8001c7c <_svfiprintf_r>
 8001bac:	9b02      	ldr	r3, [sp, #8]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	b01c      	add	sp, #112	; 0x70
 8001bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bb8:	b003      	add	sp, #12
 8001bba:	4770      	bx	lr
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	ffff0208 	.word	0xffff0208

08001bc4 <__ssputs_r>:
 8001bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc8:	688e      	ldr	r6, [r1, #8]
 8001bca:	429e      	cmp	r6, r3
 8001bcc:	4682      	mov	sl, r0
 8001bce:	460c      	mov	r4, r1
 8001bd0:	4690      	mov	r8, r2
 8001bd2:	461f      	mov	r7, r3
 8001bd4:	d838      	bhi.n	8001c48 <__ssputs_r+0x84>
 8001bd6:	898a      	ldrh	r2, [r1, #12]
 8001bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bdc:	d032      	beq.n	8001c44 <__ssputs_r+0x80>
 8001bde:	6825      	ldr	r5, [r4, #0]
 8001be0:	6909      	ldr	r1, [r1, #16]
 8001be2:	eba5 0901 	sub.w	r9, r5, r1
 8001be6:	6965      	ldr	r5, [r4, #20]
 8001be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001bec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	444b      	add	r3, r9
 8001bf4:	106d      	asrs	r5, r5, #1
 8001bf6:	429d      	cmp	r5, r3
 8001bf8:	bf38      	it	cc
 8001bfa:	461d      	movcc	r5, r3
 8001bfc:	0553      	lsls	r3, r2, #21
 8001bfe:	d531      	bpl.n	8001c64 <__ssputs_r+0xa0>
 8001c00:	4629      	mov	r1, r5
 8001c02:	f000 fb47 	bl	8002294 <_malloc_r>
 8001c06:	4606      	mov	r6, r0
 8001c08:	b950      	cbnz	r0, 8001c20 <__ssputs_r+0x5c>
 8001c0a:	230c      	movs	r3, #12
 8001c0c:	f8ca 3000 	str.w	r3, [sl]
 8001c10:	89a3      	ldrh	r3, [r4, #12]
 8001c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c16:	81a3      	strh	r3, [r4, #12]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c20:	6921      	ldr	r1, [r4, #16]
 8001c22:	464a      	mov	r2, r9
 8001c24:	f000 fabe 	bl	80021a4 <memcpy>
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c32:	81a3      	strh	r3, [r4, #12]
 8001c34:	6126      	str	r6, [r4, #16]
 8001c36:	6165      	str	r5, [r4, #20]
 8001c38:	444e      	add	r6, r9
 8001c3a:	eba5 0509 	sub.w	r5, r5, r9
 8001c3e:	6026      	str	r6, [r4, #0]
 8001c40:	60a5      	str	r5, [r4, #8]
 8001c42:	463e      	mov	r6, r7
 8001c44:	42be      	cmp	r6, r7
 8001c46:	d900      	bls.n	8001c4a <__ssputs_r+0x86>
 8001c48:	463e      	mov	r6, r7
 8001c4a:	4632      	mov	r2, r6
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	4641      	mov	r1, r8
 8001c50:	f000 fab6 	bl	80021c0 <memmove>
 8001c54:	68a3      	ldr	r3, [r4, #8]
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	1b9b      	subs	r3, r3, r6
 8001c5a:	4432      	add	r2, r6
 8001c5c:	60a3      	str	r3, [r4, #8]
 8001c5e:	6022      	str	r2, [r4, #0]
 8001c60:	2000      	movs	r0, #0
 8001c62:	e7db      	b.n	8001c1c <__ssputs_r+0x58>
 8001c64:	462a      	mov	r2, r5
 8001c66:	f000 fb6f 	bl	8002348 <_realloc_r>
 8001c6a:	4606      	mov	r6, r0
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d1e1      	bne.n	8001c34 <__ssputs_r+0x70>
 8001c70:	6921      	ldr	r1, [r4, #16]
 8001c72:	4650      	mov	r0, sl
 8001c74:	f000 fabe 	bl	80021f4 <_free_r>
 8001c78:	e7c7      	b.n	8001c0a <__ssputs_r+0x46>
	...

08001c7c <_svfiprintf_r>:
 8001c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c80:	4698      	mov	r8, r3
 8001c82:	898b      	ldrh	r3, [r1, #12]
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	b09d      	sub	sp, #116	; 0x74
 8001c88:	4607      	mov	r7, r0
 8001c8a:	460d      	mov	r5, r1
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	d50e      	bpl.n	8001cae <_svfiprintf_r+0x32>
 8001c90:	690b      	ldr	r3, [r1, #16]
 8001c92:	b963      	cbnz	r3, 8001cae <_svfiprintf_r+0x32>
 8001c94:	2140      	movs	r1, #64	; 0x40
 8001c96:	f000 fafd 	bl	8002294 <_malloc_r>
 8001c9a:	6028      	str	r0, [r5, #0]
 8001c9c:	6128      	str	r0, [r5, #16]
 8001c9e:	b920      	cbnz	r0, 8001caa <_svfiprintf_r+0x2e>
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	e0d1      	b.n	8001e4e <_svfiprintf_r+0x1d2>
 8001caa:	2340      	movs	r3, #64	; 0x40
 8001cac:	616b      	str	r3, [r5, #20]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cbc:	2330      	movs	r3, #48	; 0x30
 8001cbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001e68 <_svfiprintf_r+0x1ec>
 8001cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cc6:	f04f 0901 	mov.w	r9, #1
 8001cca:	4623      	mov	r3, r4
 8001ccc:	469a      	mov	sl, r3
 8001cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cd2:	b10a      	cbz	r2, 8001cd8 <_svfiprintf_r+0x5c>
 8001cd4:	2a25      	cmp	r2, #37	; 0x25
 8001cd6:	d1f9      	bne.n	8001ccc <_svfiprintf_r+0x50>
 8001cd8:	ebba 0b04 	subs.w	fp, sl, r4
 8001cdc:	d00b      	beq.n	8001cf6 <_svfiprintf_r+0x7a>
 8001cde:	465b      	mov	r3, fp
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	4638      	mov	r0, r7
 8001ce6:	f7ff ff6d 	bl	8001bc4 <__ssputs_r>
 8001cea:	3001      	adds	r0, #1
 8001cec:	f000 80aa 	beq.w	8001e44 <_svfiprintf_r+0x1c8>
 8001cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cf2:	445a      	add	r2, fp
 8001cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8001cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a2 	beq.w	8001e44 <_svfiprintf_r+0x1c8>
 8001d00:	2300      	movs	r3, #0
 8001d02:	f04f 32ff 	mov.w	r2, #4294967295
 8001d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d0a:	f10a 0a01 	add.w	sl, sl, #1
 8001d0e:	9304      	str	r3, [sp, #16]
 8001d10:	9307      	str	r3, [sp, #28]
 8001d12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d16:	931a      	str	r3, [sp, #104]	; 0x68
 8001d18:	4654      	mov	r4, sl
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d20:	4851      	ldr	r0, [pc, #324]	; (8001e68 <_svfiprintf_r+0x1ec>)
 8001d22:	f7fe fa95 	bl	8000250 <memchr>
 8001d26:	9a04      	ldr	r2, [sp, #16]
 8001d28:	b9d8      	cbnz	r0, 8001d62 <_svfiprintf_r+0xe6>
 8001d2a:	06d0      	lsls	r0, r2, #27
 8001d2c:	bf44      	itt	mi
 8001d2e:	2320      	movmi	r3, #32
 8001d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d34:	0711      	lsls	r1, r2, #28
 8001d36:	bf44      	itt	mi
 8001d38:	232b      	movmi	r3, #43	; 0x2b
 8001d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d42:	2b2a      	cmp	r3, #42	; 0x2a
 8001d44:	d015      	beq.n	8001d72 <_svfiprintf_r+0xf6>
 8001d46:	9a07      	ldr	r2, [sp, #28]
 8001d48:	4654      	mov	r4, sl
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f04f 0c0a 	mov.w	ip, #10
 8001d50:	4621      	mov	r1, r4
 8001d52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d56:	3b30      	subs	r3, #48	; 0x30
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d94e      	bls.n	8001dfa <_svfiprintf_r+0x17e>
 8001d5c:	b1b0      	cbz	r0, 8001d8c <_svfiprintf_r+0x110>
 8001d5e:	9207      	str	r2, [sp, #28]
 8001d60:	e014      	b.n	8001d8c <_svfiprintf_r+0x110>
 8001d62:	eba0 0308 	sub.w	r3, r0, r8
 8001d66:	fa09 f303 	lsl.w	r3, r9, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	9304      	str	r3, [sp, #16]
 8001d6e:	46a2      	mov	sl, r4
 8001d70:	e7d2      	b.n	8001d18 <_svfiprintf_r+0x9c>
 8001d72:	9b03      	ldr	r3, [sp, #12]
 8001d74:	1d19      	adds	r1, r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	9103      	str	r1, [sp, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bfbb      	ittet	lt
 8001d7e:	425b      	neglt	r3, r3
 8001d80:	f042 0202 	orrlt.w	r2, r2, #2
 8001d84:	9307      	strge	r3, [sp, #28]
 8001d86:	9307      	strlt	r3, [sp, #28]
 8001d88:	bfb8      	it	lt
 8001d8a:	9204      	strlt	r2, [sp, #16]
 8001d8c:	7823      	ldrb	r3, [r4, #0]
 8001d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d90:	d10c      	bne.n	8001dac <_svfiprintf_r+0x130>
 8001d92:	7863      	ldrb	r3, [r4, #1]
 8001d94:	2b2a      	cmp	r3, #42	; 0x2a
 8001d96:	d135      	bne.n	8001e04 <_svfiprintf_r+0x188>
 8001d98:	9b03      	ldr	r3, [sp, #12]
 8001d9a:	1d1a      	adds	r2, r3, #4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	9203      	str	r2, [sp, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bfb8      	it	lt
 8001da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001da8:	3402      	adds	r4, #2
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001e78 <_svfiprintf_r+0x1fc>
 8001db0:	7821      	ldrb	r1, [r4, #0]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4650      	mov	r0, sl
 8001db6:	f7fe fa4b 	bl	8000250 <memchr>
 8001dba:	b140      	cbz	r0, 8001dce <_svfiprintf_r+0x152>
 8001dbc:	2340      	movs	r3, #64	; 0x40
 8001dbe:	eba0 000a 	sub.w	r0, r0, sl
 8001dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8001dc6:	9b04      	ldr	r3, [sp, #16]
 8001dc8:	4303      	orrs	r3, r0
 8001dca:	3401      	adds	r4, #1
 8001dcc:	9304      	str	r3, [sp, #16]
 8001dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dd2:	4826      	ldr	r0, [pc, #152]	; (8001e6c <_svfiprintf_r+0x1f0>)
 8001dd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dd8:	2206      	movs	r2, #6
 8001dda:	f7fe fa39 	bl	8000250 <memchr>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d038      	beq.n	8001e54 <_svfiprintf_r+0x1d8>
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <_svfiprintf_r+0x1f4>)
 8001de4:	bb1b      	cbnz	r3, 8001e2e <_svfiprintf_r+0x1b2>
 8001de6:	9b03      	ldr	r3, [sp, #12]
 8001de8:	3307      	adds	r3, #7
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	3308      	adds	r3, #8
 8001df0:	9303      	str	r3, [sp, #12]
 8001df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001df4:	4433      	add	r3, r6
 8001df6:	9309      	str	r3, [sp, #36]	; 0x24
 8001df8:	e767      	b.n	8001cca <_svfiprintf_r+0x4e>
 8001dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dfe:	460c      	mov	r4, r1
 8001e00:	2001      	movs	r0, #1
 8001e02:	e7a5      	b.n	8001d50 <_svfiprintf_r+0xd4>
 8001e04:	2300      	movs	r3, #0
 8001e06:	3401      	adds	r4, #1
 8001e08:	9305      	str	r3, [sp, #20]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 0c0a 	mov.w	ip, #10
 8001e10:	4620      	mov	r0, r4
 8001e12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e16:	3a30      	subs	r2, #48	; 0x30
 8001e18:	2a09      	cmp	r2, #9
 8001e1a:	d903      	bls.n	8001e24 <_svfiprintf_r+0x1a8>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0c5      	beq.n	8001dac <_svfiprintf_r+0x130>
 8001e20:	9105      	str	r1, [sp, #20]
 8001e22:	e7c3      	b.n	8001dac <_svfiprintf_r+0x130>
 8001e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e28:	4604      	mov	r4, r0
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e7f0      	b.n	8001e10 <_svfiprintf_r+0x194>
 8001e2e:	ab03      	add	r3, sp, #12
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	462a      	mov	r2, r5
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <_svfiprintf_r+0x1f8>)
 8001e36:	a904      	add	r1, sp, #16
 8001e38:	4638      	mov	r0, r7
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	1c42      	adds	r2, r0, #1
 8001e40:	4606      	mov	r6, r0
 8001e42:	d1d6      	bne.n	8001df2 <_svfiprintf_r+0x176>
 8001e44:	89ab      	ldrh	r3, [r5, #12]
 8001e46:	065b      	lsls	r3, r3, #25
 8001e48:	f53f af2c 	bmi.w	8001ca4 <_svfiprintf_r+0x28>
 8001e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e4e:	b01d      	add	sp, #116	; 0x74
 8001e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e54:	ab03      	add	r3, sp, #12
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	462a      	mov	r2, r5
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <_svfiprintf_r+0x1f8>)
 8001e5c:	a904      	add	r1, sp, #16
 8001e5e:	4638      	mov	r0, r7
 8001e60:	f000 f87a 	bl	8001f58 <_printf_i>
 8001e64:	e7eb      	b.n	8001e3e <_svfiprintf_r+0x1c2>
 8001e66:	bf00      	nop
 8001e68:	0800245c 	.word	0x0800245c
 8001e6c:	08002466 	.word	0x08002466
 8001e70:	00000000 	.word	0x00000000
 8001e74:	08001bc5 	.word	0x08001bc5
 8001e78:	08002462 	.word	0x08002462

08001e7c <_printf_common>:
 8001e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e80:	4616      	mov	r6, r2
 8001e82:	4699      	mov	r9, r3
 8001e84:	688a      	ldr	r2, [r1, #8]
 8001e86:	690b      	ldr	r3, [r1, #16]
 8001e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bfb8      	it	lt
 8001e90:	4613      	movlt	r3, r2
 8001e92:	6033      	str	r3, [r6, #0]
 8001e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e98:	4607      	mov	r7, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	b10a      	cbz	r2, 8001ea2 <_printf_common+0x26>
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	6033      	str	r3, [r6, #0]
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	0699      	lsls	r1, r3, #26
 8001ea6:	bf42      	ittt	mi
 8001ea8:	6833      	ldrmi	r3, [r6, #0]
 8001eaa:	3302      	addmi	r3, #2
 8001eac:	6033      	strmi	r3, [r6, #0]
 8001eae:	6825      	ldr	r5, [r4, #0]
 8001eb0:	f015 0506 	ands.w	r5, r5, #6
 8001eb4:	d106      	bne.n	8001ec4 <_printf_common+0x48>
 8001eb6:	f104 0a19 	add.w	sl, r4, #25
 8001eba:	68e3      	ldr	r3, [r4, #12]
 8001ebc:	6832      	ldr	r2, [r6, #0]
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	42ab      	cmp	r3, r5
 8001ec2:	dc26      	bgt.n	8001f12 <_printf_common+0x96>
 8001ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ec8:	1e13      	subs	r3, r2, #0
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	bf18      	it	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	0692      	lsls	r2, r2, #26
 8001ed2:	d42b      	bmi.n	8001f2c <_printf_common+0xb0>
 8001ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ed8:	4649      	mov	r1, r9
 8001eda:	4638      	mov	r0, r7
 8001edc:	47c0      	blx	r8
 8001ede:	3001      	adds	r0, #1
 8001ee0:	d01e      	beq.n	8001f20 <_printf_common+0xa4>
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	68e5      	ldr	r5, [r4, #12]
 8001ee6:	6832      	ldr	r2, [r6, #0]
 8001ee8:	f003 0306 	and.w	r3, r3, #6
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	bf08      	it	eq
 8001ef0:	1aad      	subeq	r5, r5, r2
 8001ef2:	68a3      	ldr	r3, [r4, #8]
 8001ef4:	6922      	ldr	r2, [r4, #16]
 8001ef6:	bf0c      	ite	eq
 8001ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001efc:	2500      	movne	r5, #0
 8001efe:	4293      	cmp	r3, r2
 8001f00:	bfc4      	itt	gt
 8001f02:	1a9b      	subgt	r3, r3, r2
 8001f04:	18ed      	addgt	r5, r5, r3
 8001f06:	2600      	movs	r6, #0
 8001f08:	341a      	adds	r4, #26
 8001f0a:	42b5      	cmp	r5, r6
 8001f0c:	d11a      	bne.n	8001f44 <_printf_common+0xc8>
 8001f0e:	2000      	movs	r0, #0
 8001f10:	e008      	b.n	8001f24 <_printf_common+0xa8>
 8001f12:	2301      	movs	r3, #1
 8001f14:	4652      	mov	r2, sl
 8001f16:	4649      	mov	r1, r9
 8001f18:	4638      	mov	r0, r7
 8001f1a:	47c0      	blx	r8
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d103      	bne.n	8001f28 <_printf_common+0xac>
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f28:	3501      	adds	r5, #1
 8001f2a:	e7c6      	b.n	8001eba <_printf_common+0x3e>
 8001f2c:	18e1      	adds	r1, r4, r3
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	2030      	movs	r0, #48	; 0x30
 8001f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f36:	4422      	add	r2, r4
 8001f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f40:	3302      	adds	r3, #2
 8001f42:	e7c7      	b.n	8001ed4 <_printf_common+0x58>
 8001f44:	2301      	movs	r3, #1
 8001f46:	4622      	mov	r2, r4
 8001f48:	4649      	mov	r1, r9
 8001f4a:	4638      	mov	r0, r7
 8001f4c:	47c0      	blx	r8
 8001f4e:	3001      	adds	r0, #1
 8001f50:	d0e6      	beq.n	8001f20 <_printf_common+0xa4>
 8001f52:	3601      	adds	r6, #1
 8001f54:	e7d9      	b.n	8001f0a <_printf_common+0x8e>
	...

08001f58 <_printf_i>:
 8001f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	4691      	mov	r9, r2
 8001f60:	7e27      	ldrb	r7, [r4, #24]
 8001f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f64:	2f78      	cmp	r7, #120	; 0x78
 8001f66:	4680      	mov	r8, r0
 8001f68:	469a      	mov	sl, r3
 8001f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f6e:	d807      	bhi.n	8001f80 <_printf_i+0x28>
 8001f70:	2f62      	cmp	r7, #98	; 0x62
 8001f72:	d80a      	bhi.n	8001f8a <_printf_i+0x32>
 8001f74:	2f00      	cmp	r7, #0
 8001f76:	f000 80d8 	beq.w	800212a <_printf_i+0x1d2>
 8001f7a:	2f58      	cmp	r7, #88	; 0x58
 8001f7c:	f000 80a3 	beq.w	80020c6 <_printf_i+0x16e>
 8001f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f88:	e03a      	b.n	8002000 <_printf_i+0xa8>
 8001f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f8e:	2b15      	cmp	r3, #21
 8001f90:	d8f6      	bhi.n	8001f80 <_printf_i+0x28>
 8001f92:	a001      	add	r0, pc, #4	; (adr r0, 8001f98 <_printf_i+0x40>)
 8001f94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f98:	08001ff1 	.word	0x08001ff1
 8001f9c:	08002005 	.word	0x08002005
 8001fa0:	08001f81 	.word	0x08001f81
 8001fa4:	08001f81 	.word	0x08001f81
 8001fa8:	08001f81 	.word	0x08001f81
 8001fac:	08001f81 	.word	0x08001f81
 8001fb0:	08002005 	.word	0x08002005
 8001fb4:	08001f81 	.word	0x08001f81
 8001fb8:	08001f81 	.word	0x08001f81
 8001fbc:	08001f81 	.word	0x08001f81
 8001fc0:	08001f81 	.word	0x08001f81
 8001fc4:	08002111 	.word	0x08002111
 8001fc8:	08002035 	.word	0x08002035
 8001fcc:	080020f3 	.word	0x080020f3
 8001fd0:	08001f81 	.word	0x08001f81
 8001fd4:	08001f81 	.word	0x08001f81
 8001fd8:	08002133 	.word	0x08002133
 8001fdc:	08001f81 	.word	0x08001f81
 8001fe0:	08002035 	.word	0x08002035
 8001fe4:	08001f81 	.word	0x08001f81
 8001fe8:	08001f81 	.word	0x08001f81
 8001fec:	080020fb 	.word	0x080020fb
 8001ff0:	680b      	ldr	r3, [r1, #0]
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	600a      	str	r2, [r1, #0]
 8001ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002000:	2301      	movs	r3, #1
 8002002:	e0a3      	b.n	800214c <_printf_i+0x1f4>
 8002004:	6825      	ldr	r5, [r4, #0]
 8002006:	6808      	ldr	r0, [r1, #0]
 8002008:	062e      	lsls	r6, r5, #24
 800200a:	f100 0304 	add.w	r3, r0, #4
 800200e:	d50a      	bpl.n	8002026 <_printf_i+0xce>
 8002010:	6805      	ldr	r5, [r0, #0]
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	2d00      	cmp	r5, #0
 8002016:	da03      	bge.n	8002020 <_printf_i+0xc8>
 8002018:	232d      	movs	r3, #45	; 0x2d
 800201a:	426d      	negs	r5, r5
 800201c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002020:	485e      	ldr	r0, [pc, #376]	; (800219c <_printf_i+0x244>)
 8002022:	230a      	movs	r3, #10
 8002024:	e019      	b.n	800205a <_printf_i+0x102>
 8002026:	f015 0f40 	tst.w	r5, #64	; 0x40
 800202a:	6805      	ldr	r5, [r0, #0]
 800202c:	600b      	str	r3, [r1, #0]
 800202e:	bf18      	it	ne
 8002030:	b22d      	sxthne	r5, r5
 8002032:	e7ef      	b.n	8002014 <_printf_i+0xbc>
 8002034:	680b      	ldr	r3, [r1, #0]
 8002036:	6825      	ldr	r5, [r4, #0]
 8002038:	1d18      	adds	r0, r3, #4
 800203a:	6008      	str	r0, [r1, #0]
 800203c:	0628      	lsls	r0, r5, #24
 800203e:	d501      	bpl.n	8002044 <_printf_i+0xec>
 8002040:	681d      	ldr	r5, [r3, #0]
 8002042:	e002      	b.n	800204a <_printf_i+0xf2>
 8002044:	0669      	lsls	r1, r5, #25
 8002046:	d5fb      	bpl.n	8002040 <_printf_i+0xe8>
 8002048:	881d      	ldrh	r5, [r3, #0]
 800204a:	4854      	ldr	r0, [pc, #336]	; (800219c <_printf_i+0x244>)
 800204c:	2f6f      	cmp	r7, #111	; 0x6f
 800204e:	bf0c      	ite	eq
 8002050:	2308      	moveq	r3, #8
 8002052:	230a      	movne	r3, #10
 8002054:	2100      	movs	r1, #0
 8002056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800205a:	6866      	ldr	r6, [r4, #4]
 800205c:	60a6      	str	r6, [r4, #8]
 800205e:	2e00      	cmp	r6, #0
 8002060:	bfa2      	ittt	ge
 8002062:	6821      	ldrge	r1, [r4, #0]
 8002064:	f021 0104 	bicge.w	r1, r1, #4
 8002068:	6021      	strge	r1, [r4, #0]
 800206a:	b90d      	cbnz	r5, 8002070 <_printf_i+0x118>
 800206c:	2e00      	cmp	r6, #0
 800206e:	d04d      	beq.n	800210c <_printf_i+0x1b4>
 8002070:	4616      	mov	r6, r2
 8002072:	fbb5 f1f3 	udiv	r1, r5, r3
 8002076:	fb03 5711 	mls	r7, r3, r1, r5
 800207a:	5dc7      	ldrb	r7, [r0, r7]
 800207c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002080:	462f      	mov	r7, r5
 8002082:	42bb      	cmp	r3, r7
 8002084:	460d      	mov	r5, r1
 8002086:	d9f4      	bls.n	8002072 <_printf_i+0x11a>
 8002088:	2b08      	cmp	r3, #8
 800208a:	d10b      	bne.n	80020a4 <_printf_i+0x14c>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	07df      	lsls	r7, r3, #31
 8002090:	d508      	bpl.n	80020a4 <_printf_i+0x14c>
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	6861      	ldr	r1, [r4, #4]
 8002096:	4299      	cmp	r1, r3
 8002098:	bfde      	ittt	le
 800209a:	2330      	movle	r3, #48	; 0x30
 800209c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020a4:	1b92      	subs	r2, r2, r6
 80020a6:	6122      	str	r2, [r4, #16]
 80020a8:	f8cd a000 	str.w	sl, [sp]
 80020ac:	464b      	mov	r3, r9
 80020ae:	aa03      	add	r2, sp, #12
 80020b0:	4621      	mov	r1, r4
 80020b2:	4640      	mov	r0, r8
 80020b4:	f7ff fee2 	bl	8001e7c <_printf_common>
 80020b8:	3001      	adds	r0, #1
 80020ba:	d14c      	bne.n	8002156 <_printf_i+0x1fe>
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	b004      	add	sp, #16
 80020c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020c6:	4835      	ldr	r0, [pc, #212]	; (800219c <_printf_i+0x244>)
 80020c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	680e      	ldr	r6, [r1, #0]
 80020d0:	061f      	lsls	r7, r3, #24
 80020d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80020d6:	600e      	str	r6, [r1, #0]
 80020d8:	d514      	bpl.n	8002104 <_printf_i+0x1ac>
 80020da:	07d9      	lsls	r1, r3, #31
 80020dc:	bf44      	itt	mi
 80020de:	f043 0320 	orrmi.w	r3, r3, #32
 80020e2:	6023      	strmi	r3, [r4, #0]
 80020e4:	b91d      	cbnz	r5, 80020ee <_printf_i+0x196>
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	f023 0320 	bic.w	r3, r3, #32
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	2310      	movs	r3, #16
 80020f0:	e7b0      	b.n	8002054 <_printf_i+0xfc>
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	2378      	movs	r3, #120	; 0x78
 80020fc:	4828      	ldr	r0, [pc, #160]	; (80021a0 <_printf_i+0x248>)
 80020fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002102:	e7e3      	b.n	80020cc <_printf_i+0x174>
 8002104:	065e      	lsls	r6, r3, #25
 8002106:	bf48      	it	mi
 8002108:	b2ad      	uxthmi	r5, r5
 800210a:	e7e6      	b.n	80020da <_printf_i+0x182>
 800210c:	4616      	mov	r6, r2
 800210e:	e7bb      	b.n	8002088 <_printf_i+0x130>
 8002110:	680b      	ldr	r3, [r1, #0]
 8002112:	6826      	ldr	r6, [r4, #0]
 8002114:	6960      	ldr	r0, [r4, #20]
 8002116:	1d1d      	adds	r5, r3, #4
 8002118:	600d      	str	r5, [r1, #0]
 800211a:	0635      	lsls	r5, r6, #24
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	d501      	bpl.n	8002124 <_printf_i+0x1cc>
 8002120:	6018      	str	r0, [r3, #0]
 8002122:	e002      	b.n	800212a <_printf_i+0x1d2>
 8002124:	0671      	lsls	r1, r6, #25
 8002126:	d5fb      	bpl.n	8002120 <_printf_i+0x1c8>
 8002128:	8018      	strh	r0, [r3, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	6123      	str	r3, [r4, #16]
 800212e:	4616      	mov	r6, r2
 8002130:	e7ba      	b.n	80020a8 <_printf_i+0x150>
 8002132:	680b      	ldr	r3, [r1, #0]
 8002134:	1d1a      	adds	r2, r3, #4
 8002136:	600a      	str	r2, [r1, #0]
 8002138:	681e      	ldr	r6, [r3, #0]
 800213a:	6862      	ldr	r2, [r4, #4]
 800213c:	2100      	movs	r1, #0
 800213e:	4630      	mov	r0, r6
 8002140:	f7fe f886 	bl	8000250 <memchr>
 8002144:	b108      	cbz	r0, 800214a <_printf_i+0x1f2>
 8002146:	1b80      	subs	r0, r0, r6
 8002148:	6060      	str	r0, [r4, #4]
 800214a:	6863      	ldr	r3, [r4, #4]
 800214c:	6123      	str	r3, [r4, #16]
 800214e:	2300      	movs	r3, #0
 8002150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002154:	e7a8      	b.n	80020a8 <_printf_i+0x150>
 8002156:	6923      	ldr	r3, [r4, #16]
 8002158:	4632      	mov	r2, r6
 800215a:	4649      	mov	r1, r9
 800215c:	4640      	mov	r0, r8
 800215e:	47d0      	blx	sl
 8002160:	3001      	adds	r0, #1
 8002162:	d0ab      	beq.n	80020bc <_printf_i+0x164>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	079b      	lsls	r3, r3, #30
 8002168:	d413      	bmi.n	8002192 <_printf_i+0x23a>
 800216a:	68e0      	ldr	r0, [r4, #12]
 800216c:	9b03      	ldr	r3, [sp, #12]
 800216e:	4298      	cmp	r0, r3
 8002170:	bfb8      	it	lt
 8002172:	4618      	movlt	r0, r3
 8002174:	e7a4      	b.n	80020c0 <_printf_i+0x168>
 8002176:	2301      	movs	r3, #1
 8002178:	4632      	mov	r2, r6
 800217a:	4649      	mov	r1, r9
 800217c:	4640      	mov	r0, r8
 800217e:	47d0      	blx	sl
 8002180:	3001      	adds	r0, #1
 8002182:	d09b      	beq.n	80020bc <_printf_i+0x164>
 8002184:	3501      	adds	r5, #1
 8002186:	68e3      	ldr	r3, [r4, #12]
 8002188:	9903      	ldr	r1, [sp, #12]
 800218a:	1a5b      	subs	r3, r3, r1
 800218c:	42ab      	cmp	r3, r5
 800218e:	dcf2      	bgt.n	8002176 <_printf_i+0x21e>
 8002190:	e7eb      	b.n	800216a <_printf_i+0x212>
 8002192:	2500      	movs	r5, #0
 8002194:	f104 0619 	add.w	r6, r4, #25
 8002198:	e7f5      	b.n	8002186 <_printf_i+0x22e>
 800219a:	bf00      	nop
 800219c:	0800246d 	.word	0x0800246d
 80021a0:	0800247e 	.word	0x0800247e

080021a4 <memcpy>:
 80021a4:	440a      	add	r2, r1
 80021a6:	4291      	cmp	r1, r2
 80021a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80021ac:	d100      	bne.n	80021b0 <memcpy+0xc>
 80021ae:	4770      	bx	lr
 80021b0:	b510      	push	{r4, lr}
 80021b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021ba:	4291      	cmp	r1, r2
 80021bc:	d1f9      	bne.n	80021b2 <memcpy+0xe>
 80021be:	bd10      	pop	{r4, pc}

080021c0 <memmove>:
 80021c0:	4288      	cmp	r0, r1
 80021c2:	b510      	push	{r4, lr}
 80021c4:	eb01 0402 	add.w	r4, r1, r2
 80021c8:	d902      	bls.n	80021d0 <memmove+0x10>
 80021ca:	4284      	cmp	r4, r0
 80021cc:	4623      	mov	r3, r4
 80021ce:	d807      	bhi.n	80021e0 <memmove+0x20>
 80021d0:	1e43      	subs	r3, r0, #1
 80021d2:	42a1      	cmp	r1, r4
 80021d4:	d008      	beq.n	80021e8 <memmove+0x28>
 80021d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021de:	e7f8      	b.n	80021d2 <memmove+0x12>
 80021e0:	4402      	add	r2, r0
 80021e2:	4601      	mov	r1, r0
 80021e4:	428a      	cmp	r2, r1
 80021e6:	d100      	bne.n	80021ea <memmove+0x2a>
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80021f2:	e7f7      	b.n	80021e4 <memmove+0x24>

080021f4 <_free_r>:
 80021f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021f6:	2900      	cmp	r1, #0
 80021f8:	d048      	beq.n	800228c <_free_r+0x98>
 80021fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021fe:	9001      	str	r0, [sp, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f1a1 0404 	sub.w	r4, r1, #4
 8002206:	bfb8      	it	lt
 8002208:	18e4      	addlt	r4, r4, r3
 800220a:	f000 f8d3 	bl	80023b4 <__malloc_lock>
 800220e:	4a20      	ldr	r2, [pc, #128]	; (8002290 <_free_r+0x9c>)
 8002210:	9801      	ldr	r0, [sp, #4]
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	4615      	mov	r5, r2
 8002216:	b933      	cbnz	r3, 8002226 <_free_r+0x32>
 8002218:	6063      	str	r3, [r4, #4]
 800221a:	6014      	str	r4, [r2, #0]
 800221c:	b003      	add	sp, #12
 800221e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002222:	f000 b8cd 	b.w	80023c0 <__malloc_unlock>
 8002226:	42a3      	cmp	r3, r4
 8002228:	d90b      	bls.n	8002242 <_free_r+0x4e>
 800222a:	6821      	ldr	r1, [r4, #0]
 800222c:	1862      	adds	r2, r4, r1
 800222e:	4293      	cmp	r3, r2
 8002230:	bf04      	itt	eq
 8002232:	681a      	ldreq	r2, [r3, #0]
 8002234:	685b      	ldreq	r3, [r3, #4]
 8002236:	6063      	str	r3, [r4, #4]
 8002238:	bf04      	itt	eq
 800223a:	1852      	addeq	r2, r2, r1
 800223c:	6022      	streq	r2, [r4, #0]
 800223e:	602c      	str	r4, [r5, #0]
 8002240:	e7ec      	b.n	800221c <_free_r+0x28>
 8002242:	461a      	mov	r2, r3
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b10b      	cbz	r3, 800224c <_free_r+0x58>
 8002248:	42a3      	cmp	r3, r4
 800224a:	d9fa      	bls.n	8002242 <_free_r+0x4e>
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	1855      	adds	r5, r2, r1
 8002250:	42a5      	cmp	r5, r4
 8002252:	d10b      	bne.n	800226c <_free_r+0x78>
 8002254:	6824      	ldr	r4, [r4, #0]
 8002256:	4421      	add	r1, r4
 8002258:	1854      	adds	r4, r2, r1
 800225a:	42a3      	cmp	r3, r4
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	d1dd      	bne.n	800221c <_free_r+0x28>
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	6053      	str	r3, [r2, #4]
 8002266:	4421      	add	r1, r4
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	e7d7      	b.n	800221c <_free_r+0x28>
 800226c:	d902      	bls.n	8002274 <_free_r+0x80>
 800226e:	230c      	movs	r3, #12
 8002270:	6003      	str	r3, [r0, #0]
 8002272:	e7d3      	b.n	800221c <_free_r+0x28>
 8002274:	6825      	ldr	r5, [r4, #0]
 8002276:	1961      	adds	r1, r4, r5
 8002278:	428b      	cmp	r3, r1
 800227a:	bf04      	itt	eq
 800227c:	6819      	ldreq	r1, [r3, #0]
 800227e:	685b      	ldreq	r3, [r3, #4]
 8002280:	6063      	str	r3, [r4, #4]
 8002282:	bf04      	itt	eq
 8002284:	1949      	addeq	r1, r1, r5
 8002286:	6021      	streq	r1, [r4, #0]
 8002288:	6054      	str	r4, [r2, #4]
 800228a:	e7c7      	b.n	800221c <_free_r+0x28>
 800228c:	b003      	add	sp, #12
 800228e:	bd30      	pop	{r4, r5, pc}
 8002290:	20000110 	.word	0x20000110

08002294 <_malloc_r>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	1ccd      	adds	r5, r1, #3
 8002298:	f025 0503 	bic.w	r5, r5, #3
 800229c:	3508      	adds	r5, #8
 800229e:	2d0c      	cmp	r5, #12
 80022a0:	bf38      	it	cc
 80022a2:	250c      	movcc	r5, #12
 80022a4:	2d00      	cmp	r5, #0
 80022a6:	4606      	mov	r6, r0
 80022a8:	db01      	blt.n	80022ae <_malloc_r+0x1a>
 80022aa:	42a9      	cmp	r1, r5
 80022ac:	d903      	bls.n	80022b6 <_malloc_r+0x22>
 80022ae:	230c      	movs	r3, #12
 80022b0:	6033      	str	r3, [r6, #0]
 80022b2:	2000      	movs	r0, #0
 80022b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b6:	f000 f87d 	bl	80023b4 <__malloc_lock>
 80022ba:	4921      	ldr	r1, [pc, #132]	; (8002340 <_malloc_r+0xac>)
 80022bc:	680a      	ldr	r2, [r1, #0]
 80022be:	4614      	mov	r4, r2
 80022c0:	b99c      	cbnz	r4, 80022ea <_malloc_r+0x56>
 80022c2:	4f20      	ldr	r7, [pc, #128]	; (8002344 <_malloc_r+0xb0>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b923      	cbnz	r3, 80022d2 <_malloc_r+0x3e>
 80022c8:	4621      	mov	r1, r4
 80022ca:	4630      	mov	r0, r6
 80022cc:	f000 f862 	bl	8002394 <_sbrk_r>
 80022d0:	6038      	str	r0, [r7, #0]
 80022d2:	4629      	mov	r1, r5
 80022d4:	4630      	mov	r0, r6
 80022d6:	f000 f85d 	bl	8002394 <_sbrk_r>
 80022da:	1c43      	adds	r3, r0, #1
 80022dc:	d123      	bne.n	8002326 <_malloc_r+0x92>
 80022de:	230c      	movs	r3, #12
 80022e0:	6033      	str	r3, [r6, #0]
 80022e2:	4630      	mov	r0, r6
 80022e4:	f000 f86c 	bl	80023c0 <__malloc_unlock>
 80022e8:	e7e3      	b.n	80022b2 <_malloc_r+0x1e>
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	1b5b      	subs	r3, r3, r5
 80022ee:	d417      	bmi.n	8002320 <_malloc_r+0x8c>
 80022f0:	2b0b      	cmp	r3, #11
 80022f2:	d903      	bls.n	80022fc <_malloc_r+0x68>
 80022f4:	6023      	str	r3, [r4, #0]
 80022f6:	441c      	add	r4, r3
 80022f8:	6025      	str	r5, [r4, #0]
 80022fa:	e004      	b.n	8002306 <_malloc_r+0x72>
 80022fc:	6863      	ldr	r3, [r4, #4]
 80022fe:	42a2      	cmp	r2, r4
 8002300:	bf0c      	ite	eq
 8002302:	600b      	streq	r3, [r1, #0]
 8002304:	6053      	strne	r3, [r2, #4]
 8002306:	4630      	mov	r0, r6
 8002308:	f000 f85a 	bl	80023c0 <__malloc_unlock>
 800230c:	f104 000b 	add.w	r0, r4, #11
 8002310:	1d23      	adds	r3, r4, #4
 8002312:	f020 0007 	bic.w	r0, r0, #7
 8002316:	1ac2      	subs	r2, r0, r3
 8002318:	d0cc      	beq.n	80022b4 <_malloc_r+0x20>
 800231a:	1a1b      	subs	r3, r3, r0
 800231c:	50a3      	str	r3, [r4, r2]
 800231e:	e7c9      	b.n	80022b4 <_malloc_r+0x20>
 8002320:	4622      	mov	r2, r4
 8002322:	6864      	ldr	r4, [r4, #4]
 8002324:	e7cc      	b.n	80022c0 <_malloc_r+0x2c>
 8002326:	1cc4      	adds	r4, r0, #3
 8002328:	f024 0403 	bic.w	r4, r4, #3
 800232c:	42a0      	cmp	r0, r4
 800232e:	d0e3      	beq.n	80022f8 <_malloc_r+0x64>
 8002330:	1a21      	subs	r1, r4, r0
 8002332:	4630      	mov	r0, r6
 8002334:	f000 f82e 	bl	8002394 <_sbrk_r>
 8002338:	3001      	adds	r0, #1
 800233a:	d1dd      	bne.n	80022f8 <_malloc_r+0x64>
 800233c:	e7cf      	b.n	80022de <_malloc_r+0x4a>
 800233e:	bf00      	nop
 8002340:	20000110 	.word	0x20000110
 8002344:	20000114 	.word	0x20000114

08002348 <_realloc_r>:
 8002348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234a:	4607      	mov	r7, r0
 800234c:	4614      	mov	r4, r2
 800234e:	460e      	mov	r6, r1
 8002350:	b921      	cbnz	r1, 800235c <_realloc_r+0x14>
 8002352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002356:	4611      	mov	r1, r2
 8002358:	f7ff bf9c 	b.w	8002294 <_malloc_r>
 800235c:	b922      	cbnz	r2, 8002368 <_realloc_r+0x20>
 800235e:	f7ff ff49 	bl	80021f4 <_free_r>
 8002362:	4625      	mov	r5, r4
 8002364:	4628      	mov	r0, r5
 8002366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002368:	f000 f830 	bl	80023cc <_malloc_usable_size_r>
 800236c:	42a0      	cmp	r0, r4
 800236e:	d20f      	bcs.n	8002390 <_realloc_r+0x48>
 8002370:	4621      	mov	r1, r4
 8002372:	4638      	mov	r0, r7
 8002374:	f7ff ff8e 	bl	8002294 <_malloc_r>
 8002378:	4605      	mov	r5, r0
 800237a:	2800      	cmp	r0, #0
 800237c:	d0f2      	beq.n	8002364 <_realloc_r+0x1c>
 800237e:	4631      	mov	r1, r6
 8002380:	4622      	mov	r2, r4
 8002382:	f7ff ff0f 	bl	80021a4 <memcpy>
 8002386:	4631      	mov	r1, r6
 8002388:	4638      	mov	r0, r7
 800238a:	f7ff ff33 	bl	80021f4 <_free_r>
 800238e:	e7e9      	b.n	8002364 <_realloc_r+0x1c>
 8002390:	4635      	mov	r5, r6
 8002392:	e7e7      	b.n	8002364 <_realloc_r+0x1c>

08002394 <_sbrk_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d06      	ldr	r5, [pc, #24]	; (80023b0 <_sbrk_r+0x1c>)
 8002398:	2300      	movs	r3, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	f000 f81e 	bl	80023e0 <_sbrk>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d102      	bne.n	80023ae <_sbrk_r+0x1a>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	b103      	cbz	r3, 80023ae <_sbrk_r+0x1a>
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	20000120 	.word	0x20000120

080023b4 <__malloc_lock>:
 80023b4:	4801      	ldr	r0, [pc, #4]	; (80023bc <__malloc_lock+0x8>)
 80023b6:	f000 b811 	b.w	80023dc <__retarget_lock_acquire_recursive>
 80023ba:	bf00      	nop
 80023bc:	20000128 	.word	0x20000128

080023c0 <__malloc_unlock>:
 80023c0:	4801      	ldr	r0, [pc, #4]	; (80023c8 <__malloc_unlock+0x8>)
 80023c2:	f000 b80c 	b.w	80023de <__retarget_lock_release_recursive>
 80023c6:	bf00      	nop
 80023c8:	20000128 	.word	0x20000128

080023cc <_malloc_usable_size_r>:
 80023cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023d0:	1f18      	subs	r0, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bfbc      	itt	lt
 80023d6:	580b      	ldrlt	r3, [r1, r0]
 80023d8:	18c0      	addlt	r0, r0, r3
 80023da:	4770      	bx	lr

080023dc <__retarget_lock_acquire_recursive>:
 80023dc:	4770      	bx	lr

080023de <__retarget_lock_release_recursive>:
 80023de:	4770      	bx	lr

080023e0 <_sbrk>:
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <_sbrk+0x14>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4602      	mov	r2, r0
 80023e6:	b909      	cbnz	r1, 80023ec <_sbrk+0xc>
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <_sbrk+0x18>)
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	4402      	add	r2, r0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	4770      	bx	lr
 80023f4:	20000118 	.word	0x20000118
 80023f8:	20000130 	.word	0x20000130

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr
