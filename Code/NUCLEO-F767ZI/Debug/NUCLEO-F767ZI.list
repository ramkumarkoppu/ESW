
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080060c8  080060c8  000160c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064fc  080064fc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006504  08006504  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800650c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001ec  080066f8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080066f8  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100e5  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a26  00000000  00000000  000302ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00031d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  000328b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a110  00000000  00000000  000333c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e79e  00000000  00000000  0005d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcda6  00000000  00000000  0006bc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168a14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004208  00000000  00000000  00168a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016cc70  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0016cd3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	080060b0 	.word	0x080060b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	080060b0 	.word	0x080060b0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005ec:	f000 fb4c 	bl	8000c88 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 80005f0:	f000 fc98 	bl	8000f24 <HAL_SYSTICK_IRQHandler>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <TIM2_IRQHandler>:
}
#endif // USE_BASIC_TIMER_EXAMPLE

#if defined( USE_INPUT_CAPTURE_TIMER_EXAMPLE ) || defined( USE_OUTPUT_CAPTURE_TIMER_EXAMPLE )
extern "C" void TIM2_IRQHandler( void )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	// Invoke callback if it exists.
	HAL_TIM_IRQHandler( &hTimer2 );
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <TIM2_IRQHandler+0x10>)
 80005fe:	f001 fc9b 	bl	8001f38 <HAL_TIM_IRQHandler>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000028c 	.word	0x2000028c

0800060c <main>:
#ifdef USE_UART_EXAMPLE
static inline char convert_to_Upper( char c );
#endif // USE_UART_EXAMPLE

int main( void )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000610:	f000 fafd 	bl	8000c0e <HAL_Init>

	// Print current settings of clocks.
	displayClkInfo();
 8000614:	f000 f960 	bl	80008d8 <_ZL14displayClkInfov>

	/* Configure the system clock */
	SystemClock_Config();
 8000618:	f000 f894 	bl	8000744 <_ZL18SystemClock_Configv>

	// Print current settings of clocks.
	displayClkInfo();
 800061c:	f000 f95c 	bl	80008d8 <_ZL14displayClkInfov>
	// Start the Timer.
	HAL_TIM_Base_Start_IT( &hTimer6 );
#endif // USE_BASIC_TIMER_EXAMPLE

#if defined( USE_INPUT_CAPTURE_TIMER_EXAMPLE ) || defined( USE_OUTPUT_CAPTURE_TIMER_EXAMPLE )
	TIM2_init();
 8000620:	f000 f99c 	bl	800095c <_ZL9TIM2_initv>
	LSE_config();
	HAL_TIM_IC_Start_IT( &hTimer2, TIM_CHANNEL_1 );
#endif // USE_OUTPUT_CAPTURE_TIMER_EXAMPLE

#ifdef USE_OUTPUT_CAPTURE_TIMER_EXAMPLE
	if ( HAL_TIM_OC_Start_IT( &hTimer2, TIM_CHANNEL_1 ) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0x8c>)
 8000628:	f001 fb3e 	bl	8001ca8 <HAL_TIM_OC_Start_IT>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf14      	ite	ne
 8000632:	2301      	movne	r3, #1
 8000634:	2300      	moveq	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <main+0x34>
	{
		// Error in Timer Start.
		Error_Handler();
 800063c:	f000 f948 	bl	80008d0 <_ZL13Error_Handlerv>
	}
	if ( HAL_TIM_OC_Start_IT( &hTimer2, TIM_CHANNEL_2 ) != HAL_OK)
 8000640:	2104      	movs	r1, #4
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <main+0x8c>)
 8000644:	f001 fb30 	bl	8001ca8 <HAL_TIM_OC_Start_IT>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf14      	ite	ne
 800064e:	2301      	movne	r3, #1
 8000650:	2300      	moveq	r3, #0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <main+0x50>
	{
		// Error in Timer Start.
		Error_Handler();
 8000658:	f000 f93a 	bl	80008d0 <_ZL13Error_Handlerv>
	}
	if ( HAL_TIM_OC_Start_IT( &hTimer2, TIM_CHANNEL_3 ) != HAL_OK)
 800065c:	2108      	movs	r1, #8
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <main+0x8c>)
 8000660:	f001 fb22 	bl	8001ca8 <HAL_TIM_OC_Start_IT>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf14      	ite	ne
 800066a:	2301      	movne	r3, #1
 800066c:	2300      	moveq	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x6c>
	{
		// Error in Timer Start.
		Error_Handler();
 8000674:	f000 f92c 	bl	80008d0 <_ZL13Error_Handlerv>
	}
	if ( HAL_TIM_OC_Start_IT( &hTimer2, TIM_CHANNEL_4 ) != HAL_OK)
 8000678:	210c      	movs	r1, #12
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <main+0x8c>)
 800067c:	f001 fb14 	bl	8001ca8 <HAL_TIM_OC_Start_IT>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <main+0x88>
	{
		// Error in Timer Start.
		Error_Handler();
 8000690:	f000 f91e 	bl	80008d0 <_ZL13Error_Handlerv>
	}
#endif // USE_OUTPUT_CAPTURE_TIMER_EXAMPLE

	while(true)
 8000694:	e7fe      	b.n	8000694 <main+0x88>
 8000696:	bf00      	nop
 8000698:	2000028c 	.word	0x2000028c

0800069c <HAL_TIM_OC_DelayElapsedCallback>:
}
#endif // USE_BASIC_TIMER_EXAMPLE

#ifdef USE_OUTPUT_CAPTURE_TIMER_EXAMPLE
extern "C" void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	switch ( htim->Channel )
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7f1b      	ldrb	r3, [r3, #28]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	d842      	bhi.n	8000734 <HAL_TIM_OC_DelayElapsedCallback+0x98>
 80006ae:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <HAL_TIM_OC_DelayElapsedCallback+0x18>)
 80006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b4:	080006d5 	.word	0x080006d5
 80006b8:	080006ed 	.word	0x080006ed
 80006bc:	08000735 	.word	0x08000735
 80006c0:	08000705 	.word	0x08000705
 80006c4:	08000735 	.word	0x08000735
 80006c8:	08000735 	.word	0x08000735
 80006cc:	08000735 	.word	0x08000735
 80006d0:	0800071d 	.word	0x0800071d
	{
	case HAL_TIM_ACTIVE_CHANNEL_1:
		// Program the Compare Register.
		__HAL_TIM_SET_COMPARE( htim, TIM_CHANNEL_1, ( HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_1 ) + pulse_values[0] ) );
 80006d4:	2100      	movs	r1, #0
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f001 fdc8 	bl	800226c <HAL_TIM_ReadCapturedValue>
 80006dc:	4601      	mov	r1, r0
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	440a      	add	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80006ea:	e024      	b.n	8000736 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	case HAL_TIM_ACTIVE_CHANNEL_2:
		// Program the Compare Register.
		__HAL_TIM_SET_COMPARE( htim, TIM_CHANNEL_2, ( HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_2 ) + pulse_values[1] ) );
 80006ec:	2104      	movs	r1, #4
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f001 fdbc 	bl	800226c <HAL_TIM_ReadCapturedValue>
 80006f4:	4601      	mov	r1, r0
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	440a      	add	r2, r1
 8000700:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8000702:	e018      	b.n	8000736 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	case HAL_TIM_ACTIVE_CHANNEL_3:
		// Program the Compare Register.
		__HAL_TIM_SET_COMPARE( htim, TIM_CHANNEL_3, ( HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_3 ) + pulse_values[2] ) );
 8000704:	2108      	movs	r1, #8
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f001 fdb0 	bl	800226c <HAL_TIM_ReadCapturedValue>
 800070c:	4601      	mov	r1, r0
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000710:	689a      	ldr	r2, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	440a      	add	r2, r1
 8000718:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800071a:	e00c      	b.n	8000736 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	case HAL_TIM_ACTIVE_CHANNEL_4:
		// Program the Compare Register.
		__HAL_TIM_SET_COMPARE( htim, TIM_CHANNEL_4, ( HAL_TIM_ReadCapturedValue( htim, TIM_CHANNEL_4 ) + pulse_values[3] ) );
 800071c:	210c      	movs	r1, #12
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f001 fda4 	bl	800226c <HAL_TIM_ReadCapturedValue>
 8000724:	4601      	mov	r1, r0
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000728:	68da      	ldr	r2, [r3, #12]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	440a      	add	r2, r1
 8000730:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000732:	e000      	b.n	8000736 <HAL_TIM_OC_DelayElapsedCallback+0x9a>
	default:
		break;
 8000734:	bf00      	nop
	}
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000

08000744 <_ZL18SystemClock_Configv>:
#endif // USE_OUTPUT_CAPTURE_TIMER_EXAMPLE

static void SystemClock_Config( void )
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b096      	sub	sp, #88	; 0x58
 8000748:	af00      	add	r7, sp, #0
	// Configure the Clock Source.
	RCC_OscInitTypeDef Osc_init{0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fe4e 	bl	80033f4 <memset>

	/* Configure PLL to generate 50MHz clock for SYSCLK using HSE as source. */

	// This configuration requires Power Scale 1 and Over drive OFF.
	__HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b3d      	ldr	r3, [pc, #244]	; (8000850 <_ZL18SystemClock_Configv+0x10c>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a3c      	ldr	r2, [pc, #240]	; (8000850 <_ZL18SystemClock_Configv+0x10c>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <_ZL18SystemClock_Configv+0x10c>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <_ZL18SystemClock_Configv+0x110>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a37      	ldr	r2, [pc, #220]	; (8000854 <_ZL18SystemClock_Configv+0x110>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <_ZL18SystemClock_Configv+0x110>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_OVERDRIVE_DISABLE();
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <_ZL18SystemClock_Configv+0x110>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a31      	ldr	r2, [pc, #196]	; (8000854 <_ZL18SystemClock_Configv+0x110>)
 800078e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000792:	6013      	str	r3, [r2, #0]

	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
	Osc_init.HSEState = RCC_HSE_BYPASS;
 8000798:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	Osc_init.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_init.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
	Osc_init.PLL.PLLN = 50;
 80007ac:	2332      	movs	r3, #50	; 0x32
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
	/* End of 120Mhz specific configuration */
	Osc_init.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	Osc_init.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50

	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fd69 	bl	8001298 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <_ZL18SystemClock_Configv+0x96>
	{
		// Error in Oscillator or PLL configuration.
		Error_Handler();
 80007d6:	f000 f87b 	bl	80008d0 <_ZL13Error_Handlerv>
	}

	// Configure the various clocks.
	RCC_ClkInitTypeDef Clk_init{0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
	Clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007ea:	230f      	movs	r3, #15
 80007ec:	60fb      	str	r3, [r7, #12]
	Clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
	std::uint32_t flash_latency{FLASH_LATENCY_1};
 80007f2:	2301      	movs	r3, #1
 80007f4:	657b      	str	r3, [r7, #84]	; 0x54
	Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;	// for 50HHz HCLK.
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
	Clk_init.APB1CLKDivider = RCC_HCLK_DIV1;	// for 50HHz PCLK1.
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
	Clk_init.APB2CLKDivider = RCC_HCLK_DIV1;	// for 50HHz PCLK2.
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
	if ( HAL_RCC_ClockConfig( &Clk_init, flash_latency ) != HAL_OK )
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fff3 	bl	80017f4 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf14      	ite	ne
 8000814:	2301      	movne	r3, #1
 8000816:	2300      	moveq	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <_ZL18SystemClock_Configv+0xde>
	{
		// Error in Clock configuration.
		Error_Handler();
 800081e:	f000 f857 	bl	80008d0 <_ZL13Error_Handlerv>
	}

	// Disable HSI
	__HAL_RCC_HSI_DISABLE();
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <_ZL18SystemClock_Configv+0x10c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <_ZL18SystemClock_Configv+0x10c>)
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	6013      	str	r3, [r2, #0]

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 800082e:	2004      	movs	r0, #4
 8000830:	f000 fb5c 	bl	8000eec <HAL_SYSTICK_CLKSourceConfig>
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
 8000834:	f001 f9ac 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8000838:	4603      	mov	r3, r0
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <_ZL18SystemClock_Configv+0x114>)
 800083c:	fba2 2303 	umull	r2, r3, r2, r3
 8000840:	099b      	lsrs	r3, r3, #6
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fb45 	bl	8000ed2 <HAL_SYSTICK_Config>
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000
 8000858:	10624dd3 	.word	0x10624dd3

0800085c <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	std::memset( &huart3, 0, sizeof(huart3) );
 8000860:	2284      	movs	r2, #132	; 0x84
 8000862:	2100      	movs	r1, #0
 8000864:	4818      	ldr	r0, [pc, #96]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 8000866:	f002 fdc5 	bl	80033f4 <memset>
	/* UART High level initilization */
	huart3.Instance = USART3;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <_ZL10UART3_Initv+0x70>)
 800086e:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 8000872:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000876:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 800088c:	220c      	movs	r2, #12
 800088e:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init( &huart3 ) != HAL_OK)
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <_ZL10UART3_Initv+0x6c>)
 80008aa:	f002 f88c 	bl	80029c6 <HAL_UART_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <_ZL10UART3_Initv+0x66>
	{
		// Initialization Error.
		Error_Handler();
 80008be:	f000 f807 	bl	80008d0 <_ZL13Error_Handlerv>
	}
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000208 	.word	0x20000208
 80008cc:	40004800 	.word	0x40004800

080008d0 <_ZL13Error_Handlerv>:
}
#endif
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	for (;;);
 80008d4:	e7fe      	b.n	80008d4 <_ZL13Error_Handlerv+0x4>
	...

080008d8 <_ZL14displayClkInfov>:
}

static void displayClkInfo( void )
{
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80008de:	af02      	add	r7, sp, #8
	char msg[1024];

	/* Configure the UART for debug console */
	UART3_Init();
 80008e0:	f7ff ffbc 	bl	800085c <_ZL10UART3_Initv>

	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 80008e4:	f001 f872 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 80008e8:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <_ZL14displayClkInfov+0x78>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	0c9d      	lsrs	r5, r3, #18
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 80008f2:	f001 f94d 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 80008f6:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <_ZL14displayClkInfov+0x78>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9e      	lsrs	r6, r3, #18
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 8000900:	f001 f952 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000904:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_ZL14displayClkInfov+0x78>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	0c9c      	lsrs	r4, r3, #18
			( HAL_RCC_GetSysClockFreq() / 1000000 ), ( HAL_RCC_GetHCLKFreq() / 1000000 ), ( HAL_RCC_GetPCLK1Freq() / 1000000 ), ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 800090e:	f001 f95f 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8000912:	4603      	mov	r3, r0
	std::sprintf (msg, "SYSCLK:%luMHz, HCLK:%luMHz, PCLK1:%luMHz, PCLK2:%luMHz\r\n",
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <_ZL14displayClkInfov+0x78>)
 8000916:	fba2 2303 	umull	r2, r3, r2, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	4638      	mov	r0, r7
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	9400      	str	r4, [sp, #0]
 8000922:	4633      	mov	r3, r6
 8000924:	462a      	mov	r2, r5
 8000926:	490b      	ldr	r1, [pc, #44]	; (8000954 <_ZL14displayClkInfov+0x7c>)
 8000928:	f003 f9b0 	bl	8003c8c <siprintf>

	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 800092c:	463b      	mov	r3, r7
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc86 	bl	8000240 <strlen>
 8000934:	4603      	mov	r3, r0
 8000936:	b29a      	uxth	r2, r3
 8000938:	4639      	mov	r1, r7
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <_ZL14displayClkInfov+0x80>)
 8000940:	f002 f88f 	bl	8002a62 <HAL_UART_Transmit>
}
 8000944:	bf00      	nop
 8000946:	f207 4704 	addw	r7, r7, #1028	; 0x404
 800094a:	46bd      	mov	sp, r7
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094e:	bf00      	nop
 8000950:	431bde83 	.word	0x431bde83
 8000954:	080060c8 	.word	0x080060c8
 8000958:	20000208 	.word	0x20000208

0800095c <_ZL9TIM2_initv>:
}
#endif // USE_BASIC_TIMER_EXAMPLE

#if defined( USE_INPUT_CAPTURE_TIMER_EXAMPLE ) || defined( USE_OUTPUT_CAPTURE_TIMER_EXAMPLE )
static void TIM2_init( void )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
	hTimer2.Instance = TIM2;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <_ZL9TIM2_initv+0xa0>)
 8000964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000968:	601a      	str	r2, [r3, #0]
	hTimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <_ZL9TIM2_initv+0xa0>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	hTimer2.Init.Prescaler = 0x01; // Run Timer at 25MHz.
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <_ZL9TIM2_initv+0xa0>)
 8000972:	2201      	movs	r2, #1
 8000974:	605a      	str	r2, [r3, #4]
	hTimer2.Init.Period = 0xFFFFFFFFU;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <_ZL9TIM2_initv+0xa0>)
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	60da      	str	r2, [r3, #12]
	if ( HAL_TIM_OC_Init( &hTimer2 ) != HAL_OK )
 800097e:	481f      	ldr	r0, [pc, #124]	; (80009fc <_ZL9TIM2_initv+0xa0>)
 8000980:	f001 f93a 	bl	8001bf8 <HAL_TIM_OC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <_ZL9TIM2_initv+0x3c>
	{
		// Error in Timer Initialization.
		Error_Handler();
 8000994:	f7ff ff9c 	bl	80008d0 <_ZL13Error_Handlerv>
	}

	TIM_OC_InitTypeDef Tim2_OC_config{0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]
	Tim2_OC_config.OCMode = TIM_OCMODE_TOGGLE;
 80009aa:	2330      	movs	r3, #48	; 0x30
 80009ac:	603b      	str	r3, [r7, #0]
	Tim2_OC_config.OCNPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
	for ( std::uint8_t OC_idx{0}; OC_idx < OC_CHANNELS; OC_idx++ )
 80009b2:	2300      	movs	r3, #0
 80009b4:	77fb      	strb	r3, [r7, #31]
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d81a      	bhi.n	80009f2 <_ZL9TIM2_initv+0x96>
	{
		Tim2_OC_config.Pulse = pulse_values[OC_idx];
 80009bc:	7ffb      	ldrb	r3, [r7, #31]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <_ZL9TIM2_initv+0xa4>)
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	607b      	str	r3, [r7, #4]
		if ( HAL_TIM_OC_ConfigChannel( &hTimer2, &Tim2_OC_config, (TIM_CHANNEL_1 + (OC_idx * 4)) ) != HAL_OK)
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	461a      	mov	r2, r3
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <_ZL9TIM2_initv+0xa0>)
 80009d2:	f001 fbd1 	bl	8002178 <HAL_TIM_OC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf14      	ite	ne
 80009dc:	2301      	movne	r3, #1
 80009de:	2300      	moveq	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <_ZL9TIM2_initv+0x8e>
		{
			// Error in Timer Output Channel Configuration.
			Error_Handler();
 80009e6:	f7ff ff73 	bl	80008d0 <_ZL13Error_Handlerv>
	for ( std::uint8_t OC_idx{0}; OC_idx < OC_CHANNELS; OC_idx++ )
 80009ea:	7ffb      	ldrb	r3, [r7, #31]
 80009ec:	3301      	adds	r3, #1
 80009ee:	77fb      	strb	r3, [r7, #31]
 80009f0:	e7e1      	b.n	80009b6 <_ZL9TIM2_initv+0x5a>
		}
	}
}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000028c 	.word	0x2000028c
 8000a00:	20000000 	.word	0x20000000

08000a04 <HAL_MspInit>:
#include <cstring>
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 fa2d 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x40>)
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <HAL_MspInit+0x40>)
 8000a14:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a18:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority( UsageFault_IRQn, 0, 0 );
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f06f 0009 	mvn.w	r0, #9
 8000a22:	f000 fa2c 	bl	8000e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( BusFault_IRQn, 0, 0 );
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f06f 000a 	mvn.w	r0, #10
 8000a2e:	f000 fa26 	bl	8000e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority( MemoryManagement_IRQn, 0, 0 );
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	f06f 000b 	mvn.w	r0, #11
 8000a3a:	f000 fa20 	bl	8000e7e <HAL_NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit( UART_HandleTypeDef *huart )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a94:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init( GPIOD, &USART3_gpio_config );
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000aae:	f000 fa47 	bl	8000f40 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority( USART3_IRQn, 0x0F, 0 );
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	2027      	movs	r0, #39	; 0x27
 8000ab8:	f000 f9e1 	bl	8000e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( USART3_IRQn );
 8000abc:	2027      	movs	r0, #39	; 0x27
 8000abe:	f000 f9fa 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <HAL_TIM_OC_MspInit>:
}
#endif // USE_INPUT_CAPTURE_TIMER_EXAMPLE

#ifdef USE_OUTPUT_CAPTURE_TIMER_EXAMPLE
extern "C" void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	// Enable the clock for the TIM2.
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]

	/* Configure GPIO pins (PA0 (TIM2-CH1), PB3 (TIM2-CH2), PA2 (TIM2-CH3), PA3 (TIM2-CH4)) as Timer 2 output channels. */
	GPIO_InitTypeDef tim2_ch_gpios{0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
	tim2_ch_gpios.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3;
 8000b04:	230d      	movs	r3, #13
 8000b06:	617b      	str	r3, [r7, #20]
	tim2_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
	tim2_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
	// Enable the Clock for GPIOA.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
	HAL_GPIO_Init( GPIOA, &tim2_ch_gpios );
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <HAL_TIM_OC_MspInit+0xbc>)
 8000b30:	f000 fa06 	bl	8000f40 <HAL_GPIO_Init>

	std::memset( &tim2_ch_gpios, 0, sizeof(tim2_ch_gpios) );
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2214      	movs	r2, #20
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fc59 	bl	80033f4 <memset>
	tim2_ch_gpios.Pin = GPIO_PIN_3;
 8000b42:	2308      	movs	r3, #8
 8000b44:	617b      	str	r3, [r7, #20]
	tim2_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
	tim2_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	// Enable the Clock for GPIOB.
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_TIM_OC_MspInit+0xb8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init( GPIOB, &tim2_ch_gpios );
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_TIM_OC_MspInit+0xc0>)
 8000b6e:	f000 f9e7 	bl	8000f40 <HAL_GPIO_Init>

	// Enable TIM2 IRQ.
	HAL_NVIC_SetPriority( TIM2_IRQn, 15, 0 );
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	201c      	movs	r0, #28
 8000b78:	f000 f981 	bl	8000e7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8000b7c:	201c      	movs	r0, #28
 8000b7e:	f000 f99a 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400

08000b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 fbdf 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd0d 	bl	800060c <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000c00:	0800650c 	.word	0x0800650c
  ldr r2, =_sbss
 8000c04:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000c08:	200002f8 	.word	0x200002f8

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>

08000c0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 f928 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 f805 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1e:	f7ff fef1 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f943 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 f90b 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000010 	.word	0x20000010
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000014 	.word	0x20000014

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000018 	.word	0x20000018
 8000cac:	200002e4 	.word	0x200002e4

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200002e4 	.word	0x200002e4

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	05fa0000 	.word	0x05fa0000

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d106      	bne.n	8000f08 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f06:	e005      	b.n	8000f14 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f0e:	f023 0304 	bic.w	r3, r3, #4
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f28:	f000 f802 	bl	8000f30 <HAL_SYSTICK_Callback>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e175      	b.n	800124c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8164 	bne.w	8001246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x56>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80be 	beq.w	8001246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b66      	ldr	r3, [pc, #408]	; (8001264 <HAL_GPIO_Init+0x324>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a65      	ldr	r2, [pc, #404]	; (8001264 <HAL_GPIO_Init+0x324>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_GPIO_Init+0x324>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e2:	4a61      	ldr	r2, [pc, #388]	; (8001268 <HAL_GPIO_Init+0x328>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d037      	beq.n	800117e <HAL_GPIO_Init+0x23e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a57      	ldr	r2, [pc, #348]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d031      	beq.n	800117a <HAL_GPIO_Init+0x23a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a56      	ldr	r2, [pc, #344]	; (8001274 <HAL_GPIO_Init+0x334>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d02b      	beq.n	8001176 <HAL_GPIO_Init+0x236>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a55      	ldr	r2, [pc, #340]	; (8001278 <HAL_GPIO_Init+0x338>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d025      	beq.n	8001172 <HAL_GPIO_Init+0x232>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a54      	ldr	r2, [pc, #336]	; (800127c <HAL_GPIO_Init+0x33c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d01f      	beq.n	800116e <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a53      	ldr	r2, [pc, #332]	; (8001280 <HAL_GPIO_Init+0x340>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x22a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_GPIO_Init+0x344>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a51      	ldr	r2, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x348>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a50      	ldr	r2, [pc, #320]	; (800128c <HAL_GPIO_Init+0x34c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x350>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x21a>
 8001156:	2309      	movs	r3, #9
 8001158:	e012      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800115a:	230a      	movs	r3, #10
 800115c:	e010      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800115e:	2308      	movs	r3, #8
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001162:	2307      	movs	r3, #7
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x240>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x240>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x328>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a34      	ldr	r2, [pc, #208]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a29      	ldr	r2, [pc, #164]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_GPIO_Init+0x354>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_GPIO_Init+0x354>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_GPIO_Init+0x354>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_GPIO_Init+0x354>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae86 	bls.w	8000f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40021c00 	.word	0x40021c00
 800128c:	40022000 	.word	0x40022000
 8001290:	40022400 	.word	0x40022400
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e29b      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8087 	beq.w	80013ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012bc:	4b96      	ldr	r3, [pc, #600]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d00c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c8:	4b93      	ldr	r3, [pc, #588]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d112      	bne.n	80012fa <HAL_RCC_OscConfig+0x62>
 80012d4:	4b90      	ldr	r3, [pc, #576]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e0:	d10b      	bne.n	80012fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4b8d      	ldr	r3, [pc, #564]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d06c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x130>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d168      	bne.n	80013c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e275      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x7a>
 8001304:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a83      	ldr	r2, [pc, #524]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e02e      	b.n	8001370 <HAL_RCC_OscConfig+0xd8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x9c>
 800131a:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7e      	ldr	r2, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a7b      	ldr	r2, [pc, #492]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800132c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xd8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0xc0>
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a75      	ldr	r2, [pc, #468]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b73      	ldr	r3, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xd8>
 8001358:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fc9a 	bl	8000cb0 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fc96 	bl	8000cb0 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e229      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b61      	ldr	r3, [pc, #388]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc86 	bl	8000cb0 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc82 	bl	8000cb0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e215      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x110>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d069      	beq.n	80014aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d6:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x190>
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x17a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1e9      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	493d      	ldr	r1, [pc, #244]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e040      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d023      	beq.n	8001478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a38      	ldr	r2, [pc, #224]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fc38 	bl	8000cb0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fc34 	bl	8000cb0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1c7      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4929      	ldr	r1, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
 8001476:	e018      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc14 	bl	8000cb0 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fc10 	bl	8000cb0 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1a3      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d038      	beq.n	8001528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d019      	beq.n	80014f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fbf1 	bl	8000cb0 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fbed 	bl	8000cb0 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e180      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x23a>
 80014f0:	e01a      	b.n	8001528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_RCC_OscConfig+0x280>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbd7 	bl	8000cb0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fbd3 	bl	8000cb0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d903      	bls.n	800151c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e166      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
 8001518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a4 	beq.w	800167e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a88      	ldr	r2, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155e:	4b83      	ldr	r3, [pc, #524]	; (800176c <HAL_RCC_OscConfig+0x4d4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800156a:	4b80      	ldr	r3, [pc, #512]	; (800176c <HAL_RCC_OscConfig+0x4d4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7f      	ldr	r2, [pc, #508]	; (800176c <HAL_RCC_OscConfig+0x4d4>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fb9b 	bl	8000cb0 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fb97 	bl	8000cb0 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e12a      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001590:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x4d4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x31a>
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a6f      	ldr	r2, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e02d      	b.n	800160e <HAL_RCC_OscConfig+0x376>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x33c>
 80015ba:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a67      	ldr	r2, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	e01c      	b.n	800160e <HAL_RCC_OscConfig+0x376>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x35e>
 80015dc:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a61      	ldr	r2, [pc, #388]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
 80015e8:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x376>
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5b      	ldr	r2, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d015      	beq.n	8001642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fb4b 	bl	8000cb0 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fb47 	bl	8000cb0 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0d8      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ee      	beq.n	800161e <HAL_RCC_OscConfig+0x386>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fb35 	bl	8000cb0 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff fb31 	bl	8000cb0 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0c2      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d105      	bne.n	800167e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a3c      	ldr	r2, [pc, #240]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80ae 	beq.w	80017e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d06d      	beq.n	8001770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d14b      	bne.n	8001734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb02 	bl	8000cb0 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fafe 	bl	8000cb0 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e091      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	071b      	lsls	r3, r3, #28
 80016fa:	491b      	ldr	r1, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fad0 	bl	8000cb0 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff facc 	bl	8000cb0 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e05f      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x47c>
 8001732:	e057      	b.n	80017e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 800173a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fab6 	bl	8000cb0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fab2 	bl	8000cb0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e045      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_RCC_OscConfig+0x4d0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x4b0>
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x54c>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_RCC_OscConfig+0x558>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d030      	beq.n	80017e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d129      	bne.n	80017e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d122      	bne.n	80017e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d119      	bne.n	80017e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d10f      	bne.n	80017e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 020f 	bic.w	r2, r3, #15
 8001822:	4965      	ldr	r1, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800185a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800185e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e8:	f7ff f9e2 	bl	8000cb0 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f9de 	bl	8000cb0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 020f 	bic.w	r2, r3, #15
 800192e:	4922      	ldr	r1, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1cc>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1d0>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f93e 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08006104 	.word	0x08006104
 80019c4:	20000010 	.word	0x20000010
 80019c8:	20000014 	.word	0x20000014

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d00d      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x40>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	f200 80bd 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x34>
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80019fe:	e0b7      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b61      	ldr	r3, [pc, #388]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a02:	60bb      	str	r3, [r7, #8]
      break;
 8001a04:	e0b7      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a06:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a08:	60bb      	str	r3, [r7, #8]
      break;
 8001a0a:	e0b4      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04d      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	ea02 0800 	and.w	r8, r2, r0
 8001a3a:	ea03 0901 	and.w	r9, r3, r1
 8001a3e:	4640      	mov	r0, r8
 8001a40:	4649      	mov	r1, r9
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	014b      	lsls	r3, r1, #5
 8001a4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a50:	0142      	lsls	r2, r0, #5
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	ebb0 0008 	subs.w	r0, r0, r8
 8001a5a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	018b      	lsls	r3, r1, #6
 8001a68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a6c:	0182      	lsls	r2, r0, #6
 8001a6e:	1a12      	subs	r2, r2, r0
 8001a70:	eb63 0301 	sbc.w	r3, r3, r1
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	00d9      	lsls	r1, r3, #3
 8001a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a82:	00d0      	lsls	r0, r2, #3
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	eb12 0208 	adds.w	r2, r2, r8
 8001a8c:	eb43 0309 	adc.w	r3, r3, r9
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	0259      	lsls	r1, r3, #9
 8001a9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a9e:	0250      	lsls	r0, r2, #9
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	f7fe fc1e 	bl	80002f0 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e04a      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	ea02 0400 	and.w	r4, r2, r0
 8001ad6:	ea03 0501 	and.w	r5, r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	014b      	lsls	r3, r1, #5
 8001ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aec:	0142      	lsls	r2, r0, #5
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	1b00      	subs	r0, r0, r4
 8001af4:	eb61 0105 	sbc.w	r1, r1, r5
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	018b      	lsls	r3, r1, #6
 8001b02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b06:	0182      	lsls	r2, r0, #6
 8001b08:	1a12      	subs	r2, r2, r0
 8001b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	f04f 0100 	mov.w	r1, #0
 8001b16:	00d9      	lsls	r1, r3, #3
 8001b18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b1c:	00d0      	lsls	r0, r2, #3
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	1912      	adds	r2, r2, r4
 8001b24:	eb45 0303 	adc.w	r3, r5, r3
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	0299      	lsls	r1, r3, #10
 8001b32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b36:	0290      	lsls	r0, r2, #10
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f7fe fbd2 	bl	80002f0 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	60bb      	str	r3, [r7, #8]
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b72:	60bb      	str	r3, [r7, #8]
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	68bb      	ldr	r3, [r7, #8]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200

08001b90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000010 	.word	0x20000010

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff0 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0a9b      	lsrs	r3, r3, #10
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08006114 	.word	0x08006114

08001bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd4:	f7ff ffdc 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0b5b      	lsrs	r3, r3, #13
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08006114 	.word	0x08006114

08001bf8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e049      	b.n	8001c9e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe ff58 	bl	8000ad4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 fb84 	bl	8002344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_TIM_OC_Start_IT+0x28>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e03c      	b.n	8001d4a <HAL_TIM_OC_Start_IT+0xa2>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d109      	bne.n	8001cea <HAL_TIM_OC_Start_IT+0x42>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e02f      	b.n	8001d4a <HAL_TIM_OC_Start_IT+0xa2>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d109      	bne.n	8001d04 <HAL_TIM_OC_Start_IT+0x5c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	bf14      	ite	ne
 8001cfc:	2301      	movne	r3, #1
 8001cfe:	2300      	moveq	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e022      	b.n	8001d4a <HAL_TIM_OC_Start_IT+0xa2>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d109      	bne.n	8001d1e <HAL_TIM_OC_Start_IT+0x76>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e015      	b.n	8001d4a <HAL_TIM_OC_Start_IT+0xa2>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d109      	bne.n	8001d38 <HAL_TIM_OC_Start_IT+0x90>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e008      	b.n	8001d4a <HAL_TIM_OC_Start_IT+0xa2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0dd      	b.n	8001f0e <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_OC_Start_IT+0xba>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	e023      	b.n	8001daa <HAL_TIM_OC_Start_IT+0x102>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_OC_Start_IT+0xca>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	e01b      	b.n	8001daa <HAL_TIM_OC_Start_IT+0x102>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_OC_Start_IT+0xda>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	e013      	b.n	8001daa <HAL_TIM_OC_Start_IT+0x102>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d104      	bne.n	8001d92 <HAL_TIM_OC_Start_IT+0xea>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d90:	e00b      	b.n	8001daa <HAL_TIM_OC_Start_IT+0x102>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d104      	bne.n	8001da2 <HAL_TIM_OC_Start_IT+0xfa>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da0:	e003      	b.n	8001daa <HAL_TIM_OC_Start_IT+0x102>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d841      	bhi.n	8001e34 <HAL_TIM_OC_Start_IT+0x18c>
 8001db0:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <HAL_TIM_OC_Start_IT+0x110>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001ded 	.word	0x08001ded
 8001dbc:	08001e35 	.word	0x08001e35
 8001dc0:	08001e35 	.word	0x08001e35
 8001dc4:	08001e35 	.word	0x08001e35
 8001dc8:	08001dff 	.word	0x08001dff
 8001dcc:	08001e35 	.word	0x08001e35
 8001dd0:	08001e35 	.word	0x08001e35
 8001dd4:	08001e35 	.word	0x08001e35
 8001dd8:	08001e11 	.word	0x08001e11
 8001ddc:	08001e35 	.word	0x08001e35
 8001de0:	08001e35 	.word	0x08001e35
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e23 	.word	0x08001e23
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0202 	orr.w	r2, r2, #2
 8001dfa:	60da      	str	r2, [r3, #12]
      break;
 8001dfc:	e01d      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0204 	orr.w	r2, r2, #4
 8001e0c:	60da      	str	r2, [r3, #12]
      break;
 8001e0e:	e014      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0208 	orr.w	r2, r2, #8
 8001e1e:	60da      	str	r2, [r3, #12]
      break;
 8001e20:	e00b      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0210 	orr.w	r2, r2, #16
 8001e30:	60da      	str	r2, [r3, #12]
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
      break;
 8001e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d165      	bne.n	8001f0c <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fd79 	bl	8002940 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_TIM_OC_Start_IT+0x270>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d004      	beq.n	8001e62 <HAL_TIM_OC_Start_IT+0x1ba>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <HAL_TIM_OC_Start_IT+0x274>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_OC_Start_IT+0x1be>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_TIM_OC_Start_IT+0x1c0>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <HAL_TIM_OC_Start_IT+0x270>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d022      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d01d      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_TIM_OC_Start_IT+0x278>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d018      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <HAL_TIM_OC_Start_IT+0x27c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_TIM_OC_Start_IT+0x280>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_TIM_OC_Start_IT+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_TIM_OC_Start_IT+0x284>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0x224>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <HAL_TIM_OC_Start_IT+0x288>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d115      	bne.n	8001ef8 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_TIM_OC_Start_IT+0x28c>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d015      	beq.n	8001f0a <HAL_TIM_OC_Start_IT+0x262>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d011      	beq.n	8001f0a <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	e008      	b.n	8001f0a <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e000      	b.n	8001f0c <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40010400 	.word	0x40010400
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40014000 	.word	0x40014000
 8001f30:	40001800 	.word	0x40001800
 8001f34:	00010007 	.word	0x00010007

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9c4 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fb8a 	bl	800069c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f9c7 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f99a 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fb60 	bl	800069c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f99d 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f970 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fb36 	bl	800069c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f973 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f946 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fb0c 	bl	800069c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f949 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0201 	mvn.w	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f91c 	bl	80022f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fc5b 	bl	800299e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f6:	d10e      	bne.n	8002116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b80      	cmp	r3, #128	; 0x80
 8002104:	d107      	bne.n	8002116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800210e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fc4e 	bl	80029b2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d10e      	bne.n	8002142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d107      	bne.n	8002142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800213a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f8f7 	bl	8002330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d10e      	bne.n	800216e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b20      	cmp	r3, #32
 800215c:	d107      	bne.n	800216e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 0220 	mvn.w	r2, #32
 8002166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fc0e 	bl	800298a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002192:	2302      	movs	r3, #2
 8002194:	e066      	b.n	8002264 <HAL_TIM_OC_ConfigChannel+0xec>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b14      	cmp	r3, #20
 80021a2:	d857      	bhi.n	8002254 <HAL_TIM_OC_ConfigChannel+0xdc>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	08002201 	.word	0x08002201
 80021b0:	08002255 	.word	0x08002255
 80021b4:	08002255 	.word	0x08002255
 80021b8:	08002255 	.word	0x08002255
 80021bc:	0800220f 	.word	0x0800220f
 80021c0:	08002255 	.word	0x08002255
 80021c4:	08002255 	.word	0x08002255
 80021c8:	08002255 	.word	0x08002255
 80021cc:	0800221d 	.word	0x0800221d
 80021d0:	08002255 	.word	0x08002255
 80021d4:	08002255 	.word	0x08002255
 80021d8:	08002255 	.word	0x08002255
 80021dc:	0800222b 	.word	0x0800222b
 80021e0:	08002255 	.word	0x08002255
 80021e4:	08002255 	.word	0x08002255
 80021e8:	08002255 	.word	0x08002255
 80021ec:	08002239 	.word	0x08002239
 80021f0:	08002255 	.word	0x08002255
 80021f4:	08002255 	.word	0x08002255
 80021f8:	08002255 	.word	0x08002255
 80021fc:	08002247 	.word	0x08002247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f93c 	bl	8002484 <TIM_OC1_SetConfig>
      break;
 800220c:	e025      	b.n	800225a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f9a7 	bl	8002568 <TIM_OC2_SetConfig>
      break;
 800221a:	e01e      	b.n	800225a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fa18 	bl	8002658 <TIM_OC3_SetConfig>
      break;
 8002228:	e017      	b.n	800225a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa87 	bl	8002744 <TIM_OC4_SetConfig>
      break;
 8002236:	e010      	b.n	800225a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fad8 	bl	80027f4 <TIM_OC5_SetConfig>
      break;
 8002244:	e009      	b.n	800225a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fb23 	bl	8002898 <TIM_OC6_SetConfig>
      break;
 8002252:	e002      	b.n	800225a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	75fb      	strb	r3, [r7, #23]
      break;
 8002258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d831      	bhi.n	80022e4 <HAL_TIM_ReadCapturedValue+0x78>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022bd 	.word	0x080022bd
 800228c:	080022e5 	.word	0x080022e5
 8002290:	080022e5 	.word	0x080022e5
 8002294:	080022e5 	.word	0x080022e5
 8002298:	080022c7 	.word	0x080022c7
 800229c:	080022e5 	.word	0x080022e5
 80022a0:	080022e5 	.word	0x080022e5
 80022a4:	080022e5 	.word	0x080022e5
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022e5 	.word	0x080022e5
 80022b0:	080022e5 	.word	0x080022e5
 80022b4:	080022e5 	.word	0x080022e5
 80022b8:	080022db 	.word	0x080022db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	60fb      	str	r3, [r7, #12]

      break;
 80022c4:	e00f      	b.n	80022e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	60fb      	str	r3, [r7, #12]

      break;
 80022ce:	e00a      	b.n	80022e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	60fb      	str	r3, [r7, #12]

      break;
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	60fb      	str	r3, [r7, #12]

      break;
 80022e2:	e000      	b.n	80022e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80022e4:	bf00      	nop
  }

  return tmpreg;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a40      	ldr	r2, [pc, #256]	; (8002458 <TIM_Base_SetConfig+0x114>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d00f      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3d      	ldr	r2, [pc, #244]	; (800245c <TIM_Base_SetConfig+0x118>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00b      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3c      	ldr	r2, [pc, #240]	; (8002460 <TIM_Base_SetConfig+0x11c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3b      	ldr	r2, [pc, #236]	; (8002464 <TIM_Base_SetConfig+0x120>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <TIM_Base_SetConfig+0x124>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d108      	bne.n	8002396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2f      	ldr	r2, [pc, #188]	; (8002458 <TIM_Base_SetConfig+0x114>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d027      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2c      	ldr	r2, [pc, #176]	; (800245c <TIM_Base_SetConfig+0x118>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d023      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <TIM_Base_SetConfig+0x11c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <TIM_Base_SetConfig+0x120>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01b      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a29      	ldr	r2, [pc, #164]	; (8002468 <TIM_Base_SetConfig+0x124>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d017      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <TIM_Base_SetConfig+0x128>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <TIM_Base_SetConfig+0x12c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00f      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <TIM_Base_SetConfig+0x130>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <TIM_Base_SetConfig+0x134>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a24      	ldr	r2, [pc, #144]	; (800247c <TIM_Base_SetConfig+0x138>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a23      	ldr	r2, [pc, #140]	; (8002480 <TIM_Base_SetConfig+0x13c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <TIM_Base_SetConfig+0x114>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0xf8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <TIM_Base_SetConfig+0x124>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d103      	bne.n	8002444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	615a      	str	r2, [r3, #20]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40010000 	.word	0x40010000
 800245c:	40000400 	.word	0x40000400
 8002460:	40000800 	.word	0x40000800
 8002464:	40000c00 	.word	0x40000c00
 8002468:	40010400 	.word	0x40010400
 800246c:	40014000 	.word	0x40014000
 8002470:	40014400 	.word	0x40014400
 8002474:	40014800 	.word	0x40014800
 8002478:	40001800 	.word	0x40001800
 800247c:	40001c00 	.word	0x40001c00
 8002480:	40002000 	.word	0x40002000

08002484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0201 	bic.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <TIM_OC1_SetConfig+0xd8>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f023 0302 	bic.w	r3, r3, #2
 80024cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <TIM_OC1_SetConfig+0xdc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_OC1_SetConfig+0x64>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a20      	ldr	r2, [pc, #128]	; (8002564 <TIM_OC1_SetConfig+0xe0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10c      	bne.n	8002502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0308 	bic.w	r3, r3, #8
 80024ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a16      	ldr	r2, [pc, #88]	; (8002560 <TIM_OC1_SetConfig+0xdc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d003      	beq.n	8002512 <TIM_OC1_SetConfig+0x8e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <TIM_OC1_SetConfig+0xe0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d111      	bne.n	8002536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	621a      	str	r2, [r3, #32]
}
 8002550:	bf00      	nop
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	fffeff8f 	.word	0xfffeff8f
 8002560:	40010000 	.word	0x40010000
 8002564:	40010400 	.word	0x40010400

08002568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f023 0210 	bic.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <TIM_OC2_SetConfig+0xe4>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0320 	bic.w	r3, r3, #32
 80025b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <TIM_OC2_SetConfig+0xe8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d003      	beq.n	80025d0 <TIM_OC2_SetConfig+0x68>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <TIM_OC2_SetConfig+0xec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d10d      	bne.n	80025ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a18      	ldr	r2, [pc, #96]	; (8002650 <TIM_OC2_SetConfig+0xe8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_OC2_SetConfig+0x94>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <TIM_OC2_SetConfig+0xec>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d113      	bne.n	8002624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800260a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	feff8fff 	.word	0xfeff8fff
 8002650:	40010000 	.word	0x40010000
 8002654:	40010400 	.word	0x40010400

08002658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <TIM_OC3_SetConfig+0xe0>)
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0303 	bic.w	r3, r3, #3
 800268e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <TIM_OC3_SetConfig+0xe4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <TIM_OC3_SetConfig+0x66>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <TIM_OC3_SetConfig+0xe8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10d      	bne.n	80026da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a17      	ldr	r2, [pc, #92]	; (800273c <TIM_OC3_SetConfig+0xe4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_OC3_SetConfig+0x92>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <TIM_OC3_SetConfig+0xe8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d113      	bne.n	8002712 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	621a      	str	r2, [r3, #32]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	fffeff8f 	.word	0xfffeff8f
 800273c:	40010000 	.word	0x40010000
 8002740:	40010400 	.word	0x40010400

08002744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <TIM_OC4_SetConfig+0xa4>)
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800278e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	031b      	lsls	r3, r3, #12
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <TIM_OC4_SetConfig+0xa8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <TIM_OC4_SetConfig+0x68>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <TIM_OC4_SetConfig+0xac>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d109      	bne.n	80027c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	621a      	str	r2, [r3, #32]
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	feff8fff 	.word	0xfeff8fff
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40010400 	.word	0x40010400

080027f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <TIM_OC5_SetConfig+0x98>)
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <TIM_OC5_SetConfig+0x9c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d003      	beq.n	8002852 <TIM_OC5_SetConfig+0x5e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <TIM_OC5_SetConfig+0xa0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d109      	bne.n	8002866 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	621a      	str	r2, [r3, #32]
}
 8002880:	bf00      	nop
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	fffeff8f 	.word	0xfffeff8f
 8002890:	40010000 	.word	0x40010000
 8002894:	40010400 	.word	0x40010400

08002898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <TIM_OC6_SetConfig+0x9c>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	051b      	lsls	r3, r3, #20
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a13      	ldr	r2, [pc, #76]	; (8002938 <TIM_OC6_SetConfig+0xa0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_OC6_SetConfig+0x60>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <TIM_OC6_SetConfig+0xa4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d109      	bne.n	800290c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	029b      	lsls	r3, r3, #10
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	feff8fff 	.word	0xfeff8fff
 8002938:	40010000 	.word	0x40010000
 800293c:	40010400 	.word	0x40010400

08002940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2201      	movs	r2, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e040      	b.n	8002a5a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe f82d 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8bf 	bl	8002b88 <UART_SetConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e022      	b.n	8002a5a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb15 	bl	800304c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fb9c 	bl	8003190 <UART_CheckIdleState>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	; 0x28
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	f040 8081 	bne.w	8002b7e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Transmit+0x26>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e079      	b.n	8002b80 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x38>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e072      	b.n	8002b80 <HAL_UART_Transmit+0x11e>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2221      	movs	r2, #33	; 0x21
 8002aae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe f8fe 	bl	8000cb0 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	88fa      	ldrh	r2, [r7, #6]
 8002ac2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d108      	bne.n	8002ae2 <HAL_UART_Transmit+0x80>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	e003      	b.n	8002aea <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002af2:	e02c      	b.n	8002b4e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fb8f 	bl	8003222 <UART_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e038      	b.n	8002b80 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	3302      	adds	r3, #2
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e007      	b.n	8002b3c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1cc      	bne.n	8002af4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fb5c 	bl	8003222 <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e005      	b.n	8002b80 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4ba7      	ldr	r3, [pc, #668]	; (8002e50 <UART_SetConfig+0x2c8>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	6979      	ldr	r1, [r7, #20]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a95      	ldr	r2, [pc, #596]	; (8002e54 <UART_SetConfig+0x2cc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d120      	bne.n	8002c46 <UART_SetConfig+0xbe>
 8002c04:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d816      	bhi.n	8002c40 <UART_SetConfig+0xb8>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <UART_SetConfig+0x90>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c35 	.word	0x08002c35
 8002c20:	08002c2f 	.word	0x08002c2f
 8002c24:	08002c3b 	.word	0x08002c3b
 8002c28:	2301      	movs	r3, #1
 8002c2a:	77fb      	strb	r3, [r7, #31]
 8002c2c:	e14f      	b.n	8002ece <UART_SetConfig+0x346>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	77fb      	strb	r3, [r7, #31]
 8002c32:	e14c      	b.n	8002ece <UART_SetConfig+0x346>
 8002c34:	2304      	movs	r3, #4
 8002c36:	77fb      	strb	r3, [r7, #31]
 8002c38:	e149      	b.n	8002ece <UART_SetConfig+0x346>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	e146      	b.n	8002ece <UART_SetConfig+0x346>
 8002c40:	2310      	movs	r3, #16
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e143      	b.n	8002ece <UART_SetConfig+0x346>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a84      	ldr	r2, [pc, #528]	; (8002e5c <UART_SetConfig+0x2d4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d132      	bne.n	8002cb6 <UART_SetConfig+0x12e>
 8002c50:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d828      	bhi.n	8002cb0 <UART_SetConfig+0x128>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <UART_SetConfig+0xdc>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002c99 	.word	0x08002c99
 8002c68:	08002cb1 	.word	0x08002cb1
 8002c6c:	08002cb1 	.word	0x08002cb1
 8002c70:	08002cb1 	.word	0x08002cb1
 8002c74:	08002ca5 	.word	0x08002ca5
 8002c78:	08002cb1 	.word	0x08002cb1
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002cb1 	.word	0x08002cb1
 8002c84:	08002c9f 	.word	0x08002c9f
 8002c88:	08002cb1 	.word	0x08002cb1
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cb1 	.word	0x08002cb1
 8002c94:	08002cab 	.word	0x08002cab
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e117      	b.n	8002ece <UART_SetConfig+0x346>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	77fb      	strb	r3, [r7, #31]
 8002ca2:	e114      	b.n	8002ece <UART_SetConfig+0x346>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	77fb      	strb	r3, [r7, #31]
 8002ca8:	e111      	b.n	8002ece <UART_SetConfig+0x346>
 8002caa:	2308      	movs	r3, #8
 8002cac:	77fb      	strb	r3, [r7, #31]
 8002cae:	e10e      	b.n	8002ece <UART_SetConfig+0x346>
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e10b      	b.n	8002ece <UART_SetConfig+0x346>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a69      	ldr	r2, [pc, #420]	; (8002e60 <UART_SetConfig+0x2d8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d120      	bne.n	8002d02 <UART_SetConfig+0x17a>
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cca:	2b30      	cmp	r3, #48	; 0x30
 8002ccc:	d013      	beq.n	8002cf6 <UART_SetConfig+0x16e>
 8002cce:	2b30      	cmp	r3, #48	; 0x30
 8002cd0:	d814      	bhi.n	8002cfc <UART_SetConfig+0x174>
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d009      	beq.n	8002cea <UART_SetConfig+0x162>
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d810      	bhi.n	8002cfc <UART_SetConfig+0x174>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <UART_SetConfig+0x15c>
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d006      	beq.n	8002cf0 <UART_SetConfig+0x168>
 8002ce2:	e00b      	b.n	8002cfc <UART_SetConfig+0x174>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e0f1      	b.n	8002ece <UART_SetConfig+0x346>
 8002cea:	2302      	movs	r3, #2
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e0ee      	b.n	8002ece <UART_SetConfig+0x346>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e0eb      	b.n	8002ece <UART_SetConfig+0x346>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e0e8      	b.n	8002ece <UART_SetConfig+0x346>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e0e5      	b.n	8002ece <UART_SetConfig+0x346>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <UART_SetConfig+0x2dc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d120      	bne.n	8002d4e <UART_SetConfig+0x1c6>
 8002d0c:	4b52      	ldr	r3, [pc, #328]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d16:	2bc0      	cmp	r3, #192	; 0xc0
 8002d18:	d013      	beq.n	8002d42 <UART_SetConfig+0x1ba>
 8002d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d1c:	d814      	bhi.n	8002d48 <UART_SetConfig+0x1c0>
 8002d1e:	2b80      	cmp	r3, #128	; 0x80
 8002d20:	d009      	beq.n	8002d36 <UART_SetConfig+0x1ae>
 8002d22:	2b80      	cmp	r3, #128	; 0x80
 8002d24:	d810      	bhi.n	8002d48 <UART_SetConfig+0x1c0>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <UART_SetConfig+0x1a8>
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d006      	beq.n	8002d3c <UART_SetConfig+0x1b4>
 8002d2e:	e00b      	b.n	8002d48 <UART_SetConfig+0x1c0>
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e0cb      	b.n	8002ece <UART_SetConfig+0x346>
 8002d36:	2302      	movs	r3, #2
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e0c8      	b.n	8002ece <UART_SetConfig+0x346>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e0c5      	b.n	8002ece <UART_SetConfig+0x346>
 8002d42:	2308      	movs	r3, #8
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	e0c2      	b.n	8002ece <UART_SetConfig+0x346>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e0bf      	b.n	8002ece <UART_SetConfig+0x346>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a45      	ldr	r2, [pc, #276]	; (8002e68 <UART_SetConfig+0x2e0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d125      	bne.n	8002da4 <UART_SetConfig+0x21c>
 8002d58:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d66:	d017      	beq.n	8002d98 <UART_SetConfig+0x210>
 8002d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6c:	d817      	bhi.n	8002d9e <UART_SetConfig+0x216>
 8002d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d72:	d00b      	beq.n	8002d8c <UART_SetConfig+0x204>
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d78:	d811      	bhi.n	8002d9e <UART_SetConfig+0x216>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <UART_SetConfig+0x1fe>
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d82:	d006      	beq.n	8002d92 <UART_SetConfig+0x20a>
 8002d84:	e00b      	b.n	8002d9e <UART_SetConfig+0x216>
 8002d86:	2300      	movs	r3, #0
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e0a0      	b.n	8002ece <UART_SetConfig+0x346>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e09d      	b.n	8002ece <UART_SetConfig+0x346>
 8002d92:	2304      	movs	r3, #4
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e09a      	b.n	8002ece <UART_SetConfig+0x346>
 8002d98:	2308      	movs	r3, #8
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e097      	b.n	8002ece <UART_SetConfig+0x346>
 8002d9e:	2310      	movs	r3, #16
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e094      	b.n	8002ece <UART_SetConfig+0x346>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <UART_SetConfig+0x2e4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d125      	bne.n	8002dfa <UART_SetConfig+0x272>
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dbc:	d017      	beq.n	8002dee <UART_SetConfig+0x266>
 8002dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dc2:	d817      	bhi.n	8002df4 <UART_SetConfig+0x26c>
 8002dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc8:	d00b      	beq.n	8002de2 <UART_SetConfig+0x25a>
 8002dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dce:	d811      	bhi.n	8002df4 <UART_SetConfig+0x26c>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <UART_SetConfig+0x254>
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d006      	beq.n	8002de8 <UART_SetConfig+0x260>
 8002dda:	e00b      	b.n	8002df4 <UART_SetConfig+0x26c>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e075      	b.n	8002ece <UART_SetConfig+0x346>
 8002de2:	2302      	movs	r3, #2
 8002de4:	77fb      	strb	r3, [r7, #31]
 8002de6:	e072      	b.n	8002ece <UART_SetConfig+0x346>
 8002de8:	2304      	movs	r3, #4
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e06f      	b.n	8002ece <UART_SetConfig+0x346>
 8002dee:	2308      	movs	r3, #8
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e06c      	b.n	8002ece <UART_SetConfig+0x346>
 8002df4:	2310      	movs	r3, #16
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e069      	b.n	8002ece <UART_SetConfig+0x346>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <UART_SetConfig+0x2e8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d137      	bne.n	8002e74 <UART_SetConfig+0x2ec>
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <UART_SetConfig+0x2d0>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e12:	d017      	beq.n	8002e44 <UART_SetConfig+0x2bc>
 8002e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e18:	d817      	bhi.n	8002e4a <UART_SetConfig+0x2c2>
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d00b      	beq.n	8002e38 <UART_SetConfig+0x2b0>
 8002e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e24:	d811      	bhi.n	8002e4a <UART_SetConfig+0x2c2>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <UART_SetConfig+0x2aa>
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d006      	beq.n	8002e3e <UART_SetConfig+0x2b6>
 8002e30:	e00b      	b.n	8002e4a <UART_SetConfig+0x2c2>
 8002e32:	2300      	movs	r3, #0
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e04a      	b.n	8002ece <UART_SetConfig+0x346>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e047      	b.n	8002ece <UART_SetConfig+0x346>
 8002e3e:	2304      	movs	r3, #4
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e044      	b.n	8002ece <UART_SetConfig+0x346>
 8002e44:	2308      	movs	r3, #8
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e041      	b.n	8002ece <UART_SetConfig+0x346>
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e03e      	b.n	8002ece <UART_SetConfig+0x346>
 8002e50:	efff69f3 	.word	0xefff69f3
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40004400 	.word	0x40004400
 8002e60:	40004800 	.word	0x40004800
 8002e64:	40004c00 	.word	0x40004c00
 8002e68:	40005000 	.word	0x40005000
 8002e6c:	40011400 	.word	0x40011400
 8002e70:	40007800 	.word	0x40007800
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a71      	ldr	r2, [pc, #452]	; (8003040 <UART_SetConfig+0x4b8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d125      	bne.n	8002eca <UART_SetConfig+0x342>
 8002e7e:	4b71      	ldr	r3, [pc, #452]	; (8003044 <UART_SetConfig+0x4bc>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e8c:	d017      	beq.n	8002ebe <UART_SetConfig+0x336>
 8002e8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e92:	d817      	bhi.n	8002ec4 <UART_SetConfig+0x33c>
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e98:	d00b      	beq.n	8002eb2 <UART_SetConfig+0x32a>
 8002e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9e:	d811      	bhi.n	8002ec4 <UART_SetConfig+0x33c>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <UART_SetConfig+0x324>
 8002ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea8:	d006      	beq.n	8002eb8 <UART_SetConfig+0x330>
 8002eaa:	e00b      	b.n	8002ec4 <UART_SetConfig+0x33c>
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e00d      	b.n	8002ece <UART_SetConfig+0x346>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e00a      	b.n	8002ece <UART_SetConfig+0x346>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e007      	b.n	8002ece <UART_SetConfig+0x346>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e004      	b.n	8002ece <UART_SetConfig+0x346>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e001      	b.n	8002ece <UART_SetConfig+0x346>
 8002eca:	2310      	movs	r3, #16
 8002ecc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed6:	d15a      	bne.n	8002f8e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d827      	bhi.n	8002f2e <UART_SetConfig+0x3a6>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x35c>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f11 	.word	0x08002f11
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	08002f2f 	.word	0x08002f2f
 8002ef4:	08002f1f 	.word	0x08002f1f
 8002ef8:	08002f2f 	.word	0x08002f2f
 8002efc:	08002f2f 	.word	0x08002f2f
 8002f00:	08002f2f 	.word	0x08002f2f
 8002f04:	08002f27 	.word	0x08002f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7fe fe4e 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002f0c:	61b8      	str	r0, [r7, #24]
        break;
 8002f0e:	e013      	b.n	8002f38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7fe fe5e 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002f14:	61b8      	str	r0, [r7, #24]
        break;
 8002f16:	e00f      	b.n	8002f38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f18:	4b4b      	ldr	r3, [pc, #300]	; (8003048 <UART_SetConfig+0x4c0>)
 8002f1a:	61bb      	str	r3, [r7, #24]
        break;
 8002f1c:	e00c      	b.n	8002f38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f1e:	f7fe fd55 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002f22:	61b8      	str	r0, [r7, #24]
        break;
 8002f24:	e008      	b.n	8002f38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	61bb      	str	r3, [r7, #24]
        break;
 8002f2c:	e004      	b.n	8002f38 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	77bb      	strb	r3, [r7, #30]
        break;
 8002f36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d074      	beq.n	8003028 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	005a      	lsls	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	d916      	bls.n	8002f88 <UART_SetConfig+0x400>
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d212      	bcs.n	8002f88 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f023 030f 	bic.w	r3, r3, #15
 8002f6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	89fa      	ldrh	r2, [r7, #14]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e04f      	b.n	8003028 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	77bb      	strb	r3, [r7, #30]
 8002f8c:	e04c      	b.n	8003028 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d828      	bhi.n	8002fe6 <UART_SetConfig+0x45e>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <UART_SetConfig+0x414>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fc9 	.word	0x08002fc9
 8002fa4:	08002fd1 	.word	0x08002fd1
 8002fa8:	08002fe7 	.word	0x08002fe7
 8002fac:	08002fd7 	.word	0x08002fd7
 8002fb0:	08002fe7 	.word	0x08002fe7
 8002fb4:	08002fe7 	.word	0x08002fe7
 8002fb8:	08002fe7 	.word	0x08002fe7
 8002fbc:	08002fdf 	.word	0x08002fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7fe fdf2 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	61b8      	str	r0, [r7, #24]
        break;
 8002fc6:	e013      	b.n	8002ff0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fc8:	f7fe fe02 	bl	8001bd0 <HAL_RCC_GetPCLK2Freq>
 8002fcc:	61b8      	str	r0, [r7, #24]
        break;
 8002fce:	e00f      	b.n	8002ff0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <UART_SetConfig+0x4c0>)
 8002fd2:	61bb      	str	r3, [r7, #24]
        break;
 8002fd4:	e00c      	b.n	8002ff0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd6:	f7fe fcf9 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002fda:	61b8      	str	r0, [r7, #24]
        break;
 8002fdc:	e008      	b.n	8002ff0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe2:	61bb      	str	r3, [r7, #24]
        break;
 8002fe4:	e004      	b.n	8002ff0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	77bb      	strb	r3, [r7, #30]
        break;
 8002fee:	bf00      	nop
    }

    if (pclk != 0U)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	085a      	lsrs	r2, r3, #1
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	441a      	add	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d909      	bls.n	8003024 <UART_SetConfig+0x49c>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003016:	d205      	bcs.n	8003024 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	b29a      	uxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	e001      	b.n	8003028 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003034:	7fbb      	ldrb	r3, [r7, #30]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40007c00 	.word	0x40007c00
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400

0800304c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01a      	beq.n	8003162 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314a:	d10a      	bne.n	8003162 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031a0:	f7fd fd86 	bl	8000cb0 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d10e      	bne.n	80031d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f82d 	bl	8003222 <UART_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e023      	b.n	800321a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d10e      	bne.n	80031fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f817 	bl	8003222 <UART_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00d      	b.n	800321a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b09c      	sub	sp, #112	; 0x70
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003232:	e0a5      	b.n	8003380 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	f000 80a1 	beq.w	8003380 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fd fd37 	bl	8000cb0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <UART_WaitOnFlagUntilTimeout+0x32>
 800324e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003250:	2b00      	cmp	r3, #0
 8003252:	d13e      	bne.n	80032d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003268:	667b      	str	r3, [r7, #100]	; 0x64
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003272:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003274:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e6      	bne.n	8003254 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3308      	adds	r3, #8
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	663b      	str	r3, [r7, #96]	; 0x60
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3308      	adds	r3, #8
 80032a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80032a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e5      	bne.n	8003286 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e067      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d04f      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ee:	d147      	bne.n	8003380 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800330e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
 800331a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800331e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e6      	bne.n	80032fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	613b      	str	r3, [r7, #16]
   return(result);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	66bb      	str	r3, [r7, #104]	; 0x68
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800334c:	623a      	str	r2, [r7, #32]
 800334e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	69f9      	ldr	r1, [r7, #28]
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	61bb      	str	r3, [r7, #24]
   return(result);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e010      	b.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	429a      	cmp	r2, r3
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	429a      	cmp	r2, r3
 800339c:	f43f af4a 	beq.w	8003234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3770      	adds	r7, #112	; 0x70
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	; (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	; (80033f0 <__libc_init_array+0x44>)
 80033c0:	f002 fe76 	bl	80060b0 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08006504 	.word	0x08006504
 80033e8:	08006504 	.word	0x08006504
 80033ec:	08006504 	.word	0x08006504
 80033f0:	08006508 	.word	0x08006508

080033f4 <memset>:
 80033f4:	4402      	add	r2, r0
 80033f6:	4603      	mov	r3, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <__cvt>:
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	ed2d 8b02 	vpush	{d8}
 800340a:	eeb0 8b40 	vmov.f64	d8, d0
 800340e:	b085      	sub	sp, #20
 8003410:	4617      	mov	r7, r2
 8003412:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003414:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003416:	ee18 2a90 	vmov	r2, s17
 800341a:	f025 0520 	bic.w	r5, r5, #32
 800341e:	2a00      	cmp	r2, #0
 8003420:	bfb6      	itet	lt
 8003422:	222d      	movlt	r2, #45	; 0x2d
 8003424:	2200      	movge	r2, #0
 8003426:	eeb1 8b40 	vneglt.f64	d8, d0
 800342a:	2d46      	cmp	r5, #70	; 0x46
 800342c:	460c      	mov	r4, r1
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	d004      	beq.n	800343c <__cvt+0x38>
 8003432:	2d45      	cmp	r5, #69	; 0x45
 8003434:	d100      	bne.n	8003438 <__cvt+0x34>
 8003436:	3401      	adds	r4, #1
 8003438:	2102      	movs	r1, #2
 800343a:	e000      	b.n	800343e <__cvt+0x3a>
 800343c:	2103      	movs	r1, #3
 800343e:	ab03      	add	r3, sp, #12
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	ab02      	add	r3, sp, #8
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4622      	mov	r2, r4
 8003448:	4633      	mov	r3, r6
 800344a:	eeb0 0b48 	vmov.f64	d0, d8
 800344e:	f000 fccb 	bl	8003de8 <_dtoa_r>
 8003452:	2d47      	cmp	r5, #71	; 0x47
 8003454:	d109      	bne.n	800346a <__cvt+0x66>
 8003456:	07fb      	lsls	r3, r7, #31
 8003458:	d407      	bmi.n	800346a <__cvt+0x66>
 800345a:	9b03      	ldr	r3, [sp, #12]
 800345c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800345e:	1a1b      	subs	r3, r3, r0
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	b005      	add	sp, #20
 8003464:	ecbd 8b02 	vpop	{d8}
 8003468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346a:	2d46      	cmp	r5, #70	; 0x46
 800346c:	eb00 0204 	add.w	r2, r0, r4
 8003470:	d10c      	bne.n	800348c <__cvt+0x88>
 8003472:	7803      	ldrb	r3, [r0, #0]
 8003474:	2b30      	cmp	r3, #48	; 0x30
 8003476:	d107      	bne.n	8003488 <__cvt+0x84>
 8003478:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	bf1c      	itt	ne
 8003482:	f1c4 0401 	rsbne	r4, r4, #1
 8003486:	6034      	strne	r4, [r6, #0]
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	441a      	add	r2, r3
 800348c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	bf08      	it	eq
 8003496:	9203      	streq	r2, [sp, #12]
 8003498:	2130      	movs	r1, #48	; 0x30
 800349a:	9b03      	ldr	r3, [sp, #12]
 800349c:	4293      	cmp	r3, r2
 800349e:	d2dc      	bcs.n	800345a <__cvt+0x56>
 80034a0:	1c5c      	adds	r4, r3, #1
 80034a2:	9403      	str	r4, [sp, #12]
 80034a4:	7019      	strb	r1, [r3, #0]
 80034a6:	e7f8      	b.n	800349a <__cvt+0x96>

080034a8 <__exponent>:
 80034a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034aa:	4603      	mov	r3, r0
 80034ac:	2900      	cmp	r1, #0
 80034ae:	bfb8      	it	lt
 80034b0:	4249      	neglt	r1, r1
 80034b2:	f803 2b02 	strb.w	r2, [r3], #2
 80034b6:	bfb4      	ite	lt
 80034b8:	222d      	movlt	r2, #45	; 0x2d
 80034ba:	222b      	movge	r2, #43	; 0x2b
 80034bc:	2909      	cmp	r1, #9
 80034be:	7042      	strb	r2, [r0, #1]
 80034c0:	dd2a      	ble.n	8003518 <__exponent+0x70>
 80034c2:	f10d 0407 	add.w	r4, sp, #7
 80034c6:	46a4      	mov	ip, r4
 80034c8:	270a      	movs	r7, #10
 80034ca:	46a6      	mov	lr, r4
 80034cc:	460a      	mov	r2, r1
 80034ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80034d2:	fb07 1516 	mls	r5, r7, r6, r1
 80034d6:	3530      	adds	r5, #48	; 0x30
 80034d8:	2a63      	cmp	r2, #99	; 0x63
 80034da:	f104 34ff 	add.w	r4, r4, #4294967295
 80034de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80034e2:	4631      	mov	r1, r6
 80034e4:	dcf1      	bgt.n	80034ca <__exponent+0x22>
 80034e6:	3130      	adds	r1, #48	; 0x30
 80034e8:	f1ae 0502 	sub.w	r5, lr, #2
 80034ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80034f0:	1c44      	adds	r4, r0, #1
 80034f2:	4629      	mov	r1, r5
 80034f4:	4561      	cmp	r1, ip
 80034f6:	d30a      	bcc.n	800350e <__exponent+0x66>
 80034f8:	f10d 0209 	add.w	r2, sp, #9
 80034fc:	eba2 020e 	sub.w	r2, r2, lr
 8003500:	4565      	cmp	r5, ip
 8003502:	bf88      	it	hi
 8003504:	2200      	movhi	r2, #0
 8003506:	4413      	add	r3, r2
 8003508:	1a18      	subs	r0, r3, r0
 800350a:	b003      	add	sp, #12
 800350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003512:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003516:	e7ed      	b.n	80034f4 <__exponent+0x4c>
 8003518:	2330      	movs	r3, #48	; 0x30
 800351a:	3130      	adds	r1, #48	; 0x30
 800351c:	7083      	strb	r3, [r0, #2]
 800351e:	70c1      	strb	r1, [r0, #3]
 8003520:	1d03      	adds	r3, r0, #4
 8003522:	e7f1      	b.n	8003508 <__exponent+0x60>
 8003524:	0000      	movs	r0, r0
	...

08003528 <_printf_float>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	b08b      	sub	sp, #44	; 0x2c
 800352e:	460c      	mov	r4, r1
 8003530:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003534:	4616      	mov	r6, r2
 8003536:	461f      	mov	r7, r3
 8003538:	4605      	mov	r5, r0
 800353a:	f001 f9d7 	bl	80048ec <_localeconv_r>
 800353e:	f8d0 b000 	ldr.w	fp, [r0]
 8003542:	4658      	mov	r0, fp
 8003544:	f7fc fe7c 	bl	8000240 <strlen>
 8003548:	2300      	movs	r3, #0
 800354a:	9308      	str	r3, [sp, #32]
 800354c:	f8d8 3000 	ldr.w	r3, [r8]
 8003550:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	3307      	adds	r3, #7
 8003558:	f023 0307 	bic.w	r3, r3, #7
 800355c:	f103 0108 	add.w	r1, r3, #8
 8003560:	f8c8 1000 	str.w	r1, [r8]
 8003564:	4682      	mov	sl, r0
 8003566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800356e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80037d0 <_printf_float+0x2a8>
 8003572:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003576:	eeb0 6bc0 	vabs.f64	d6, d0
 800357a:	eeb4 6b47 	vcmp.f64	d6, d7
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	dd24      	ble.n	80035ce <_printf_float+0xa6>
 8003584:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d502      	bpl.n	8003594 <_printf_float+0x6c>
 800358e:	232d      	movs	r3, #45	; 0x2d
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003594:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <_printf_float+0x2b0>)
 8003596:	4891      	ldr	r0, [pc, #580]	; (80037dc <_printf_float+0x2b4>)
 8003598:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800359c:	bf94      	ite	ls
 800359e:	4698      	movls	r8, r3
 80035a0:	4680      	movhi	r8, r0
 80035a2:	2303      	movs	r3, #3
 80035a4:	6123      	str	r3, [r4, #16]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	2300      	movs	r3, #0
 80035ac:	6022      	str	r2, [r4, #0]
 80035ae:	9304      	str	r3, [sp, #16]
 80035b0:	9700      	str	r7, [sp, #0]
 80035b2:	4633      	mov	r3, r6
 80035b4:	aa09      	add	r2, sp, #36	; 0x24
 80035b6:	4621      	mov	r1, r4
 80035b8:	4628      	mov	r0, r5
 80035ba:	f000 f9d3 	bl	8003964 <_printf_common>
 80035be:	3001      	adds	r0, #1
 80035c0:	f040 808a 	bne.w	80036d8 <_printf_float+0x1b0>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	b00b      	add	sp, #44	; 0x2c
 80035ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	d709      	bvc.n	80035ec <_printf_float+0xc4>
 80035d8:	ee10 3a90 	vmov	r3, s1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bfbc      	itt	lt
 80035e0:	232d      	movlt	r3, #45	; 0x2d
 80035e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80035e6:	487e      	ldr	r0, [pc, #504]	; (80037e0 <_printf_float+0x2b8>)
 80035e8:	4b7e      	ldr	r3, [pc, #504]	; (80037e4 <_printf_float+0x2bc>)
 80035ea:	e7d5      	b.n	8003598 <_printf_float+0x70>
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80035f2:	9104      	str	r1, [sp, #16]
 80035f4:	1c59      	adds	r1, r3, #1
 80035f6:	d13c      	bne.n	8003672 <_printf_float+0x14a>
 80035f8:	2306      	movs	r3, #6
 80035fa:	6063      	str	r3, [r4, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	9303      	str	r3, [sp, #12]
 8003600:	ab08      	add	r3, sp, #32
 8003602:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360a:	ab07      	add	r3, sp, #28
 800360c:	6861      	ldr	r1, [r4, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	f10d 031b 	add.w	r3, sp, #27
 8003616:	4628      	mov	r0, r5
 8003618:	f7ff fef4 	bl	8003404 <__cvt>
 800361c:	9b04      	ldr	r3, [sp, #16]
 800361e:	9907      	ldr	r1, [sp, #28]
 8003620:	2b47      	cmp	r3, #71	; 0x47
 8003622:	4680      	mov	r8, r0
 8003624:	d108      	bne.n	8003638 <_printf_float+0x110>
 8003626:	1cc8      	adds	r0, r1, #3
 8003628:	db02      	blt.n	8003630 <_printf_float+0x108>
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	4299      	cmp	r1, r3
 800362e:	dd41      	ble.n	80036b4 <_printf_float+0x18c>
 8003630:	f1a9 0902 	sub.w	r9, r9, #2
 8003634:	fa5f f989 	uxtb.w	r9, r9
 8003638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800363c:	d820      	bhi.n	8003680 <_printf_float+0x158>
 800363e:	3901      	subs	r1, #1
 8003640:	464a      	mov	r2, r9
 8003642:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003646:	9107      	str	r1, [sp, #28]
 8003648:	f7ff ff2e 	bl	80034a8 <__exponent>
 800364c:	9a08      	ldr	r2, [sp, #32]
 800364e:	9004      	str	r0, [sp, #16]
 8003650:	1813      	adds	r3, r2, r0
 8003652:	2a01      	cmp	r2, #1
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	dc02      	bgt.n	800365e <_printf_float+0x136>
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	07d2      	lsls	r2, r2, #31
 800365c:	d501      	bpl.n	8003662 <_printf_float+0x13a>
 800365e:	3301      	adds	r3, #1
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0a2      	beq.n	80035b0 <_printf_float+0x88>
 800366a:	232d      	movs	r3, #45	; 0x2d
 800366c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003670:	e79e      	b.n	80035b0 <_printf_float+0x88>
 8003672:	9904      	ldr	r1, [sp, #16]
 8003674:	2947      	cmp	r1, #71	; 0x47
 8003676:	d1c1      	bne.n	80035fc <_printf_float+0xd4>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1bf      	bne.n	80035fc <_printf_float+0xd4>
 800367c:	2301      	movs	r3, #1
 800367e:	e7bc      	b.n	80035fa <_printf_float+0xd2>
 8003680:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003684:	d118      	bne.n	80036b8 <_printf_float+0x190>
 8003686:	2900      	cmp	r1, #0
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	dd0b      	ble.n	80036a4 <_printf_float+0x17c>
 800368c:	6121      	str	r1, [r4, #16]
 800368e:	b913      	cbnz	r3, 8003696 <_printf_float+0x16e>
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	07d0      	lsls	r0, r2, #31
 8003694:	d502      	bpl.n	800369c <_printf_float+0x174>
 8003696:	3301      	adds	r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	2300      	movs	r3, #0
 800369e:	65a1      	str	r1, [r4, #88]	; 0x58
 80036a0:	9304      	str	r3, [sp, #16]
 80036a2:	e7de      	b.n	8003662 <_printf_float+0x13a>
 80036a4:	b913      	cbnz	r3, 80036ac <_printf_float+0x184>
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	07d2      	lsls	r2, r2, #31
 80036aa:	d501      	bpl.n	80036b0 <_printf_float+0x188>
 80036ac:	3302      	adds	r3, #2
 80036ae:	e7f4      	b.n	800369a <_printf_float+0x172>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e7f2      	b.n	800369a <_printf_float+0x172>
 80036b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80036b8:	9b08      	ldr	r3, [sp, #32]
 80036ba:	4299      	cmp	r1, r3
 80036bc:	db05      	blt.n	80036ca <_printf_float+0x1a2>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	6121      	str	r1, [r4, #16]
 80036c2:	07d8      	lsls	r0, r3, #31
 80036c4:	d5ea      	bpl.n	800369c <_printf_float+0x174>
 80036c6:	1c4b      	adds	r3, r1, #1
 80036c8:	e7e7      	b.n	800369a <_printf_float+0x172>
 80036ca:	2900      	cmp	r1, #0
 80036cc:	bfd4      	ite	le
 80036ce:	f1c1 0202 	rsble	r2, r1, #2
 80036d2:	2201      	movgt	r2, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	e7e0      	b.n	800369a <_printf_float+0x172>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	055a      	lsls	r2, r3, #21
 80036dc:	d407      	bmi.n	80036ee <_printf_float+0x1c6>
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	4642      	mov	r2, r8
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	d12a      	bne.n	8003742 <_printf_float+0x21a>
 80036ec:	e76a      	b.n	80035c4 <_printf_float+0x9c>
 80036ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80036f2:	f240 80e2 	bls.w	80038ba <_printf_float+0x392>
 80036f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80036fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	d133      	bne.n	800376c <_printf_float+0x244>
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <_printf_float+0x2c0>)
 8003706:	2301      	movs	r3, #1
 8003708:	4631      	mov	r1, r6
 800370a:	4628      	mov	r0, r5
 800370c:	47b8      	blx	r7
 800370e:	3001      	adds	r0, #1
 8003710:	f43f af58 	beq.w	80035c4 <_printf_float+0x9c>
 8003714:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003718:	429a      	cmp	r2, r3
 800371a:	db02      	blt.n	8003722 <_printf_float+0x1fa>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	07d8      	lsls	r0, r3, #31
 8003720:	d50f      	bpl.n	8003742 <_printf_float+0x21a>
 8003722:	4653      	mov	r3, sl
 8003724:	465a      	mov	r2, fp
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	47b8      	blx	r7
 800372c:	3001      	adds	r0, #1
 800372e:	f43f af49 	beq.w	80035c4 <_printf_float+0x9c>
 8003732:	f04f 0800 	mov.w	r8, #0
 8003736:	f104 091a 	add.w	r9, r4, #26
 800373a:	9b08      	ldr	r3, [sp, #32]
 800373c:	3b01      	subs	r3, #1
 800373e:	4543      	cmp	r3, r8
 8003740:	dc09      	bgt.n	8003756 <_printf_float+0x22e>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	079b      	lsls	r3, r3, #30
 8003746:	f100 8108 	bmi.w	800395a <_printf_float+0x432>
 800374a:	68e0      	ldr	r0, [r4, #12]
 800374c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800374e:	4298      	cmp	r0, r3
 8003750:	bfb8      	it	lt
 8003752:	4618      	movlt	r0, r3
 8003754:	e738      	b.n	80035c8 <_printf_float+0xa0>
 8003756:	2301      	movs	r3, #1
 8003758:	464a      	mov	r2, r9
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	f43f af2f 	beq.w	80035c4 <_printf_float+0x9c>
 8003766:	f108 0801 	add.w	r8, r8, #1
 800376a:	e7e6      	b.n	800373a <_printf_float+0x212>
 800376c:	9b07      	ldr	r3, [sp, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	dc3c      	bgt.n	80037ec <_printf_float+0x2c4>
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <_printf_float+0x2c0>)
 8003774:	2301      	movs	r3, #1
 8003776:	4631      	mov	r1, r6
 8003778:	4628      	mov	r0, r5
 800377a:	47b8      	blx	r7
 800377c:	3001      	adds	r0, #1
 800377e:	f43f af21 	beq.w	80035c4 <_printf_float+0x9c>
 8003782:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003786:	4313      	orrs	r3, r2
 8003788:	d102      	bne.n	8003790 <_printf_float+0x268>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	07d9      	lsls	r1, r3, #31
 800378e:	d5d8      	bpl.n	8003742 <_printf_float+0x21a>
 8003790:	4653      	mov	r3, sl
 8003792:	465a      	mov	r2, fp
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	47b8      	blx	r7
 800379a:	3001      	adds	r0, #1
 800379c:	f43f af12 	beq.w	80035c4 <_printf_float+0x9c>
 80037a0:	f04f 0900 	mov.w	r9, #0
 80037a4:	f104 0a1a 	add.w	sl, r4, #26
 80037a8:	9b07      	ldr	r3, [sp, #28]
 80037aa:	425b      	negs	r3, r3
 80037ac:	454b      	cmp	r3, r9
 80037ae:	dc01      	bgt.n	80037b4 <_printf_float+0x28c>
 80037b0:	9b08      	ldr	r3, [sp, #32]
 80037b2:	e795      	b.n	80036e0 <_printf_float+0x1b8>
 80037b4:	2301      	movs	r3, #1
 80037b6:	4652      	mov	r2, sl
 80037b8:	4631      	mov	r1, r6
 80037ba:	4628      	mov	r0, r5
 80037bc:	47b8      	blx	r7
 80037be:	3001      	adds	r0, #1
 80037c0:	f43f af00 	beq.w	80035c4 <_printf_float+0x9c>
 80037c4:	f109 0901 	add.w	r9, r9, #1
 80037c8:	e7ee      	b.n	80037a8 <_printf_float+0x280>
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w
 80037d0:	ffffffff 	.word	0xffffffff
 80037d4:	7fefffff 	.word	0x7fefffff
 80037d8:	08006120 	.word	0x08006120
 80037dc:	08006124 	.word	0x08006124
 80037e0:	0800612c 	.word	0x0800612c
 80037e4:	08006128 	.word	0x08006128
 80037e8:	08006130 	.word	0x08006130
 80037ec:	9a08      	ldr	r2, [sp, #32]
 80037ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bfa8      	it	ge
 80037f4:	461a      	movge	r2, r3
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	4691      	mov	r9, r2
 80037fa:	dc38      	bgt.n	800386e <_printf_float+0x346>
 80037fc:	2300      	movs	r3, #0
 80037fe:	9305      	str	r3, [sp, #20]
 8003800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003804:	f104 021a 	add.w	r2, r4, #26
 8003808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800380a:	9905      	ldr	r1, [sp, #20]
 800380c:	9304      	str	r3, [sp, #16]
 800380e:	eba3 0309 	sub.w	r3, r3, r9
 8003812:	428b      	cmp	r3, r1
 8003814:	dc33      	bgt.n	800387e <_printf_float+0x356>
 8003816:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800381a:	429a      	cmp	r2, r3
 800381c:	db3c      	blt.n	8003898 <_printf_float+0x370>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	07da      	lsls	r2, r3, #31
 8003822:	d439      	bmi.n	8003898 <_printf_float+0x370>
 8003824:	9a08      	ldr	r2, [sp, #32]
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	9907      	ldr	r1, [sp, #28]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	eba2 0901 	sub.w	r9, r2, r1
 8003830:	4599      	cmp	r9, r3
 8003832:	bfa8      	it	ge
 8003834:	4699      	movge	r9, r3
 8003836:	f1b9 0f00 	cmp.w	r9, #0
 800383a:	dc35      	bgt.n	80038a8 <_printf_float+0x380>
 800383c:	f04f 0800 	mov.w	r8, #0
 8003840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003844:	f104 0a1a 	add.w	sl, r4, #26
 8003848:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	eba3 0309 	sub.w	r3, r3, r9
 8003852:	4543      	cmp	r3, r8
 8003854:	f77f af75 	ble.w	8003742 <_printf_float+0x21a>
 8003858:	2301      	movs	r3, #1
 800385a:	4652      	mov	r2, sl
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	f43f aeae 	beq.w	80035c4 <_printf_float+0x9c>
 8003868:	f108 0801 	add.w	r8, r8, #1
 800386c:	e7ec      	b.n	8003848 <_printf_float+0x320>
 800386e:	4613      	mov	r3, r2
 8003870:	4631      	mov	r1, r6
 8003872:	4642      	mov	r2, r8
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	d1bf      	bne.n	80037fc <_printf_float+0x2d4>
 800387c:	e6a2      	b.n	80035c4 <_printf_float+0x9c>
 800387e:	2301      	movs	r3, #1
 8003880:	4631      	mov	r1, r6
 8003882:	4628      	mov	r0, r5
 8003884:	9204      	str	r2, [sp, #16]
 8003886:	47b8      	blx	r7
 8003888:	3001      	adds	r0, #1
 800388a:	f43f ae9b 	beq.w	80035c4 <_printf_float+0x9c>
 800388e:	9b05      	ldr	r3, [sp, #20]
 8003890:	9a04      	ldr	r2, [sp, #16]
 8003892:	3301      	adds	r3, #1
 8003894:	9305      	str	r3, [sp, #20]
 8003896:	e7b7      	b.n	8003808 <_printf_float+0x2e0>
 8003898:	4653      	mov	r3, sl
 800389a:	465a      	mov	r2, fp
 800389c:	4631      	mov	r1, r6
 800389e:	4628      	mov	r0, r5
 80038a0:	47b8      	blx	r7
 80038a2:	3001      	adds	r0, #1
 80038a4:	d1be      	bne.n	8003824 <_printf_float+0x2fc>
 80038a6:	e68d      	b.n	80035c4 <_printf_float+0x9c>
 80038a8:	9a04      	ldr	r2, [sp, #16]
 80038aa:	464b      	mov	r3, r9
 80038ac:	4442      	add	r2, r8
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d1c1      	bne.n	800383c <_printf_float+0x314>
 80038b8:	e684      	b.n	80035c4 <_printf_float+0x9c>
 80038ba:	9a08      	ldr	r2, [sp, #32]
 80038bc:	2a01      	cmp	r2, #1
 80038be:	dc01      	bgt.n	80038c4 <_printf_float+0x39c>
 80038c0:	07db      	lsls	r3, r3, #31
 80038c2:	d537      	bpl.n	8003934 <_printf_float+0x40c>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4642      	mov	r2, r8
 80038c8:	4631      	mov	r1, r6
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f ae78 	beq.w	80035c4 <_printf_float+0x9c>
 80038d4:	4653      	mov	r3, sl
 80038d6:	465a      	mov	r2, fp
 80038d8:	4631      	mov	r1, r6
 80038da:	4628      	mov	r0, r5
 80038dc:	47b8      	blx	r7
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f ae70 	beq.w	80035c4 <_printf_float+0x9c>
 80038e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80038e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d01b      	beq.n	800392a <_printf_float+0x402>
 80038f2:	9b08      	ldr	r3, [sp, #32]
 80038f4:	f108 0201 	add.w	r2, r8, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	4631      	mov	r1, r6
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b8      	blx	r7
 8003900:	3001      	adds	r0, #1
 8003902:	d10e      	bne.n	8003922 <_printf_float+0x3fa>
 8003904:	e65e      	b.n	80035c4 <_printf_float+0x9c>
 8003906:	2301      	movs	r3, #1
 8003908:	464a      	mov	r2, r9
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f ae57 	beq.w	80035c4 <_printf_float+0x9c>
 8003916:	f108 0801 	add.w	r8, r8, #1
 800391a:	9b08      	ldr	r3, [sp, #32]
 800391c:	3b01      	subs	r3, #1
 800391e:	4543      	cmp	r3, r8
 8003920:	dcf1      	bgt.n	8003906 <_printf_float+0x3de>
 8003922:	9b04      	ldr	r3, [sp, #16]
 8003924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003928:	e6db      	b.n	80036e2 <_printf_float+0x1ba>
 800392a:	f04f 0800 	mov.w	r8, #0
 800392e:	f104 091a 	add.w	r9, r4, #26
 8003932:	e7f2      	b.n	800391a <_printf_float+0x3f2>
 8003934:	2301      	movs	r3, #1
 8003936:	4642      	mov	r2, r8
 8003938:	e7df      	b.n	80038fa <_printf_float+0x3d2>
 800393a:	2301      	movs	r3, #1
 800393c:	464a      	mov	r2, r9
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	47b8      	blx	r7
 8003944:	3001      	adds	r0, #1
 8003946:	f43f ae3d 	beq.w	80035c4 <_printf_float+0x9c>
 800394a:	f108 0801 	add.w	r8, r8, #1
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003952:	1a5b      	subs	r3, r3, r1
 8003954:	4543      	cmp	r3, r8
 8003956:	dcf0      	bgt.n	800393a <_printf_float+0x412>
 8003958:	e6f7      	b.n	800374a <_printf_float+0x222>
 800395a:	f04f 0800 	mov.w	r8, #0
 800395e:	f104 0919 	add.w	r9, r4, #25
 8003962:	e7f4      	b.n	800394e <_printf_float+0x426>

08003964 <_printf_common>:
 8003964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	4616      	mov	r6, r2
 800396a:	4699      	mov	r9, r3
 800396c:	688a      	ldr	r2, [r1, #8]
 800396e:	690b      	ldr	r3, [r1, #16]
 8003970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003974:	4293      	cmp	r3, r2
 8003976:	bfb8      	it	lt
 8003978:	4613      	movlt	r3, r2
 800397a:	6033      	str	r3, [r6, #0]
 800397c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003980:	4607      	mov	r7, r0
 8003982:	460c      	mov	r4, r1
 8003984:	b10a      	cbz	r2, 800398a <_printf_common+0x26>
 8003986:	3301      	adds	r3, #1
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	0699      	lsls	r1, r3, #26
 800398e:	bf42      	ittt	mi
 8003990:	6833      	ldrmi	r3, [r6, #0]
 8003992:	3302      	addmi	r3, #2
 8003994:	6033      	strmi	r3, [r6, #0]
 8003996:	6825      	ldr	r5, [r4, #0]
 8003998:	f015 0506 	ands.w	r5, r5, #6
 800399c:	d106      	bne.n	80039ac <_printf_common+0x48>
 800399e:	f104 0a19 	add.w	sl, r4, #25
 80039a2:	68e3      	ldr	r3, [r4, #12]
 80039a4:	6832      	ldr	r2, [r6, #0]
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	dc26      	bgt.n	80039fa <_printf_common+0x96>
 80039ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039b0:	1e13      	subs	r3, r2, #0
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	bf18      	it	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	0692      	lsls	r2, r2, #26
 80039ba:	d42b      	bmi.n	8003a14 <_printf_common+0xb0>
 80039bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d01e      	beq.n	8003a08 <_printf_common+0xa4>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	68e5      	ldr	r5, [r4, #12]
 80039ce:	6832      	ldr	r2, [r6, #0]
 80039d0:	f003 0306 	and.w	r3, r3, #6
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	bf08      	it	eq
 80039d8:	1aad      	subeq	r5, r5, r2
 80039da:	68a3      	ldr	r3, [r4, #8]
 80039dc:	6922      	ldr	r2, [r4, #16]
 80039de:	bf0c      	ite	eq
 80039e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039e4:	2500      	movne	r5, #0
 80039e6:	4293      	cmp	r3, r2
 80039e8:	bfc4      	itt	gt
 80039ea:	1a9b      	subgt	r3, r3, r2
 80039ec:	18ed      	addgt	r5, r5, r3
 80039ee:	2600      	movs	r6, #0
 80039f0:	341a      	adds	r4, #26
 80039f2:	42b5      	cmp	r5, r6
 80039f4:	d11a      	bne.n	8003a2c <_printf_common+0xc8>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e008      	b.n	8003a0c <_printf_common+0xa8>
 80039fa:	2301      	movs	r3, #1
 80039fc:	4652      	mov	r2, sl
 80039fe:	4649      	mov	r1, r9
 8003a00:	4638      	mov	r0, r7
 8003a02:	47c0      	blx	r8
 8003a04:	3001      	adds	r0, #1
 8003a06:	d103      	bne.n	8003a10 <_printf_common+0xac>
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a10:	3501      	adds	r5, #1
 8003a12:	e7c6      	b.n	80039a2 <_printf_common+0x3e>
 8003a14:	18e1      	adds	r1, r4, r3
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	2030      	movs	r0, #48	; 0x30
 8003a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a1e:	4422      	add	r2, r4
 8003a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a28:	3302      	adds	r3, #2
 8003a2a:	e7c7      	b.n	80039bc <_printf_common+0x58>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4622      	mov	r2, r4
 8003a30:	4649      	mov	r1, r9
 8003a32:	4638      	mov	r0, r7
 8003a34:	47c0      	blx	r8
 8003a36:	3001      	adds	r0, #1
 8003a38:	d0e6      	beq.n	8003a08 <_printf_common+0xa4>
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7d9      	b.n	80039f2 <_printf_common+0x8e>
	...

08003a40 <_printf_i>:
 8003a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	460c      	mov	r4, r1
 8003a46:	4691      	mov	r9, r2
 8003a48:	7e27      	ldrb	r7, [r4, #24]
 8003a4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a4c:	2f78      	cmp	r7, #120	; 0x78
 8003a4e:	4680      	mov	r8, r0
 8003a50:	469a      	mov	sl, r3
 8003a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a56:	d807      	bhi.n	8003a68 <_printf_i+0x28>
 8003a58:	2f62      	cmp	r7, #98	; 0x62
 8003a5a:	d80a      	bhi.n	8003a72 <_printf_i+0x32>
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	f000 80d8 	beq.w	8003c12 <_printf_i+0x1d2>
 8003a62:	2f58      	cmp	r7, #88	; 0x58
 8003a64:	f000 80a3 	beq.w	8003bae <_printf_i+0x16e>
 8003a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a70:	e03a      	b.n	8003ae8 <_printf_i+0xa8>
 8003a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a76:	2b15      	cmp	r3, #21
 8003a78:	d8f6      	bhi.n	8003a68 <_printf_i+0x28>
 8003a7a:	a001      	add	r0, pc, #4	; (adr r0, 8003a80 <_printf_i+0x40>)
 8003a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a80:	08003ad9 	.word	0x08003ad9
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003a69 	.word	0x08003a69
 8003a8c:	08003a69 	.word	0x08003a69
 8003a90:	08003a69 	.word	0x08003a69
 8003a94:	08003a69 	.word	0x08003a69
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003a69 	.word	0x08003a69
 8003aa0:	08003a69 	.word	0x08003a69
 8003aa4:	08003a69 	.word	0x08003a69
 8003aa8:	08003a69 	.word	0x08003a69
 8003aac:	08003bf9 	.word	0x08003bf9
 8003ab0:	08003b1d 	.word	0x08003b1d
 8003ab4:	08003bdb 	.word	0x08003bdb
 8003ab8:	08003a69 	.word	0x08003a69
 8003abc:	08003a69 	.word	0x08003a69
 8003ac0:	08003c1b 	.word	0x08003c1b
 8003ac4:	08003a69 	.word	0x08003a69
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003a69 	.word	0x08003a69
 8003ad0:	08003a69 	.word	0x08003a69
 8003ad4:	08003be3 	.word	0x08003be3
 8003ad8:	680b      	ldr	r3, [r1, #0]
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	600a      	str	r2, [r1, #0]
 8003ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0a3      	b.n	8003c34 <_printf_i+0x1f4>
 8003aec:	6825      	ldr	r5, [r4, #0]
 8003aee:	6808      	ldr	r0, [r1, #0]
 8003af0:	062e      	lsls	r6, r5, #24
 8003af2:	f100 0304 	add.w	r3, r0, #4
 8003af6:	d50a      	bpl.n	8003b0e <_printf_i+0xce>
 8003af8:	6805      	ldr	r5, [r0, #0]
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	da03      	bge.n	8003b08 <_printf_i+0xc8>
 8003b00:	232d      	movs	r3, #45	; 0x2d
 8003b02:	426d      	negs	r5, r5
 8003b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b08:	485e      	ldr	r0, [pc, #376]	; (8003c84 <_printf_i+0x244>)
 8003b0a:	230a      	movs	r3, #10
 8003b0c:	e019      	b.n	8003b42 <_printf_i+0x102>
 8003b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b12:	6805      	ldr	r5, [r0, #0]
 8003b14:	600b      	str	r3, [r1, #0]
 8003b16:	bf18      	it	ne
 8003b18:	b22d      	sxthne	r5, r5
 8003b1a:	e7ef      	b.n	8003afc <_printf_i+0xbc>
 8003b1c:	680b      	ldr	r3, [r1, #0]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	1d18      	adds	r0, r3, #4
 8003b22:	6008      	str	r0, [r1, #0]
 8003b24:	0628      	lsls	r0, r5, #24
 8003b26:	d501      	bpl.n	8003b2c <_printf_i+0xec>
 8003b28:	681d      	ldr	r5, [r3, #0]
 8003b2a:	e002      	b.n	8003b32 <_printf_i+0xf2>
 8003b2c:	0669      	lsls	r1, r5, #25
 8003b2e:	d5fb      	bpl.n	8003b28 <_printf_i+0xe8>
 8003b30:	881d      	ldrh	r5, [r3, #0]
 8003b32:	4854      	ldr	r0, [pc, #336]	; (8003c84 <_printf_i+0x244>)
 8003b34:	2f6f      	cmp	r7, #111	; 0x6f
 8003b36:	bf0c      	ite	eq
 8003b38:	2308      	moveq	r3, #8
 8003b3a:	230a      	movne	r3, #10
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b42:	6866      	ldr	r6, [r4, #4]
 8003b44:	60a6      	str	r6, [r4, #8]
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	bfa2      	ittt	ge
 8003b4a:	6821      	ldrge	r1, [r4, #0]
 8003b4c:	f021 0104 	bicge.w	r1, r1, #4
 8003b50:	6021      	strge	r1, [r4, #0]
 8003b52:	b90d      	cbnz	r5, 8003b58 <_printf_i+0x118>
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	d04d      	beq.n	8003bf4 <_printf_i+0x1b4>
 8003b58:	4616      	mov	r6, r2
 8003b5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b5e:	fb03 5711 	mls	r7, r3, r1, r5
 8003b62:	5dc7      	ldrb	r7, [r0, r7]
 8003b64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b68:	462f      	mov	r7, r5
 8003b6a:	42bb      	cmp	r3, r7
 8003b6c:	460d      	mov	r5, r1
 8003b6e:	d9f4      	bls.n	8003b5a <_printf_i+0x11a>
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d10b      	bne.n	8003b8c <_printf_i+0x14c>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	07df      	lsls	r7, r3, #31
 8003b78:	d508      	bpl.n	8003b8c <_printf_i+0x14c>
 8003b7a:	6923      	ldr	r3, [r4, #16]
 8003b7c:	6861      	ldr	r1, [r4, #4]
 8003b7e:	4299      	cmp	r1, r3
 8003b80:	bfde      	ittt	le
 8003b82:	2330      	movle	r3, #48	; 0x30
 8003b84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b8c:	1b92      	subs	r2, r2, r6
 8003b8e:	6122      	str	r2, [r4, #16]
 8003b90:	f8cd a000 	str.w	sl, [sp]
 8003b94:	464b      	mov	r3, r9
 8003b96:	aa03      	add	r2, sp, #12
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	f7ff fee2 	bl	8003964 <_printf_common>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d14c      	bne.n	8003c3e <_printf_i+0x1fe>
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	b004      	add	sp, #16
 8003baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bae:	4835      	ldr	r0, [pc, #212]	; (8003c84 <_printf_i+0x244>)
 8003bb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	680e      	ldr	r6, [r1, #0]
 8003bb8:	061f      	lsls	r7, r3, #24
 8003bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bbe:	600e      	str	r6, [r1, #0]
 8003bc0:	d514      	bpl.n	8003bec <_printf_i+0x1ac>
 8003bc2:	07d9      	lsls	r1, r3, #31
 8003bc4:	bf44      	itt	mi
 8003bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8003bca:	6023      	strmi	r3, [r4, #0]
 8003bcc:	b91d      	cbnz	r5, 8003bd6 <_printf_i+0x196>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f023 0320 	bic.w	r3, r3, #32
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	e7b0      	b.n	8003b3c <_printf_i+0xfc>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	f043 0320 	orr.w	r3, r3, #32
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	2378      	movs	r3, #120	; 0x78
 8003be4:	4828      	ldr	r0, [pc, #160]	; (8003c88 <_printf_i+0x248>)
 8003be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bea:	e7e3      	b.n	8003bb4 <_printf_i+0x174>
 8003bec:	065e      	lsls	r6, r3, #25
 8003bee:	bf48      	it	mi
 8003bf0:	b2ad      	uxthmi	r5, r5
 8003bf2:	e7e6      	b.n	8003bc2 <_printf_i+0x182>
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	e7bb      	b.n	8003b70 <_printf_i+0x130>
 8003bf8:	680b      	ldr	r3, [r1, #0]
 8003bfa:	6826      	ldr	r6, [r4, #0]
 8003bfc:	6960      	ldr	r0, [r4, #20]
 8003bfe:	1d1d      	adds	r5, r3, #4
 8003c00:	600d      	str	r5, [r1, #0]
 8003c02:	0635      	lsls	r5, r6, #24
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	d501      	bpl.n	8003c0c <_printf_i+0x1cc>
 8003c08:	6018      	str	r0, [r3, #0]
 8003c0a:	e002      	b.n	8003c12 <_printf_i+0x1d2>
 8003c0c:	0671      	lsls	r1, r6, #25
 8003c0e:	d5fb      	bpl.n	8003c08 <_printf_i+0x1c8>
 8003c10:	8018      	strh	r0, [r3, #0]
 8003c12:	2300      	movs	r3, #0
 8003c14:	6123      	str	r3, [r4, #16]
 8003c16:	4616      	mov	r6, r2
 8003c18:	e7ba      	b.n	8003b90 <_printf_i+0x150>
 8003c1a:	680b      	ldr	r3, [r1, #0]
 8003c1c:	1d1a      	adds	r2, r3, #4
 8003c1e:	600a      	str	r2, [r1, #0]
 8003c20:	681e      	ldr	r6, [r3, #0]
 8003c22:	6862      	ldr	r2, [r4, #4]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7fc fb12 	bl	8000250 <memchr>
 8003c2c:	b108      	cbz	r0, 8003c32 <_printf_i+0x1f2>
 8003c2e:	1b80      	subs	r0, r0, r6
 8003c30:	6060      	str	r0, [r4, #4]
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	6123      	str	r3, [r4, #16]
 8003c36:	2300      	movs	r3, #0
 8003c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c3c:	e7a8      	b.n	8003b90 <_printf_i+0x150>
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	4632      	mov	r2, r6
 8003c42:	4649      	mov	r1, r9
 8003c44:	4640      	mov	r0, r8
 8003c46:	47d0      	blx	sl
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d0ab      	beq.n	8003ba4 <_printf_i+0x164>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	079b      	lsls	r3, r3, #30
 8003c50:	d413      	bmi.n	8003c7a <_printf_i+0x23a>
 8003c52:	68e0      	ldr	r0, [r4, #12]
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	4298      	cmp	r0, r3
 8003c58:	bfb8      	it	lt
 8003c5a:	4618      	movlt	r0, r3
 8003c5c:	e7a4      	b.n	8003ba8 <_printf_i+0x168>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4632      	mov	r2, r6
 8003c62:	4649      	mov	r1, r9
 8003c64:	4640      	mov	r0, r8
 8003c66:	47d0      	blx	sl
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d09b      	beq.n	8003ba4 <_printf_i+0x164>
 8003c6c:	3501      	adds	r5, #1
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	9903      	ldr	r1, [sp, #12]
 8003c72:	1a5b      	subs	r3, r3, r1
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	dcf2      	bgt.n	8003c5e <_printf_i+0x21e>
 8003c78:	e7eb      	b.n	8003c52 <_printf_i+0x212>
 8003c7a:	2500      	movs	r5, #0
 8003c7c:	f104 0619 	add.w	r6, r4, #25
 8003c80:	e7f5      	b.n	8003c6e <_printf_i+0x22e>
 8003c82:	bf00      	nop
 8003c84:	08006132 	.word	0x08006132
 8003c88:	08006143 	.word	0x08006143

08003c8c <siprintf>:
 8003c8c:	b40e      	push	{r1, r2, r3}
 8003c8e:	b500      	push	{lr}
 8003c90:	b09c      	sub	sp, #112	; 0x70
 8003c92:	ab1d      	add	r3, sp, #116	; 0x74
 8003c94:	9002      	str	r0, [sp, #8]
 8003c96:	9006      	str	r0, [sp, #24]
 8003c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c9c:	4809      	ldr	r0, [pc, #36]	; (8003cc4 <siprintf+0x38>)
 8003c9e:	9107      	str	r1, [sp, #28]
 8003ca0:	9104      	str	r1, [sp, #16]
 8003ca2:	4909      	ldr	r1, [pc, #36]	; (8003cc8 <siprintf+0x3c>)
 8003ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca8:	9105      	str	r1, [sp, #20]
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	a902      	add	r1, sp, #8
 8003cb0:	f001 faca 	bl	8005248 <_svfiprintf_r>
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	b01c      	add	sp, #112	; 0x70
 8003cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc0:	b003      	add	sp, #12
 8003cc2:	4770      	bx	lr
 8003cc4:	2000001c 	.word	0x2000001c
 8003cc8:	ffff0208 	.word	0xffff0208

08003ccc <quorem>:
 8003ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd0:	6903      	ldr	r3, [r0, #16]
 8003cd2:	690c      	ldr	r4, [r1, #16]
 8003cd4:	42a3      	cmp	r3, r4
 8003cd6:	4607      	mov	r7, r0
 8003cd8:	f2c0 8081 	blt.w	8003dde <quorem+0x112>
 8003cdc:	3c01      	subs	r4, #1
 8003cde:	f101 0814 	add.w	r8, r1, #20
 8003ce2:	f100 0514 	add.w	r5, r0, #20
 8003ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003cfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d00:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d04:	d331      	bcc.n	8003d6a <quorem+0x9e>
 8003d06:	f04f 0e00 	mov.w	lr, #0
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	46ac      	mov	ip, r5
 8003d0e:	46f2      	mov	sl, lr
 8003d10:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d14:	b293      	uxth	r3, r2
 8003d16:	fb06 e303 	mla	r3, r6, r3, lr
 8003d1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	ebaa 0303 	sub.w	r3, sl, r3
 8003d24:	0c12      	lsrs	r2, r2, #16
 8003d26:	f8dc a000 	ldr.w	sl, [ip]
 8003d2a:	fb06 e202 	mla	r2, r6, r2, lr
 8003d2e:	fa13 f38a 	uxtah	r3, r3, sl
 8003d32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d36:	fa1f fa82 	uxth.w	sl, r2
 8003d3a:	f8dc 2000 	ldr.w	r2, [ip]
 8003d3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003d42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d4c:	4581      	cmp	r9, r0
 8003d4e:	f84c 3b04 	str.w	r3, [ip], #4
 8003d52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d56:	d2db      	bcs.n	8003d10 <quorem+0x44>
 8003d58:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d5c:	b92b      	cbnz	r3, 8003d6a <quorem+0x9e>
 8003d5e:	9b01      	ldr	r3, [sp, #4]
 8003d60:	3b04      	subs	r3, #4
 8003d62:	429d      	cmp	r5, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	d32e      	bcc.n	8003dc6 <quorem+0xfa>
 8003d68:	613c      	str	r4, [r7, #16]
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f001 f856 	bl	8004e1c <__mcmp>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	db24      	blt.n	8003dbe <quorem+0xf2>
 8003d74:	3601      	adds	r6, #1
 8003d76:	4628      	mov	r0, r5
 8003d78:	f04f 0c00 	mov.w	ip, #0
 8003d7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d80:	f8d0 e000 	ldr.w	lr, [r0]
 8003d84:	b293      	uxth	r3, r2
 8003d86:	ebac 0303 	sub.w	r3, ip, r3
 8003d8a:	0c12      	lsrs	r2, r2, #16
 8003d8c:	fa13 f38e 	uxtah	r3, r3, lr
 8003d90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d9e:	45c1      	cmp	r9, r8
 8003da0:	f840 3b04 	str.w	r3, [r0], #4
 8003da4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003da8:	d2e8      	bcs.n	8003d7c <quorem+0xb0>
 8003daa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003db2:	b922      	cbnz	r2, 8003dbe <quorem+0xf2>
 8003db4:	3b04      	subs	r3, #4
 8003db6:	429d      	cmp	r5, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	d30a      	bcc.n	8003dd2 <quorem+0x106>
 8003dbc:	613c      	str	r4, [r7, #16]
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	b003      	add	sp, #12
 8003dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	3b04      	subs	r3, #4
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d1cc      	bne.n	8003d68 <quorem+0x9c>
 8003dce:	3c01      	subs	r4, #1
 8003dd0:	e7c7      	b.n	8003d62 <quorem+0x96>
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	3b04      	subs	r3, #4
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	d1f0      	bne.n	8003dbc <quorem+0xf0>
 8003dda:	3c01      	subs	r4, #1
 8003ddc:	e7eb      	b.n	8003db6 <quorem+0xea>
 8003dde:	2000      	movs	r0, #0
 8003de0:	e7ee      	b.n	8003dc0 <quorem+0xf4>
 8003de2:	0000      	movs	r0, r0
 8003de4:	0000      	movs	r0, r0
	...

08003de8 <_dtoa_r>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	ec59 8b10 	vmov	r8, r9, d0
 8003df0:	b095      	sub	sp, #84	; 0x54
 8003df2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003df4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8003df6:	9107      	str	r1, [sp, #28]
 8003df8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8003e00:	9310      	str	r3, [sp, #64]	; 0x40
 8003e02:	b975      	cbnz	r5, 8003e22 <_dtoa_r+0x3a>
 8003e04:	2010      	movs	r0, #16
 8003e06:	f000 fd75 	bl	80048f4 <malloc>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8003e0e:	b920      	cbnz	r0, 8003e1a <_dtoa_r+0x32>
 8003e10:	4bab      	ldr	r3, [pc, #684]	; (80040c0 <_dtoa_r+0x2d8>)
 8003e12:	21ea      	movs	r1, #234	; 0xea
 8003e14:	48ab      	ldr	r0, [pc, #684]	; (80040c4 <_dtoa_r+0x2dc>)
 8003e16:	f001 fb27 	bl	8005468 <__assert_func>
 8003e1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e1e:	6005      	str	r5, [r0, #0]
 8003e20:	60c5      	str	r5, [r0, #12]
 8003e22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	b151      	cbz	r1, 8003e3e <_dtoa_r+0x56>
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	604a      	str	r2, [r1, #4]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4093      	lsls	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
 8003e32:	4630      	mov	r0, r6
 8003e34:	f000 fdb4 	bl	80049a0 <_Bfree>
 8003e38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f1b9 0300 	subs.w	r3, r9, #0
 8003e42:	bfbb      	ittet	lt
 8003e44:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e48:	9303      	strlt	r3, [sp, #12]
 8003e4a:	2300      	movge	r3, #0
 8003e4c:	2201      	movlt	r2, #1
 8003e4e:	bfac      	ite	ge
 8003e50:	6023      	strge	r3, [r4, #0]
 8003e52:	6022      	strlt	r2, [r4, #0]
 8003e54:	4b9c      	ldr	r3, [pc, #624]	; (80040c8 <_dtoa_r+0x2e0>)
 8003e56:	9c03      	ldr	r4, [sp, #12]
 8003e58:	43a3      	bics	r3, r4
 8003e5a:	d11a      	bne.n	8003e92 <_dtoa_r+0xaa>
 8003e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003e68:	ea53 0308 	orrs.w	r3, r3, r8
 8003e6c:	f000 8512 	beq.w	8004894 <_dtoa_r+0xaac>
 8003e70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e72:	b953      	cbnz	r3, 8003e8a <_dtoa_r+0xa2>
 8003e74:	4b95      	ldr	r3, [pc, #596]	; (80040cc <_dtoa_r+0x2e4>)
 8003e76:	e01f      	b.n	8003eb8 <_dtoa_r+0xd0>
 8003e78:	4b95      	ldr	r3, [pc, #596]	; (80040d0 <_dtoa_r+0x2e8>)
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	9800      	ldr	r0, [sp, #0]
 8003e84:	b015      	add	sp, #84	; 0x54
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	4b90      	ldr	r3, [pc, #576]	; (80040cc <_dtoa_r+0x2e4>)
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	3303      	adds	r3, #3
 8003e90:	e7f5      	b.n	8003e7e <_dtoa_r+0x96>
 8003e92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003ea2:	d10b      	bne.n	8003ebc <_dtoa_r+0xd4>
 8003ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 84ee 	beq.w	800488e <_dtoa_r+0xaa6>
 8003eb2:	4888      	ldr	r0, [pc, #544]	; (80040d4 <_dtoa_r+0x2ec>)
 8003eb4:	6018      	str	r0, [r3, #0]
 8003eb6:	1e43      	subs	r3, r0, #1
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	e7e2      	b.n	8003e82 <_dtoa_r+0x9a>
 8003ebc:	a913      	add	r1, sp, #76	; 0x4c
 8003ebe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003ec2:	aa12      	add	r2, sp, #72	; 0x48
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f001 f84d 	bl	8004f64 <__d2b>
 8003eca:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8003ece:	4605      	mov	r5, r0
 8003ed0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003ed2:	2900      	cmp	r1, #0
 8003ed4:	d047      	beq.n	8003f66 <_dtoa_r+0x17e>
 8003ed6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003ed8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ee0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8003ee4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ee8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003eec:	2400      	movs	r4, #0
 8003eee:	ec43 2b16 	vmov	d6, r2, r3
 8003ef2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8003ef6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80040a8 <_dtoa_r+0x2c0>
 8003efa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003efe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80040b0 <_dtoa_r+0x2c8>
 8003f02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003f06:	eeb0 7b46 	vmov.f64	d7, d6
 8003f0a:	ee06 1a90 	vmov	s13, r1
 8003f0e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8003f12:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80040b8 <_dtoa_r+0x2d0>
 8003f16:	eea5 7b06 	vfma.f64	d7, d5, d6
 8003f1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003f1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f26:	ee16 ba90 	vmov	fp, s13
 8003f2a:	9411      	str	r4, [sp, #68]	; 0x44
 8003f2c:	d508      	bpl.n	8003f40 <_dtoa_r+0x158>
 8003f2e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003f32:	eeb4 6b47 	vcmp.f64	d6, d7
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	bf18      	it	ne
 8003f3c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8003f40:	f1bb 0f16 	cmp.w	fp, #22
 8003f44:	d832      	bhi.n	8003fac <_dtoa_r+0x1c4>
 8003f46:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <_dtoa_r+0x2f0>)
 8003f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f4c:	ed93 7b00 	vldr	d7, [r3]
 8003f50:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003f54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	d501      	bpl.n	8003f62 <_dtoa_r+0x17a>
 8003f5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f62:	2300      	movs	r3, #0
 8003f64:	e023      	b.n	8003fae <_dtoa_r+0x1c6>
 8003f66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003f68:	4401      	add	r1, r0
 8003f6a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	bfc3      	ittte	gt
 8003f72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003f76:	fa04 f303 	lslgt.w	r3, r4, r3
 8003f7a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8003f7e:	f1c3 0320 	rsble	r3, r3, #32
 8003f82:	bfc6      	itte	gt
 8003f84:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003f88:	ea43 0308 	orrgt.w	r3, r3, r8
 8003f8c:	fa08 f303 	lslle.w	r3, r8, r3
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f98:	3901      	subs	r1, #1
 8003f9a:	ed8d 7b00 	vstr	d7, [sp]
 8003f9e:	9c01      	ldr	r4, [sp, #4]
 8003fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003fa4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003fa8:	2401      	movs	r4, #1
 8003faa:	e7a0      	b.n	8003eee <_dtoa_r+0x106>
 8003fac:	2301      	movs	r3, #1
 8003fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fb0:	1a43      	subs	r3, r0, r1
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	bf45      	ittet	mi
 8003fb6:	f1c3 0301 	rsbmi	r3, r3, #1
 8003fba:	9305      	strmi	r3, [sp, #20]
 8003fbc:	2300      	movpl	r3, #0
 8003fbe:	2300      	movmi	r3, #0
 8003fc0:	9206      	str	r2, [sp, #24]
 8003fc2:	bf54      	ite	pl
 8003fc4:	9305      	strpl	r3, [sp, #20]
 8003fc6:	9306      	strmi	r3, [sp, #24]
 8003fc8:	f1bb 0f00 	cmp.w	fp, #0
 8003fcc:	db18      	blt.n	8004000 <_dtoa_r+0x218>
 8003fce:	9b06      	ldr	r3, [sp, #24]
 8003fd0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003fd4:	445b      	add	r3, fp
 8003fd6:	9306      	str	r3, [sp, #24]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9a07      	ldr	r2, [sp, #28]
 8003fdc:	2a09      	cmp	r2, #9
 8003fde:	d849      	bhi.n	8004074 <_dtoa_r+0x28c>
 8003fe0:	2a05      	cmp	r2, #5
 8003fe2:	bfc4      	itt	gt
 8003fe4:	3a04      	subgt	r2, #4
 8003fe6:	9207      	strgt	r2, [sp, #28]
 8003fe8:	9a07      	ldr	r2, [sp, #28]
 8003fea:	f1a2 0202 	sub.w	r2, r2, #2
 8003fee:	bfcc      	ite	gt
 8003ff0:	2400      	movgt	r4, #0
 8003ff2:	2401      	movle	r4, #1
 8003ff4:	2a03      	cmp	r2, #3
 8003ff6:	d848      	bhi.n	800408a <_dtoa_r+0x2a2>
 8003ff8:	e8df f002 	tbb	[pc, r2]
 8003ffc:	3a2c2e0b 	.word	0x3a2c2e0b
 8004000:	9b05      	ldr	r3, [sp, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	eba3 030b 	sub.w	r3, r3, fp
 8004008:	9305      	str	r3, [sp, #20]
 800400a:	920e      	str	r2, [sp, #56]	; 0x38
 800400c:	f1cb 0300 	rsb	r3, fp, #0
 8004010:	e7e3      	b.n	8003fda <_dtoa_r+0x1f2>
 8004012:	2200      	movs	r2, #0
 8004014:	9208      	str	r2, [sp, #32]
 8004016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004018:	2a00      	cmp	r2, #0
 800401a:	dc39      	bgt.n	8004090 <_dtoa_r+0x2a8>
 800401c:	f04f 0a01 	mov.w	sl, #1
 8004020:	46d1      	mov	r9, sl
 8004022:	4652      	mov	r2, sl
 8004024:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004028:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800402a:	2100      	movs	r1, #0
 800402c:	6079      	str	r1, [r7, #4]
 800402e:	2004      	movs	r0, #4
 8004030:	f100 0c14 	add.w	ip, r0, #20
 8004034:	4594      	cmp	ip, r2
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	d92f      	bls.n	800409a <_dtoa_r+0x2b2>
 800403a:	4630      	mov	r0, r6
 800403c:	930c      	str	r3, [sp, #48]	; 0x30
 800403e:	f000 fc6f 	bl	8004920 <_Balloc>
 8004042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004044:	9000      	str	r0, [sp, #0]
 8004046:	4602      	mov	r2, r0
 8004048:	2800      	cmp	r0, #0
 800404a:	d149      	bne.n	80040e0 <_dtoa_r+0x2f8>
 800404c:	4b23      	ldr	r3, [pc, #140]	; (80040dc <_dtoa_r+0x2f4>)
 800404e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004052:	e6df      	b.n	8003e14 <_dtoa_r+0x2c>
 8004054:	2201      	movs	r2, #1
 8004056:	e7dd      	b.n	8004014 <_dtoa_r+0x22c>
 8004058:	2200      	movs	r2, #0
 800405a:	9208      	str	r2, [sp, #32]
 800405c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405e:	eb0b 0a02 	add.w	sl, fp, r2
 8004062:	f10a 0901 	add.w	r9, sl, #1
 8004066:	464a      	mov	r2, r9
 8004068:	2a01      	cmp	r2, #1
 800406a:	bfb8      	it	lt
 800406c:	2201      	movlt	r2, #1
 800406e:	e7db      	b.n	8004028 <_dtoa_r+0x240>
 8004070:	2201      	movs	r2, #1
 8004072:	e7f2      	b.n	800405a <_dtoa_r+0x272>
 8004074:	2401      	movs	r4, #1
 8004076:	2200      	movs	r2, #0
 8004078:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800407c:	f04f 3aff 	mov.w	sl, #4294967295
 8004080:	2100      	movs	r1, #0
 8004082:	46d1      	mov	r9, sl
 8004084:	2212      	movs	r2, #18
 8004086:	9109      	str	r1, [sp, #36]	; 0x24
 8004088:	e7ce      	b.n	8004028 <_dtoa_r+0x240>
 800408a:	2201      	movs	r2, #1
 800408c:	9208      	str	r2, [sp, #32]
 800408e:	e7f5      	b.n	800407c <_dtoa_r+0x294>
 8004090:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004094:	46d1      	mov	r9, sl
 8004096:	4652      	mov	r2, sl
 8004098:	e7c6      	b.n	8004028 <_dtoa_r+0x240>
 800409a:	3101      	adds	r1, #1
 800409c:	6079      	str	r1, [r7, #4]
 800409e:	0040      	lsls	r0, r0, #1
 80040a0:	e7c6      	b.n	8004030 <_dtoa_r+0x248>
 80040a2:	bf00      	nop
 80040a4:	f3af 8000 	nop.w
 80040a8:	636f4361 	.word	0x636f4361
 80040ac:	3fd287a7 	.word	0x3fd287a7
 80040b0:	8b60c8b3 	.word	0x8b60c8b3
 80040b4:	3fc68a28 	.word	0x3fc68a28
 80040b8:	509f79fb 	.word	0x509f79fb
 80040bc:	3fd34413 	.word	0x3fd34413
 80040c0:	08006161 	.word	0x08006161
 80040c4:	08006178 	.word	0x08006178
 80040c8:	7ff00000 	.word	0x7ff00000
 80040cc:	0800615d 	.word	0x0800615d
 80040d0:	08006154 	.word	0x08006154
 80040d4:	08006131 	.word	0x08006131
 80040d8:	08006270 	.word	0x08006270
 80040dc:	080061d7 	.word	0x080061d7
 80040e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80040e2:	9900      	ldr	r1, [sp, #0]
 80040e4:	6011      	str	r1, [r2, #0]
 80040e6:	f1b9 0f0e 	cmp.w	r9, #14
 80040ea:	d872      	bhi.n	80041d2 <_dtoa_r+0x3ea>
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	d070      	beq.n	80041d2 <_dtoa_r+0x3ea>
 80040f0:	f1bb 0f00 	cmp.w	fp, #0
 80040f4:	f340 80a6 	ble.w	8004244 <_dtoa_r+0x45c>
 80040f8:	49ca      	ldr	r1, [pc, #808]	; (8004424 <_dtoa_r+0x63c>)
 80040fa:	f00b 020f 	and.w	r2, fp, #15
 80040fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8004102:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004106:	ed92 7b00 	vldr	d7, [r2]
 800410a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800410e:	f000 808d 	beq.w	800422c <_dtoa_r+0x444>
 8004112:	4ac5      	ldr	r2, [pc, #788]	; (8004428 <_dtoa_r+0x640>)
 8004114:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004118:	ed92 6b08 	vldr	d6, [r2, #32]
 800411c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004120:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004124:	f001 010f 	and.w	r1, r1, #15
 8004128:	2203      	movs	r2, #3
 800412a:	48bf      	ldr	r0, [pc, #764]	; (8004428 <_dtoa_r+0x640>)
 800412c:	2900      	cmp	r1, #0
 800412e:	d17f      	bne.n	8004230 <_dtoa_r+0x448>
 8004130:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004134:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800413c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800413e:	2900      	cmp	r1, #0
 8004140:	f000 80b2 	beq.w	80042a8 <_dtoa_r+0x4c0>
 8004144:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800414c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004154:	f140 80a8 	bpl.w	80042a8 <_dtoa_r+0x4c0>
 8004158:	f1b9 0f00 	cmp.w	r9, #0
 800415c:	f000 80a4 	beq.w	80042a8 <_dtoa_r+0x4c0>
 8004160:	f1ba 0f00 	cmp.w	sl, #0
 8004164:	dd31      	ble.n	80041ca <_dtoa_r+0x3e2>
 8004166:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800416a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800416e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004172:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004176:	3201      	adds	r2, #1
 8004178:	4650      	mov	r0, sl
 800417a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800417e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004182:	ee07 2a90 	vmov	s15, r2
 8004186:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800418a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800418e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004192:	9c03      	ldr	r4, [sp, #12]
 8004194:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004198:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800419c:	2800      	cmp	r0, #0
 800419e:	f040 8086 	bne.w	80042ae <_dtoa_r+0x4c6>
 80041a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80041a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80041aa:	ec42 1b17 	vmov	d7, r1, r2
 80041ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	f300 8272 	bgt.w	800469e <_dtoa_r+0x8b6>
 80041ba:	eeb1 7b47 	vneg.f64	d7, d7
 80041be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80041c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c6:	f100 8267 	bmi.w	8004698 <_dtoa_r+0x8b0>
 80041ca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80041ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80041d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80041d4:	2a00      	cmp	r2, #0
 80041d6:	f2c0 8129 	blt.w	800442c <_dtoa_r+0x644>
 80041da:	f1bb 0f0e 	cmp.w	fp, #14
 80041de:	f300 8125 	bgt.w	800442c <_dtoa_r+0x644>
 80041e2:	4b90      	ldr	r3, [pc, #576]	; (8004424 <_dtoa_r+0x63c>)
 80041e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80041e8:	ed93 6b00 	vldr	d6, [r3]
 80041ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f280 80c3 	bge.w	800437a <_dtoa_r+0x592>
 80041f4:	f1b9 0f00 	cmp.w	r9, #0
 80041f8:	f300 80bf 	bgt.w	800437a <_dtoa_r+0x592>
 80041fc:	f040 824c 	bne.w	8004698 <_dtoa_r+0x8b0>
 8004200:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004204:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800420c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004214:	464c      	mov	r4, r9
 8004216:	464f      	mov	r7, r9
 8004218:	f280 8222 	bge.w	8004660 <_dtoa_r+0x878>
 800421c:	f8dd 8000 	ldr.w	r8, [sp]
 8004220:	2331      	movs	r3, #49	; 0x31
 8004222:	f808 3b01 	strb.w	r3, [r8], #1
 8004226:	f10b 0b01 	add.w	fp, fp, #1
 800422a:	e21e      	b.n	800466a <_dtoa_r+0x882>
 800422c:	2202      	movs	r2, #2
 800422e:	e77c      	b.n	800412a <_dtoa_r+0x342>
 8004230:	07cc      	lsls	r4, r1, #31
 8004232:	d504      	bpl.n	800423e <_dtoa_r+0x456>
 8004234:	ed90 6b00 	vldr	d6, [r0]
 8004238:	3201      	adds	r2, #1
 800423a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800423e:	1049      	asrs	r1, r1, #1
 8004240:	3008      	adds	r0, #8
 8004242:	e773      	b.n	800412c <_dtoa_r+0x344>
 8004244:	d02e      	beq.n	80042a4 <_dtoa_r+0x4bc>
 8004246:	f1cb 0100 	rsb	r1, fp, #0
 800424a:	4a76      	ldr	r2, [pc, #472]	; (8004424 <_dtoa_r+0x63c>)
 800424c:	f001 000f 	and.w	r0, r1, #15
 8004250:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004254:	ed92 7b00 	vldr	d7, [r2]
 8004258:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800425c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004260:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004264:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8004268:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800426c:	486e      	ldr	r0, [pc, #440]	; (8004428 <_dtoa_r+0x640>)
 800426e:	1109      	asrs	r1, r1, #4
 8004270:	2400      	movs	r4, #0
 8004272:	2202      	movs	r2, #2
 8004274:	b939      	cbnz	r1, 8004286 <_dtoa_r+0x49e>
 8004276:	2c00      	cmp	r4, #0
 8004278:	f43f af60 	beq.w	800413c <_dtoa_r+0x354>
 800427c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004284:	e75a      	b.n	800413c <_dtoa_r+0x354>
 8004286:	07cf      	lsls	r7, r1, #31
 8004288:	d509      	bpl.n	800429e <_dtoa_r+0x4b6>
 800428a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800428e:	ed90 7b00 	vldr	d7, [r0]
 8004292:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004296:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800429a:	3201      	adds	r2, #1
 800429c:	2401      	movs	r4, #1
 800429e:	1049      	asrs	r1, r1, #1
 80042a0:	3008      	adds	r0, #8
 80042a2:	e7e7      	b.n	8004274 <_dtoa_r+0x48c>
 80042a4:	2202      	movs	r2, #2
 80042a6:	e749      	b.n	800413c <_dtoa_r+0x354>
 80042a8:	465f      	mov	r7, fp
 80042aa:	4648      	mov	r0, r9
 80042ac:	e765      	b.n	800417a <_dtoa_r+0x392>
 80042ae:	ec42 1b17 	vmov	d7, r1, r2
 80042b2:	4a5c      	ldr	r2, [pc, #368]	; (8004424 <_dtoa_r+0x63c>)
 80042b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80042b8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80042bc:	9a00      	ldr	r2, [sp, #0]
 80042be:	1814      	adds	r4, r2, r0
 80042c0:	9a08      	ldr	r2, [sp, #32]
 80042c2:	b352      	cbz	r2, 800431a <_dtoa_r+0x532>
 80042c4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80042c8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80042cc:	f8dd 8000 	ldr.w	r8, [sp]
 80042d0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80042d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80042d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80042dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80042e0:	ee14 2a90 	vmov	r2, s9
 80042e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80042e8:	3230      	adds	r2, #48	; 0x30
 80042ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 80042ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	f808 2b01 	strb.w	r2, [r8], #1
 80042fa:	d439      	bmi.n	8004370 <_dtoa_r+0x588>
 80042fc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004300:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	d472      	bmi.n	80043f0 <_dtoa_r+0x608>
 800430a:	45a0      	cmp	r8, r4
 800430c:	f43f af5d 	beq.w	80041ca <_dtoa_r+0x3e2>
 8004310:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004314:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004318:	e7e0      	b.n	80042dc <_dtoa_r+0x4f4>
 800431a:	f8dd 8000 	ldr.w	r8, [sp]
 800431e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004322:	4621      	mov	r1, r4
 8004324:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004328:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800432c:	ee14 2a90 	vmov	r2, s9
 8004330:	3230      	adds	r2, #48	; 0x30
 8004332:	f808 2b01 	strb.w	r2, [r8], #1
 8004336:	45a0      	cmp	r8, r4
 8004338:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800433c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004340:	d118      	bne.n	8004374 <_dtoa_r+0x58c>
 8004342:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004346:	ee37 4b05 	vadd.f64	d4, d7, d5
 800434a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	dc4d      	bgt.n	80043f0 <_dtoa_r+0x608>
 8004354:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004358:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	f57f af33 	bpl.w	80041ca <_dtoa_r+0x3e2>
 8004364:	4688      	mov	r8, r1
 8004366:	3901      	subs	r1, #1
 8004368:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d0f9      	beq.n	8004364 <_dtoa_r+0x57c>
 8004370:	46bb      	mov	fp, r7
 8004372:	e02a      	b.n	80043ca <_dtoa_r+0x5e2>
 8004374:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004378:	e7d6      	b.n	8004328 <_dtoa_r+0x540>
 800437a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800437e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004382:	f8dd 8000 	ldr.w	r8, [sp]
 8004386:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800438a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800438e:	ee15 3a10 	vmov	r3, s10
 8004392:	3330      	adds	r3, #48	; 0x30
 8004394:	f808 3b01 	strb.w	r3, [r8], #1
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	eba8 0303 	sub.w	r3, r8, r3
 800439e:	4599      	cmp	r9, r3
 80043a0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80043a4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80043a8:	d133      	bne.n	8004412 <_dtoa_r+0x62a>
 80043aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80043b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b6:	dc1a      	bgt.n	80043ee <_dtoa_r+0x606>
 80043b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d103      	bne.n	80043ca <_dtoa_r+0x5e2>
 80043c2:	ee15 3a10 	vmov	r3, s10
 80043c6:	07d9      	lsls	r1, r3, #31
 80043c8:	d411      	bmi.n	80043ee <_dtoa_r+0x606>
 80043ca:	4629      	mov	r1, r5
 80043cc:	4630      	mov	r0, r6
 80043ce:	f000 fae7 	bl	80049a0 <_Bfree>
 80043d2:	2300      	movs	r3, #0
 80043d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043d6:	f888 3000 	strb.w	r3, [r8]
 80043da:	f10b 0301 	add.w	r3, fp, #1
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f43f ad4d 	beq.w	8003e82 <_dtoa_r+0x9a>
 80043e8:	f8c3 8000 	str.w	r8, [r3]
 80043ec:	e549      	b.n	8003e82 <_dtoa_r+0x9a>
 80043ee:	465f      	mov	r7, fp
 80043f0:	4643      	mov	r3, r8
 80043f2:	4698      	mov	r8, r3
 80043f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043f8:	2a39      	cmp	r2, #57	; 0x39
 80043fa:	d106      	bne.n	800440a <_dtoa_r+0x622>
 80043fc:	9a00      	ldr	r2, [sp, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d1f7      	bne.n	80043f2 <_dtoa_r+0x60a>
 8004402:	9900      	ldr	r1, [sp, #0]
 8004404:	2230      	movs	r2, #48	; 0x30
 8004406:	3701      	adds	r7, #1
 8004408:	700a      	strb	r2, [r1, #0]
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	3201      	adds	r2, #1
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e7ae      	b.n	8004370 <_dtoa_r+0x588>
 8004412:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004416:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d1b2      	bne.n	8004386 <_dtoa_r+0x59e>
 8004420:	e7d3      	b.n	80043ca <_dtoa_r+0x5e2>
 8004422:	bf00      	nop
 8004424:	08006270 	.word	0x08006270
 8004428:	08006248 	.word	0x08006248
 800442c:	9908      	ldr	r1, [sp, #32]
 800442e:	2900      	cmp	r1, #0
 8004430:	f000 80d1 	beq.w	80045d6 <_dtoa_r+0x7ee>
 8004434:	9907      	ldr	r1, [sp, #28]
 8004436:	2901      	cmp	r1, #1
 8004438:	f300 80b4 	bgt.w	80045a4 <_dtoa_r+0x7bc>
 800443c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800443e:	2900      	cmp	r1, #0
 8004440:	f000 80ac 	beq.w	800459c <_dtoa_r+0x7b4>
 8004444:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004448:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800444c:	461c      	mov	r4, r3
 800444e:	930a      	str	r3, [sp, #40]	; 0x28
 8004450:	9b05      	ldr	r3, [sp, #20]
 8004452:	4413      	add	r3, r2
 8004454:	9305      	str	r3, [sp, #20]
 8004456:	9b06      	ldr	r3, [sp, #24]
 8004458:	2101      	movs	r1, #1
 800445a:	4413      	add	r3, r2
 800445c:	4630      	mov	r0, r6
 800445e:	9306      	str	r3, [sp, #24]
 8004460:	f000 fb5a 	bl	8004b18 <__i2b>
 8004464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004466:	4607      	mov	r7, r0
 8004468:	f1b8 0f00 	cmp.w	r8, #0
 800446c:	dd0d      	ble.n	800448a <_dtoa_r+0x6a2>
 800446e:	9a06      	ldr	r2, [sp, #24]
 8004470:	2a00      	cmp	r2, #0
 8004472:	dd0a      	ble.n	800448a <_dtoa_r+0x6a2>
 8004474:	4542      	cmp	r2, r8
 8004476:	9905      	ldr	r1, [sp, #20]
 8004478:	bfa8      	it	ge
 800447a:	4642      	movge	r2, r8
 800447c:	1a89      	subs	r1, r1, r2
 800447e:	9105      	str	r1, [sp, #20]
 8004480:	9906      	ldr	r1, [sp, #24]
 8004482:	eba8 0802 	sub.w	r8, r8, r2
 8004486:	1a8a      	subs	r2, r1, r2
 8004488:	9206      	str	r2, [sp, #24]
 800448a:	b303      	cbz	r3, 80044ce <_dtoa_r+0x6e6>
 800448c:	9a08      	ldr	r2, [sp, #32]
 800448e:	2a00      	cmp	r2, #0
 8004490:	f000 80a6 	beq.w	80045e0 <_dtoa_r+0x7f8>
 8004494:	2c00      	cmp	r4, #0
 8004496:	dd13      	ble.n	80044c0 <_dtoa_r+0x6d8>
 8004498:	4639      	mov	r1, r7
 800449a:	4622      	mov	r2, r4
 800449c:	4630      	mov	r0, r6
 800449e:	930c      	str	r3, [sp, #48]	; 0x30
 80044a0:	f000 fbf6 	bl	8004c90 <__pow5mult>
 80044a4:	462a      	mov	r2, r5
 80044a6:	4601      	mov	r1, r0
 80044a8:	4607      	mov	r7, r0
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 fb4a 	bl	8004b44 <__multiply>
 80044b0:	4629      	mov	r1, r5
 80044b2:	900a      	str	r0, [sp, #40]	; 0x28
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 fa73 	bl	80049a0 <_Bfree>
 80044ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044be:	4615      	mov	r5, r2
 80044c0:	1b1a      	subs	r2, r3, r4
 80044c2:	d004      	beq.n	80044ce <_dtoa_r+0x6e6>
 80044c4:	4629      	mov	r1, r5
 80044c6:	4630      	mov	r0, r6
 80044c8:	f000 fbe2 	bl	8004c90 <__pow5mult>
 80044cc:	4605      	mov	r5, r0
 80044ce:	2101      	movs	r1, #1
 80044d0:	4630      	mov	r0, r6
 80044d2:	f000 fb21 	bl	8004b18 <__i2b>
 80044d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	f340 8082 	ble.w	80045e4 <_dtoa_r+0x7fc>
 80044e0:	461a      	mov	r2, r3
 80044e2:	4601      	mov	r1, r0
 80044e4:	4630      	mov	r0, r6
 80044e6:	f000 fbd3 	bl	8004c90 <__pow5mult>
 80044ea:	9b07      	ldr	r3, [sp, #28]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	4604      	mov	r4, r0
 80044f0:	dd7b      	ble.n	80045ea <_dtoa_r+0x802>
 80044f2:	2300      	movs	r3, #0
 80044f4:	930a      	str	r3, [sp, #40]	; 0x28
 80044f6:	6922      	ldr	r2, [r4, #16]
 80044f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80044fc:	6910      	ldr	r0, [r2, #16]
 80044fe:	f000 fabb 	bl	8004a78 <__hi0bits>
 8004502:	f1c0 0020 	rsb	r0, r0, #32
 8004506:	9b06      	ldr	r3, [sp, #24]
 8004508:	4418      	add	r0, r3
 800450a:	f010 001f 	ands.w	r0, r0, #31
 800450e:	f000 808d 	beq.w	800462c <_dtoa_r+0x844>
 8004512:	f1c0 0220 	rsb	r2, r0, #32
 8004516:	2a04      	cmp	r2, #4
 8004518:	f340 8086 	ble.w	8004628 <_dtoa_r+0x840>
 800451c:	f1c0 001c 	rsb	r0, r0, #28
 8004520:	9b05      	ldr	r3, [sp, #20]
 8004522:	4403      	add	r3, r0
 8004524:	9305      	str	r3, [sp, #20]
 8004526:	9b06      	ldr	r3, [sp, #24]
 8004528:	4403      	add	r3, r0
 800452a:	4480      	add	r8, r0
 800452c:	9306      	str	r3, [sp, #24]
 800452e:	9b05      	ldr	r3, [sp, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dd05      	ble.n	8004540 <_dtoa_r+0x758>
 8004534:	4629      	mov	r1, r5
 8004536:	461a      	mov	r2, r3
 8004538:	4630      	mov	r0, r6
 800453a:	f000 fc03 	bl	8004d44 <__lshift>
 800453e:	4605      	mov	r5, r0
 8004540:	9b06      	ldr	r3, [sp, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	dd05      	ble.n	8004552 <_dtoa_r+0x76a>
 8004546:	4621      	mov	r1, r4
 8004548:	461a      	mov	r2, r3
 800454a:	4630      	mov	r0, r6
 800454c:	f000 fbfa 	bl	8004d44 <__lshift>
 8004550:	4604      	mov	r4, r0
 8004552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d06b      	beq.n	8004630 <_dtoa_r+0x848>
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 fc5e 	bl	8004e1c <__mcmp>
 8004560:	2800      	cmp	r0, #0
 8004562:	da65      	bge.n	8004630 <_dtoa_r+0x848>
 8004564:	2300      	movs	r3, #0
 8004566:	4629      	mov	r1, r5
 8004568:	220a      	movs	r2, #10
 800456a:	4630      	mov	r0, r6
 800456c:	f000 fa3a 	bl	80049e4 <__multadd>
 8004570:	9b08      	ldr	r3, [sp, #32]
 8004572:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004576:	4605      	mov	r5, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8192 	beq.w	80048a2 <_dtoa_r+0xaba>
 800457e:	4639      	mov	r1, r7
 8004580:	2300      	movs	r3, #0
 8004582:	220a      	movs	r2, #10
 8004584:	4630      	mov	r0, r6
 8004586:	f000 fa2d 	bl	80049e4 <__multadd>
 800458a:	f1ba 0f00 	cmp.w	sl, #0
 800458e:	4607      	mov	r7, r0
 8004590:	f300 808e 	bgt.w	80046b0 <_dtoa_r+0x8c8>
 8004594:	9b07      	ldr	r3, [sp, #28]
 8004596:	2b02      	cmp	r3, #2
 8004598:	dc51      	bgt.n	800463e <_dtoa_r+0x856>
 800459a:	e089      	b.n	80046b0 <_dtoa_r+0x8c8>
 800459c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800459e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045a2:	e751      	b.n	8004448 <_dtoa_r+0x660>
 80045a4:	f109 34ff 	add.w	r4, r9, #4294967295
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	bfbf      	itttt	lt
 80045ac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80045ae:	1ae3      	sublt	r3, r4, r3
 80045b0:	18d2      	addlt	r2, r2, r3
 80045b2:	4613      	movlt	r3, r2
 80045b4:	bfb7      	itett	lt
 80045b6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80045b8:	1b1c      	subge	r4, r3, r4
 80045ba:	4623      	movlt	r3, r4
 80045bc:	2400      	movlt	r4, #0
 80045be:	f1b9 0f00 	cmp.w	r9, #0
 80045c2:	bfb5      	itete	lt
 80045c4:	9a05      	ldrlt	r2, [sp, #20]
 80045c6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80045ca:	eba2 0809 	sublt.w	r8, r2, r9
 80045ce:	464a      	movge	r2, r9
 80045d0:	bfb8      	it	lt
 80045d2:	2200      	movlt	r2, #0
 80045d4:	e73b      	b.n	800444e <_dtoa_r+0x666>
 80045d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80045da:	9f08      	ldr	r7, [sp, #32]
 80045dc:	461c      	mov	r4, r3
 80045de:	e743      	b.n	8004468 <_dtoa_r+0x680>
 80045e0:	461a      	mov	r2, r3
 80045e2:	e76f      	b.n	80044c4 <_dtoa_r+0x6dc>
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	dc18      	bgt.n	800461c <_dtoa_r+0x834>
 80045ea:	9b02      	ldr	r3, [sp, #8]
 80045ec:	b9b3      	cbnz	r3, 800461c <_dtoa_r+0x834>
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80045f4:	b9a2      	cbnz	r2, 8004620 <_dtoa_r+0x838>
 80045f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045fa:	0d12      	lsrs	r2, r2, #20
 80045fc:	0512      	lsls	r2, r2, #20
 80045fe:	b18a      	cbz	r2, 8004624 <_dtoa_r+0x83c>
 8004600:	9b05      	ldr	r3, [sp, #20]
 8004602:	3301      	adds	r3, #1
 8004604:	9305      	str	r3, [sp, #20]
 8004606:	9b06      	ldr	r3, [sp, #24]
 8004608:	3301      	adds	r3, #1
 800460a:	9306      	str	r3, [sp, #24]
 800460c:	2301      	movs	r3, #1
 800460e:	930a      	str	r3, [sp, #40]	; 0x28
 8004610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f af6f 	bne.w	80044f6 <_dtoa_r+0x70e>
 8004618:	2001      	movs	r0, #1
 800461a:	e774      	b.n	8004506 <_dtoa_r+0x71e>
 800461c:	2300      	movs	r3, #0
 800461e:	e7f6      	b.n	800460e <_dtoa_r+0x826>
 8004620:	9b02      	ldr	r3, [sp, #8]
 8004622:	e7f4      	b.n	800460e <_dtoa_r+0x826>
 8004624:	920a      	str	r2, [sp, #40]	; 0x28
 8004626:	e7f3      	b.n	8004610 <_dtoa_r+0x828>
 8004628:	d081      	beq.n	800452e <_dtoa_r+0x746>
 800462a:	4610      	mov	r0, r2
 800462c:	301c      	adds	r0, #28
 800462e:	e777      	b.n	8004520 <_dtoa_r+0x738>
 8004630:	f1b9 0f00 	cmp.w	r9, #0
 8004634:	dc37      	bgt.n	80046a6 <_dtoa_r+0x8be>
 8004636:	9b07      	ldr	r3, [sp, #28]
 8004638:	2b02      	cmp	r3, #2
 800463a:	dd34      	ble.n	80046a6 <_dtoa_r+0x8be>
 800463c:	46ca      	mov	sl, r9
 800463e:	f1ba 0f00 	cmp.w	sl, #0
 8004642:	d10d      	bne.n	8004660 <_dtoa_r+0x878>
 8004644:	4621      	mov	r1, r4
 8004646:	4653      	mov	r3, sl
 8004648:	2205      	movs	r2, #5
 800464a:	4630      	mov	r0, r6
 800464c:	f000 f9ca 	bl	80049e4 <__multadd>
 8004650:	4601      	mov	r1, r0
 8004652:	4604      	mov	r4, r0
 8004654:	4628      	mov	r0, r5
 8004656:	f000 fbe1 	bl	8004e1c <__mcmp>
 800465a:	2800      	cmp	r0, #0
 800465c:	f73f adde 	bgt.w	800421c <_dtoa_r+0x434>
 8004660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004662:	f8dd 8000 	ldr.w	r8, [sp]
 8004666:	ea6f 0b03 	mvn.w	fp, r3
 800466a:	f04f 0900 	mov.w	r9, #0
 800466e:	4621      	mov	r1, r4
 8004670:	4630      	mov	r0, r6
 8004672:	f000 f995 	bl	80049a0 <_Bfree>
 8004676:	2f00      	cmp	r7, #0
 8004678:	f43f aea7 	beq.w	80043ca <_dtoa_r+0x5e2>
 800467c:	f1b9 0f00 	cmp.w	r9, #0
 8004680:	d005      	beq.n	800468e <_dtoa_r+0x8a6>
 8004682:	45b9      	cmp	r9, r7
 8004684:	d003      	beq.n	800468e <_dtoa_r+0x8a6>
 8004686:	4649      	mov	r1, r9
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f989 	bl	80049a0 <_Bfree>
 800468e:	4639      	mov	r1, r7
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f985 	bl	80049a0 <_Bfree>
 8004696:	e698      	b.n	80043ca <_dtoa_r+0x5e2>
 8004698:	2400      	movs	r4, #0
 800469a:	4627      	mov	r7, r4
 800469c:	e7e0      	b.n	8004660 <_dtoa_r+0x878>
 800469e:	46bb      	mov	fp, r7
 80046a0:	4604      	mov	r4, r0
 80046a2:	4607      	mov	r7, r0
 80046a4:	e5ba      	b.n	800421c <_dtoa_r+0x434>
 80046a6:	9b08      	ldr	r3, [sp, #32]
 80046a8:	46ca      	mov	sl, r9
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8100 	beq.w	80048b0 <_dtoa_r+0xac8>
 80046b0:	f1b8 0f00 	cmp.w	r8, #0
 80046b4:	dd05      	ble.n	80046c2 <_dtoa_r+0x8da>
 80046b6:	4639      	mov	r1, r7
 80046b8:	4642      	mov	r2, r8
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 fb42 	bl	8004d44 <__lshift>
 80046c0:	4607      	mov	r7, r0
 80046c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05d      	beq.n	8004784 <_dtoa_r+0x99c>
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 f928 	bl	8004920 <_Balloc>
 80046d0:	4680      	mov	r8, r0
 80046d2:	b928      	cbnz	r0, 80046e0 <_dtoa_r+0x8f8>
 80046d4:	4b82      	ldr	r3, [pc, #520]	; (80048e0 <_dtoa_r+0xaf8>)
 80046d6:	4602      	mov	r2, r0
 80046d8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80046dc:	f7ff bb9a 	b.w	8003e14 <_dtoa_r+0x2c>
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	3202      	adds	r2, #2
 80046e4:	0092      	lsls	r2, r2, #2
 80046e6:	f107 010c 	add.w	r1, r7, #12
 80046ea:	300c      	adds	r0, #12
 80046ec:	f000 f90a 	bl	8004904 <memcpy>
 80046f0:	2201      	movs	r2, #1
 80046f2:	4641      	mov	r1, r8
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 fb25 	bl	8004d44 <__lshift>
 80046fa:	9b00      	ldr	r3, [sp, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	9305      	str	r3, [sp, #20]
 8004700:	9b00      	ldr	r3, [sp, #0]
 8004702:	4453      	add	r3, sl
 8004704:	9309      	str	r3, [sp, #36]	; 0x24
 8004706:	9b02      	ldr	r3, [sp, #8]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	46b9      	mov	r9, r7
 800470e:	9308      	str	r3, [sp, #32]
 8004710:	4607      	mov	r7, r0
 8004712:	9b05      	ldr	r3, [sp, #20]
 8004714:	4621      	mov	r1, r4
 8004716:	3b01      	subs	r3, #1
 8004718:	4628      	mov	r0, r5
 800471a:	9302      	str	r3, [sp, #8]
 800471c:	f7ff fad6 	bl	8003ccc <quorem>
 8004720:	4603      	mov	r3, r0
 8004722:	3330      	adds	r3, #48	; 0x30
 8004724:	9006      	str	r0, [sp, #24]
 8004726:	4649      	mov	r1, r9
 8004728:	4628      	mov	r0, r5
 800472a:	930a      	str	r3, [sp, #40]	; 0x28
 800472c:	f000 fb76 	bl	8004e1c <__mcmp>
 8004730:	463a      	mov	r2, r7
 8004732:	4682      	mov	sl, r0
 8004734:	4621      	mov	r1, r4
 8004736:	4630      	mov	r0, r6
 8004738:	f000 fb8c 	bl	8004e54 <__mdiff>
 800473c:	68c2      	ldr	r2, [r0, #12]
 800473e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004740:	4680      	mov	r8, r0
 8004742:	bb0a      	cbnz	r2, 8004788 <_dtoa_r+0x9a0>
 8004744:	4601      	mov	r1, r0
 8004746:	4628      	mov	r0, r5
 8004748:	f000 fb68 	bl	8004e1c <__mcmp>
 800474c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800474e:	4602      	mov	r2, r0
 8004750:	4641      	mov	r1, r8
 8004752:	4630      	mov	r0, r6
 8004754:	920e      	str	r2, [sp, #56]	; 0x38
 8004756:	930a      	str	r3, [sp, #40]	; 0x28
 8004758:	f000 f922 	bl	80049a0 <_Bfree>
 800475c:	9b07      	ldr	r3, [sp, #28]
 800475e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004760:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004764:	ea43 0102 	orr.w	r1, r3, r2
 8004768:	9b08      	ldr	r3, [sp, #32]
 800476a:	430b      	orrs	r3, r1
 800476c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800476e:	d10d      	bne.n	800478c <_dtoa_r+0x9a4>
 8004770:	2b39      	cmp	r3, #57	; 0x39
 8004772:	d029      	beq.n	80047c8 <_dtoa_r+0x9e0>
 8004774:	f1ba 0f00 	cmp.w	sl, #0
 8004778:	dd01      	ble.n	800477e <_dtoa_r+0x996>
 800477a:	9b06      	ldr	r3, [sp, #24]
 800477c:	3331      	adds	r3, #49	; 0x31
 800477e:	9a02      	ldr	r2, [sp, #8]
 8004780:	7013      	strb	r3, [r2, #0]
 8004782:	e774      	b.n	800466e <_dtoa_r+0x886>
 8004784:	4638      	mov	r0, r7
 8004786:	e7b8      	b.n	80046fa <_dtoa_r+0x912>
 8004788:	2201      	movs	r2, #1
 800478a:	e7e1      	b.n	8004750 <_dtoa_r+0x968>
 800478c:	f1ba 0f00 	cmp.w	sl, #0
 8004790:	db06      	blt.n	80047a0 <_dtoa_r+0x9b8>
 8004792:	9907      	ldr	r1, [sp, #28]
 8004794:	ea41 0a0a 	orr.w	sl, r1, sl
 8004798:	9908      	ldr	r1, [sp, #32]
 800479a:	ea5a 0101 	orrs.w	r1, sl, r1
 800479e:	d120      	bne.n	80047e2 <_dtoa_r+0x9fa>
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	ddec      	ble.n	800477e <_dtoa_r+0x996>
 80047a4:	4629      	mov	r1, r5
 80047a6:	2201      	movs	r2, #1
 80047a8:	4630      	mov	r0, r6
 80047aa:	9305      	str	r3, [sp, #20]
 80047ac:	f000 faca 	bl	8004d44 <__lshift>
 80047b0:	4621      	mov	r1, r4
 80047b2:	4605      	mov	r5, r0
 80047b4:	f000 fb32 	bl	8004e1c <__mcmp>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	9b05      	ldr	r3, [sp, #20]
 80047bc:	dc02      	bgt.n	80047c4 <_dtoa_r+0x9dc>
 80047be:	d1de      	bne.n	800477e <_dtoa_r+0x996>
 80047c0:	07da      	lsls	r2, r3, #31
 80047c2:	d5dc      	bpl.n	800477e <_dtoa_r+0x996>
 80047c4:	2b39      	cmp	r3, #57	; 0x39
 80047c6:	d1d8      	bne.n	800477a <_dtoa_r+0x992>
 80047c8:	9a02      	ldr	r2, [sp, #8]
 80047ca:	2339      	movs	r3, #57	; 0x39
 80047cc:	7013      	strb	r3, [r2, #0]
 80047ce:	4643      	mov	r3, r8
 80047d0:	4698      	mov	r8, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80047d8:	2a39      	cmp	r2, #57	; 0x39
 80047da:	d051      	beq.n	8004880 <_dtoa_r+0xa98>
 80047dc:	3201      	adds	r2, #1
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e745      	b.n	800466e <_dtoa_r+0x886>
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	dd03      	ble.n	80047ee <_dtoa_r+0xa06>
 80047e6:	2b39      	cmp	r3, #57	; 0x39
 80047e8:	d0ee      	beq.n	80047c8 <_dtoa_r+0x9e0>
 80047ea:	3301      	adds	r3, #1
 80047ec:	e7c7      	b.n	800477e <_dtoa_r+0x996>
 80047ee:	9a05      	ldr	r2, [sp, #20]
 80047f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047f2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047f6:	428a      	cmp	r2, r1
 80047f8:	d02b      	beq.n	8004852 <_dtoa_r+0xa6a>
 80047fa:	4629      	mov	r1, r5
 80047fc:	2300      	movs	r3, #0
 80047fe:	220a      	movs	r2, #10
 8004800:	4630      	mov	r0, r6
 8004802:	f000 f8ef 	bl	80049e4 <__multadd>
 8004806:	45b9      	cmp	r9, r7
 8004808:	4605      	mov	r5, r0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f04f 020a 	mov.w	r2, #10
 8004812:	4649      	mov	r1, r9
 8004814:	4630      	mov	r0, r6
 8004816:	d107      	bne.n	8004828 <_dtoa_r+0xa40>
 8004818:	f000 f8e4 	bl	80049e4 <__multadd>
 800481c:	4681      	mov	r9, r0
 800481e:	4607      	mov	r7, r0
 8004820:	9b05      	ldr	r3, [sp, #20]
 8004822:	3301      	adds	r3, #1
 8004824:	9305      	str	r3, [sp, #20]
 8004826:	e774      	b.n	8004712 <_dtoa_r+0x92a>
 8004828:	f000 f8dc 	bl	80049e4 <__multadd>
 800482c:	4639      	mov	r1, r7
 800482e:	4681      	mov	r9, r0
 8004830:	2300      	movs	r3, #0
 8004832:	220a      	movs	r2, #10
 8004834:	4630      	mov	r0, r6
 8004836:	f000 f8d5 	bl	80049e4 <__multadd>
 800483a:	4607      	mov	r7, r0
 800483c:	e7f0      	b.n	8004820 <_dtoa_r+0xa38>
 800483e:	f1ba 0f00 	cmp.w	sl, #0
 8004842:	9a00      	ldr	r2, [sp, #0]
 8004844:	bfcc      	ite	gt
 8004846:	46d0      	movgt	r8, sl
 8004848:	f04f 0801 	movle.w	r8, #1
 800484c:	4490      	add	r8, r2
 800484e:	f04f 0900 	mov.w	r9, #0
 8004852:	4629      	mov	r1, r5
 8004854:	2201      	movs	r2, #1
 8004856:	4630      	mov	r0, r6
 8004858:	9302      	str	r3, [sp, #8]
 800485a:	f000 fa73 	bl	8004d44 <__lshift>
 800485e:	4621      	mov	r1, r4
 8004860:	4605      	mov	r5, r0
 8004862:	f000 fadb 	bl	8004e1c <__mcmp>
 8004866:	2800      	cmp	r0, #0
 8004868:	dcb1      	bgt.n	80047ce <_dtoa_r+0x9e6>
 800486a:	d102      	bne.n	8004872 <_dtoa_r+0xa8a>
 800486c:	9b02      	ldr	r3, [sp, #8]
 800486e:	07db      	lsls	r3, r3, #31
 8004870:	d4ad      	bmi.n	80047ce <_dtoa_r+0x9e6>
 8004872:	4643      	mov	r3, r8
 8004874:	4698      	mov	r8, r3
 8004876:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800487a:	2a30      	cmp	r2, #48	; 0x30
 800487c:	d0fa      	beq.n	8004874 <_dtoa_r+0xa8c>
 800487e:	e6f6      	b.n	800466e <_dtoa_r+0x886>
 8004880:	9a00      	ldr	r2, [sp, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d1a4      	bne.n	80047d0 <_dtoa_r+0x9e8>
 8004886:	f10b 0b01 	add.w	fp, fp, #1
 800488a:	2331      	movs	r3, #49	; 0x31
 800488c:	e778      	b.n	8004780 <_dtoa_r+0x998>
 800488e:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <_dtoa_r+0xafc>)
 8004890:	f7ff bb12 	b.w	8003eb8 <_dtoa_r+0xd0>
 8004894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004896:	2b00      	cmp	r3, #0
 8004898:	f47f aaee 	bne.w	8003e78 <_dtoa_r+0x90>
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <_dtoa_r+0xb00>)
 800489e:	f7ff bb0b 	b.w	8003eb8 <_dtoa_r+0xd0>
 80048a2:	f1ba 0f00 	cmp.w	sl, #0
 80048a6:	dc03      	bgt.n	80048b0 <_dtoa_r+0xac8>
 80048a8:	9b07      	ldr	r3, [sp, #28]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	f73f aec7 	bgt.w	800463e <_dtoa_r+0x856>
 80048b0:	f8dd 8000 	ldr.w	r8, [sp]
 80048b4:	4621      	mov	r1, r4
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff fa08 	bl	8003ccc <quorem>
 80048bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80048c0:	f808 3b01 	strb.w	r3, [r8], #1
 80048c4:	9a00      	ldr	r2, [sp, #0]
 80048c6:	eba8 0202 	sub.w	r2, r8, r2
 80048ca:	4592      	cmp	sl, r2
 80048cc:	ddb7      	ble.n	800483e <_dtoa_r+0xa56>
 80048ce:	4629      	mov	r1, r5
 80048d0:	2300      	movs	r3, #0
 80048d2:	220a      	movs	r2, #10
 80048d4:	4630      	mov	r0, r6
 80048d6:	f000 f885 	bl	80049e4 <__multadd>
 80048da:	4605      	mov	r5, r0
 80048dc:	e7ea      	b.n	80048b4 <_dtoa_r+0xacc>
 80048de:	bf00      	nop
 80048e0:	080061d7 	.word	0x080061d7
 80048e4:	08006130 	.word	0x08006130
 80048e8:	08006154 	.word	0x08006154

080048ec <_localeconv_r>:
 80048ec:	4800      	ldr	r0, [pc, #0]	; (80048f0 <_localeconv_r+0x4>)
 80048ee:	4770      	bx	lr
 80048f0:	20000170 	.word	0x20000170

080048f4 <malloc>:
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <malloc+0xc>)
 80048f6:	4601      	mov	r1, r0
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	f000 bbef 	b.w	80050dc <_malloc_r>
 80048fe:	bf00      	nop
 8004900:	2000001c 	.word	0x2000001c

08004904 <memcpy>:
 8004904:	440a      	add	r2, r1
 8004906:	4291      	cmp	r1, r2
 8004908:	f100 33ff 	add.w	r3, r0, #4294967295
 800490c:	d100      	bne.n	8004910 <memcpy+0xc>
 800490e:	4770      	bx	lr
 8004910:	b510      	push	{r4, lr}
 8004912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800491a:	4291      	cmp	r1, r2
 800491c:	d1f9      	bne.n	8004912 <memcpy+0xe>
 800491e:	bd10      	pop	{r4, pc}

08004920 <_Balloc>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004924:	4604      	mov	r4, r0
 8004926:	460d      	mov	r5, r1
 8004928:	b976      	cbnz	r6, 8004948 <_Balloc+0x28>
 800492a:	2010      	movs	r0, #16
 800492c:	f7ff ffe2 	bl	80048f4 <malloc>
 8004930:	4602      	mov	r2, r0
 8004932:	6260      	str	r0, [r4, #36]	; 0x24
 8004934:	b920      	cbnz	r0, 8004940 <_Balloc+0x20>
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <_Balloc+0x78>)
 8004938:	4818      	ldr	r0, [pc, #96]	; (800499c <_Balloc+0x7c>)
 800493a:	2166      	movs	r1, #102	; 0x66
 800493c:	f000 fd94 	bl	8005468 <__assert_func>
 8004940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004944:	6006      	str	r6, [r0, #0]
 8004946:	60c6      	str	r6, [r0, #12]
 8004948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800494a:	68f3      	ldr	r3, [r6, #12]
 800494c:	b183      	cbz	r3, 8004970 <_Balloc+0x50>
 800494e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004956:	b9b8      	cbnz	r0, 8004988 <_Balloc+0x68>
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f605 	lsl.w	r6, r1, r5
 800495e:	1d72      	adds	r2, r6, #5
 8004960:	0092      	lsls	r2, r2, #2
 8004962:	4620      	mov	r0, r4
 8004964:	f000 fb5a 	bl	800501c <_calloc_r>
 8004968:	b160      	cbz	r0, 8004984 <_Balloc+0x64>
 800496a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800496e:	e00e      	b.n	800498e <_Balloc+0x6e>
 8004970:	2221      	movs	r2, #33	; 0x21
 8004972:	2104      	movs	r1, #4
 8004974:	4620      	mov	r0, r4
 8004976:	f000 fb51 	bl	800501c <_calloc_r>
 800497a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800497c:	60f0      	str	r0, [r6, #12]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e4      	bne.n	800494e <_Balloc+0x2e>
 8004984:	2000      	movs	r0, #0
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	6802      	ldr	r2, [r0, #0]
 800498a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800498e:	2300      	movs	r3, #0
 8004990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004994:	e7f7      	b.n	8004986 <_Balloc+0x66>
 8004996:	bf00      	nop
 8004998:	08006161 	.word	0x08006161
 800499c:	080061e8 	.word	0x080061e8

080049a0 <_Bfree>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	b976      	cbnz	r6, 80049c8 <_Bfree+0x28>
 80049aa:	2010      	movs	r0, #16
 80049ac:	f7ff ffa2 	bl	80048f4 <malloc>
 80049b0:	4602      	mov	r2, r0
 80049b2:	6268      	str	r0, [r5, #36]	; 0x24
 80049b4:	b920      	cbnz	r0, 80049c0 <_Bfree+0x20>
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <_Bfree+0x3c>)
 80049b8:	4809      	ldr	r0, [pc, #36]	; (80049e0 <_Bfree+0x40>)
 80049ba:	218a      	movs	r1, #138	; 0x8a
 80049bc:	f000 fd54 	bl	8005468 <__assert_func>
 80049c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049c4:	6006      	str	r6, [r0, #0]
 80049c6:	60c6      	str	r6, [r0, #12]
 80049c8:	b13c      	cbz	r4, 80049da <_Bfree+0x3a>
 80049ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049cc:	6862      	ldr	r2, [r4, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049d4:	6021      	str	r1, [r4, #0]
 80049d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	08006161 	.word	0x08006161
 80049e0:	080061e8 	.word	0x080061e8

080049e4 <__multadd>:
 80049e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e8:	690e      	ldr	r6, [r1, #16]
 80049ea:	4607      	mov	r7, r0
 80049ec:	4698      	mov	r8, r3
 80049ee:	460c      	mov	r4, r1
 80049f0:	f101 0014 	add.w	r0, r1, #20
 80049f4:	2300      	movs	r3, #0
 80049f6:	6805      	ldr	r5, [r0, #0]
 80049f8:	b2a9      	uxth	r1, r5
 80049fa:	fb02 8101 	mla	r1, r2, r1, r8
 80049fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004a02:	0c2d      	lsrs	r5, r5, #16
 8004a04:	fb02 c505 	mla	r5, r2, r5, ip
 8004a08:	b289      	uxth	r1, r1
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004a10:	429e      	cmp	r6, r3
 8004a12:	f840 1b04 	str.w	r1, [r0], #4
 8004a16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004a1a:	dcec      	bgt.n	80049f6 <__multadd+0x12>
 8004a1c:	f1b8 0f00 	cmp.w	r8, #0
 8004a20:	d022      	beq.n	8004a68 <__multadd+0x84>
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	42b3      	cmp	r3, r6
 8004a26:	dc19      	bgt.n	8004a5c <__multadd+0x78>
 8004a28:	6861      	ldr	r1, [r4, #4]
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	3101      	adds	r1, #1
 8004a2e:	f7ff ff77 	bl	8004920 <_Balloc>
 8004a32:	4605      	mov	r5, r0
 8004a34:	b928      	cbnz	r0, 8004a42 <__multadd+0x5e>
 8004a36:	4602      	mov	r2, r0
 8004a38:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <__multadd+0x8c>)
 8004a3a:	480e      	ldr	r0, [pc, #56]	; (8004a74 <__multadd+0x90>)
 8004a3c:	21b5      	movs	r1, #181	; 0xb5
 8004a3e:	f000 fd13 	bl	8005468 <__assert_func>
 8004a42:	6922      	ldr	r2, [r4, #16]
 8004a44:	3202      	adds	r2, #2
 8004a46:	f104 010c 	add.w	r1, r4, #12
 8004a4a:	0092      	lsls	r2, r2, #2
 8004a4c:	300c      	adds	r0, #12
 8004a4e:	f7ff ff59 	bl	8004904 <memcpy>
 8004a52:	4621      	mov	r1, r4
 8004a54:	4638      	mov	r0, r7
 8004a56:	f7ff ffa3 	bl	80049a0 <_Bfree>
 8004a5a:	462c      	mov	r4, r5
 8004a5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004a60:	3601      	adds	r6, #1
 8004a62:	f8c3 8014 	str.w	r8, [r3, #20]
 8004a66:	6126      	str	r6, [r4, #16]
 8004a68:	4620      	mov	r0, r4
 8004a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a6e:	bf00      	nop
 8004a70:	080061d7 	.word	0x080061d7
 8004a74:	080061e8 	.word	0x080061e8

08004a78 <__hi0bits>:
 8004a78:	0c03      	lsrs	r3, r0, #16
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	b9d3      	cbnz	r3, 8004ab4 <__hi0bits+0x3c>
 8004a7e:	0400      	lsls	r0, r0, #16
 8004a80:	2310      	movs	r3, #16
 8004a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a86:	bf04      	itt	eq
 8004a88:	0200      	lsleq	r0, r0, #8
 8004a8a:	3308      	addeq	r3, #8
 8004a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a90:	bf04      	itt	eq
 8004a92:	0100      	lsleq	r0, r0, #4
 8004a94:	3304      	addeq	r3, #4
 8004a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a9a:	bf04      	itt	eq
 8004a9c:	0080      	lsleq	r0, r0, #2
 8004a9e:	3302      	addeq	r3, #2
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	db05      	blt.n	8004ab0 <__hi0bits+0x38>
 8004aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004aa8:	f103 0301 	add.w	r3, r3, #1
 8004aac:	bf08      	it	eq
 8004aae:	2320      	moveq	r3, #32
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	4770      	bx	lr
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e7e4      	b.n	8004a82 <__hi0bits+0xa>

08004ab8 <__lo0bits>:
 8004ab8:	6803      	ldr	r3, [r0, #0]
 8004aba:	f013 0207 	ands.w	r2, r3, #7
 8004abe:	4601      	mov	r1, r0
 8004ac0:	d00b      	beq.n	8004ada <__lo0bits+0x22>
 8004ac2:	07da      	lsls	r2, r3, #31
 8004ac4:	d424      	bmi.n	8004b10 <__lo0bits+0x58>
 8004ac6:	0798      	lsls	r0, r3, #30
 8004ac8:	bf49      	itett	mi
 8004aca:	085b      	lsrmi	r3, r3, #1
 8004acc:	089b      	lsrpl	r3, r3, #2
 8004ace:	2001      	movmi	r0, #1
 8004ad0:	600b      	strmi	r3, [r1, #0]
 8004ad2:	bf5c      	itt	pl
 8004ad4:	600b      	strpl	r3, [r1, #0]
 8004ad6:	2002      	movpl	r0, #2
 8004ad8:	4770      	bx	lr
 8004ada:	b298      	uxth	r0, r3
 8004adc:	b9b0      	cbnz	r0, 8004b0c <__lo0bits+0x54>
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	2010      	movs	r0, #16
 8004ae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004ae6:	bf04      	itt	eq
 8004ae8:	0a1b      	lsreq	r3, r3, #8
 8004aea:	3008      	addeq	r0, #8
 8004aec:	071a      	lsls	r2, r3, #28
 8004aee:	bf04      	itt	eq
 8004af0:	091b      	lsreq	r3, r3, #4
 8004af2:	3004      	addeq	r0, #4
 8004af4:	079a      	lsls	r2, r3, #30
 8004af6:	bf04      	itt	eq
 8004af8:	089b      	lsreq	r3, r3, #2
 8004afa:	3002      	addeq	r0, #2
 8004afc:	07da      	lsls	r2, r3, #31
 8004afe:	d403      	bmi.n	8004b08 <__lo0bits+0x50>
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	f100 0001 	add.w	r0, r0, #1
 8004b06:	d005      	beq.n	8004b14 <__lo0bits+0x5c>
 8004b08:	600b      	str	r3, [r1, #0]
 8004b0a:	4770      	bx	lr
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	e7e8      	b.n	8004ae2 <__lo0bits+0x2a>
 8004b10:	2000      	movs	r0, #0
 8004b12:	4770      	bx	lr
 8004b14:	2020      	movs	r0, #32
 8004b16:	4770      	bx	lr

08004b18 <__i2b>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	f7ff feff 	bl	8004920 <_Balloc>
 8004b22:	4602      	mov	r2, r0
 8004b24:	b928      	cbnz	r0, 8004b32 <__i2b+0x1a>
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <__i2b+0x24>)
 8004b28:	4805      	ldr	r0, [pc, #20]	; (8004b40 <__i2b+0x28>)
 8004b2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b2e:	f000 fc9b 	bl	8005468 <__assert_func>
 8004b32:	2301      	movs	r3, #1
 8004b34:	6144      	str	r4, [r0, #20]
 8004b36:	6103      	str	r3, [r0, #16]
 8004b38:	bd10      	pop	{r4, pc}
 8004b3a:	bf00      	nop
 8004b3c:	080061d7 	.word	0x080061d7
 8004b40:	080061e8 	.word	0x080061e8

08004b44 <__multiply>:
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	4614      	mov	r4, r2
 8004b4a:	690a      	ldr	r2, [r1, #16]
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	bfb8      	it	lt
 8004b52:	460b      	movlt	r3, r1
 8004b54:	460d      	mov	r5, r1
 8004b56:	bfbc      	itt	lt
 8004b58:	4625      	movlt	r5, r4
 8004b5a:	461c      	movlt	r4, r3
 8004b5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004b60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004b64:	68ab      	ldr	r3, [r5, #8]
 8004b66:	6869      	ldr	r1, [r5, #4]
 8004b68:	eb0a 0709 	add.w	r7, sl, r9
 8004b6c:	42bb      	cmp	r3, r7
 8004b6e:	b085      	sub	sp, #20
 8004b70:	bfb8      	it	lt
 8004b72:	3101      	addlt	r1, #1
 8004b74:	f7ff fed4 	bl	8004920 <_Balloc>
 8004b78:	b930      	cbnz	r0, 8004b88 <__multiply+0x44>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <__multiply+0x144>)
 8004b7e:	4843      	ldr	r0, [pc, #268]	; (8004c8c <__multiply+0x148>)
 8004b80:	f240 115d 	movw	r1, #349	; 0x15d
 8004b84:	f000 fc70 	bl	8005468 <__assert_func>
 8004b88:	f100 0614 	add.w	r6, r0, #20
 8004b8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004b90:	4633      	mov	r3, r6
 8004b92:	2200      	movs	r2, #0
 8004b94:	4543      	cmp	r3, r8
 8004b96:	d31e      	bcc.n	8004bd6 <__multiply+0x92>
 8004b98:	f105 0c14 	add.w	ip, r5, #20
 8004b9c:	f104 0314 	add.w	r3, r4, #20
 8004ba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004ba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004ba8:	9202      	str	r2, [sp, #8]
 8004baa:	ebac 0205 	sub.w	r2, ip, r5
 8004bae:	3a15      	subs	r2, #21
 8004bb0:	f022 0203 	bic.w	r2, r2, #3
 8004bb4:	3204      	adds	r2, #4
 8004bb6:	f105 0115 	add.w	r1, r5, #21
 8004bba:	458c      	cmp	ip, r1
 8004bbc:	bf38      	it	cc
 8004bbe:	2204      	movcc	r2, #4
 8004bc0:	9201      	str	r2, [sp, #4]
 8004bc2:	9a02      	ldr	r2, [sp, #8]
 8004bc4:	9303      	str	r3, [sp, #12]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d808      	bhi.n	8004bdc <__multiply+0x98>
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	dc55      	bgt.n	8004c7a <__multiply+0x136>
 8004bce:	6107      	str	r7, [r0, #16]
 8004bd0:	b005      	add	sp, #20
 8004bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd6:	f843 2b04 	str.w	r2, [r3], #4
 8004bda:	e7db      	b.n	8004b94 <__multiply+0x50>
 8004bdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8004be0:	f1ba 0f00 	cmp.w	sl, #0
 8004be4:	d020      	beq.n	8004c28 <__multiply+0xe4>
 8004be6:	f105 0e14 	add.w	lr, r5, #20
 8004bea:	46b1      	mov	r9, r6
 8004bec:	2200      	movs	r2, #0
 8004bee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004bf2:	f8d9 b000 	ldr.w	fp, [r9]
 8004bf6:	b2a1      	uxth	r1, r4
 8004bf8:	fa1f fb8b 	uxth.w	fp, fp
 8004bfc:	fb0a b101 	mla	r1, sl, r1, fp
 8004c00:	4411      	add	r1, r2
 8004c02:	f8d9 2000 	ldr.w	r2, [r9]
 8004c06:	0c24      	lsrs	r4, r4, #16
 8004c08:	0c12      	lsrs	r2, r2, #16
 8004c0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8004c0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004c12:	b289      	uxth	r1, r1
 8004c14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004c18:	45f4      	cmp	ip, lr
 8004c1a:	f849 1b04 	str.w	r1, [r9], #4
 8004c1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004c22:	d8e4      	bhi.n	8004bee <__multiply+0xaa>
 8004c24:	9901      	ldr	r1, [sp, #4]
 8004c26:	5072      	str	r2, [r6, r1]
 8004c28:	9a03      	ldr	r2, [sp, #12]
 8004c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	f1b9 0f00 	cmp.w	r9, #0
 8004c34:	d01f      	beq.n	8004c76 <__multiply+0x132>
 8004c36:	6834      	ldr	r4, [r6, #0]
 8004c38:	f105 0114 	add.w	r1, r5, #20
 8004c3c:	46b6      	mov	lr, r6
 8004c3e:	f04f 0a00 	mov.w	sl, #0
 8004c42:	880a      	ldrh	r2, [r1, #0]
 8004c44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c48:	fb09 b202 	mla	r2, r9, r2, fp
 8004c4c:	4492      	add	sl, r2
 8004c4e:	b2a4      	uxth	r4, r4
 8004c50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004c54:	f84e 4b04 	str.w	r4, [lr], #4
 8004c58:	f851 4b04 	ldr.w	r4, [r1], #4
 8004c5c:	f8be 2000 	ldrh.w	r2, [lr]
 8004c60:	0c24      	lsrs	r4, r4, #16
 8004c62:	fb09 2404 	mla	r4, r9, r4, r2
 8004c66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004c6a:	458c      	cmp	ip, r1
 8004c6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004c70:	d8e7      	bhi.n	8004c42 <__multiply+0xfe>
 8004c72:	9a01      	ldr	r2, [sp, #4]
 8004c74:	50b4      	str	r4, [r6, r2]
 8004c76:	3604      	adds	r6, #4
 8004c78:	e7a3      	b.n	8004bc2 <__multiply+0x7e>
 8004c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1a5      	bne.n	8004bce <__multiply+0x8a>
 8004c82:	3f01      	subs	r7, #1
 8004c84:	e7a1      	b.n	8004bca <__multiply+0x86>
 8004c86:	bf00      	nop
 8004c88:	080061d7 	.word	0x080061d7
 8004c8c:	080061e8 	.word	0x080061e8

08004c90 <__pow5mult>:
 8004c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c94:	4615      	mov	r5, r2
 8004c96:	f012 0203 	ands.w	r2, r2, #3
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460f      	mov	r7, r1
 8004c9e:	d007      	beq.n	8004cb0 <__pow5mult+0x20>
 8004ca0:	4c25      	ldr	r4, [pc, #148]	; (8004d38 <__pow5mult+0xa8>)
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004caa:	f7ff fe9b 	bl	80049e4 <__multadd>
 8004cae:	4607      	mov	r7, r0
 8004cb0:	10ad      	asrs	r5, r5, #2
 8004cb2:	d03d      	beq.n	8004d30 <__pow5mult+0xa0>
 8004cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004cb6:	b97c      	cbnz	r4, 8004cd8 <__pow5mult+0x48>
 8004cb8:	2010      	movs	r0, #16
 8004cba:	f7ff fe1b 	bl	80048f4 <malloc>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8004cc2:	b928      	cbnz	r0, 8004cd0 <__pow5mult+0x40>
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <__pow5mult+0xac>)
 8004cc6:	481e      	ldr	r0, [pc, #120]	; (8004d40 <__pow5mult+0xb0>)
 8004cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ccc:	f000 fbcc 	bl	8005468 <__assert_func>
 8004cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cd4:	6004      	str	r4, [r0, #0]
 8004cd6:	60c4      	str	r4, [r0, #12]
 8004cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ce0:	b94c      	cbnz	r4, 8004cf6 <__pow5mult+0x66>
 8004ce2:	f240 2171 	movw	r1, #625	; 0x271
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff ff16 	bl	8004b18 <__i2b>
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	6003      	str	r3, [r0, #0]
 8004cf6:	f04f 0900 	mov.w	r9, #0
 8004cfa:	07eb      	lsls	r3, r5, #31
 8004cfc:	d50a      	bpl.n	8004d14 <__pow5mult+0x84>
 8004cfe:	4639      	mov	r1, r7
 8004d00:	4622      	mov	r2, r4
 8004d02:	4630      	mov	r0, r6
 8004d04:	f7ff ff1e 	bl	8004b44 <__multiply>
 8004d08:	4639      	mov	r1, r7
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff fe47 	bl	80049a0 <_Bfree>
 8004d12:	4647      	mov	r7, r8
 8004d14:	106d      	asrs	r5, r5, #1
 8004d16:	d00b      	beq.n	8004d30 <__pow5mult+0xa0>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	b938      	cbnz	r0, 8004d2c <__pow5mult+0x9c>
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ff0f 	bl	8004b44 <__multiply>
 8004d26:	6020      	str	r0, [r4, #0]
 8004d28:	f8c0 9000 	str.w	r9, [r0]
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	e7e4      	b.n	8004cfa <__pow5mult+0x6a>
 8004d30:	4638      	mov	r0, r7
 8004d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d36:	bf00      	nop
 8004d38:	08006338 	.word	0x08006338
 8004d3c:	08006161 	.word	0x08006161
 8004d40:	080061e8 	.word	0x080061e8

08004d44 <__lshift>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	460c      	mov	r4, r1
 8004d4a:	6849      	ldr	r1, [r1, #4]
 8004d4c:	6923      	ldr	r3, [r4, #16]
 8004d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	4607      	mov	r7, r0
 8004d56:	4691      	mov	r9, r2
 8004d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d5c:	f108 0601 	add.w	r6, r8, #1
 8004d60:	42b3      	cmp	r3, r6
 8004d62:	db0b      	blt.n	8004d7c <__lshift+0x38>
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7ff fddb 	bl	8004920 <_Balloc>
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	b948      	cbnz	r0, 8004d82 <__lshift+0x3e>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <__lshift+0xd0>)
 8004d72:	4829      	ldr	r0, [pc, #164]	; (8004e18 <__lshift+0xd4>)
 8004d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d78:	f000 fb76 	bl	8005468 <__assert_func>
 8004d7c:	3101      	adds	r1, #1
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	e7ee      	b.n	8004d60 <__lshift+0x1c>
 8004d82:	2300      	movs	r3, #0
 8004d84:	f100 0114 	add.w	r1, r0, #20
 8004d88:	f100 0210 	add.w	r2, r0, #16
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	4553      	cmp	r3, sl
 8004d90:	db33      	blt.n	8004dfa <__lshift+0xb6>
 8004d92:	6920      	ldr	r0, [r4, #16]
 8004d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d98:	f104 0314 	add.w	r3, r4, #20
 8004d9c:	f019 091f 	ands.w	r9, r9, #31
 8004da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004da8:	d02b      	beq.n	8004e02 <__lshift+0xbe>
 8004daa:	f1c9 0e20 	rsb	lr, r9, #32
 8004dae:	468a      	mov	sl, r1
 8004db0:	2200      	movs	r2, #0
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	fa00 f009 	lsl.w	r0, r0, r9
 8004db8:	4302      	orrs	r2, r0
 8004dba:	f84a 2b04 	str.w	r2, [sl], #4
 8004dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc2:	459c      	cmp	ip, r3
 8004dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004dc8:	d8f3      	bhi.n	8004db2 <__lshift+0x6e>
 8004dca:	ebac 0304 	sub.w	r3, ip, r4
 8004dce:	3b15      	subs	r3, #21
 8004dd0:	f023 0303 	bic.w	r3, r3, #3
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	f104 0015 	add.w	r0, r4, #21
 8004dda:	4584      	cmp	ip, r0
 8004ddc:	bf38      	it	cc
 8004dde:	2304      	movcc	r3, #4
 8004de0:	50ca      	str	r2, [r1, r3]
 8004de2:	b10a      	cbz	r2, 8004de8 <__lshift+0xa4>
 8004de4:	f108 0602 	add.w	r6, r8, #2
 8004de8:	3e01      	subs	r6, #1
 8004dea:	4638      	mov	r0, r7
 8004dec:	612e      	str	r6, [r5, #16]
 8004dee:	4621      	mov	r1, r4
 8004df0:	f7ff fdd6 	bl	80049a0 <_Bfree>
 8004df4:	4628      	mov	r0, r5
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8004dfe:	3301      	adds	r3, #1
 8004e00:	e7c5      	b.n	8004d8e <__lshift+0x4a>
 8004e02:	3904      	subs	r1, #4
 8004e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e0c:	459c      	cmp	ip, r3
 8004e0e:	d8f9      	bhi.n	8004e04 <__lshift+0xc0>
 8004e10:	e7ea      	b.n	8004de8 <__lshift+0xa4>
 8004e12:	bf00      	nop
 8004e14:	080061d7 	.word	0x080061d7
 8004e18:	080061e8 	.word	0x080061e8

08004e1c <__mcmp>:
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	6902      	ldr	r2, [r0, #16]
 8004e20:	690c      	ldr	r4, [r1, #16]
 8004e22:	1b12      	subs	r2, r2, r4
 8004e24:	d10e      	bne.n	8004e44 <__mcmp+0x28>
 8004e26:	f100 0314 	add.w	r3, r0, #20
 8004e2a:	3114      	adds	r1, #20
 8004e2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004e30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004e34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004e38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004e3c:	42a5      	cmp	r5, r4
 8004e3e:	d003      	beq.n	8004e48 <__mcmp+0x2c>
 8004e40:	d305      	bcc.n	8004e4e <__mcmp+0x32>
 8004e42:	2201      	movs	r2, #1
 8004e44:	4610      	mov	r0, r2
 8004e46:	bd30      	pop	{r4, r5, pc}
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	d3f3      	bcc.n	8004e34 <__mcmp+0x18>
 8004e4c:	e7fa      	b.n	8004e44 <__mcmp+0x28>
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e52:	e7f7      	b.n	8004e44 <__mcmp+0x28>

08004e54 <__mdiff>:
 8004e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	460c      	mov	r4, r1
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4617      	mov	r7, r2
 8004e62:	f7ff ffdb 	bl	8004e1c <__mcmp>
 8004e66:	1e05      	subs	r5, r0, #0
 8004e68:	d110      	bne.n	8004e8c <__mdiff+0x38>
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff fd57 	bl	8004920 <_Balloc>
 8004e72:	b930      	cbnz	r0, 8004e82 <__mdiff+0x2e>
 8004e74:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <__mdiff+0x108>)
 8004e76:	4602      	mov	r2, r0
 8004e78:	f240 2132 	movw	r1, #562	; 0x232
 8004e7c:	4838      	ldr	r0, [pc, #224]	; (8004f60 <__mdiff+0x10c>)
 8004e7e:	f000 faf3 	bl	8005468 <__assert_func>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	bfa4      	itt	ge
 8004e8e:	463b      	movge	r3, r7
 8004e90:	4627      	movge	r7, r4
 8004e92:	4630      	mov	r0, r6
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	bfa6      	itte	ge
 8004e98:	461c      	movge	r4, r3
 8004e9a:	2500      	movge	r5, #0
 8004e9c:	2501      	movlt	r5, #1
 8004e9e:	f7ff fd3f 	bl	8004920 <_Balloc>
 8004ea2:	b920      	cbnz	r0, 8004eae <__mdiff+0x5a>
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <__mdiff+0x108>)
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004eac:	e7e6      	b.n	8004e7c <__mdiff+0x28>
 8004eae:	693e      	ldr	r6, [r7, #16]
 8004eb0:	60c5      	str	r5, [r0, #12]
 8004eb2:	6925      	ldr	r5, [r4, #16]
 8004eb4:	f107 0114 	add.w	r1, r7, #20
 8004eb8:	f104 0914 	add.w	r9, r4, #20
 8004ebc:	f100 0e14 	add.w	lr, r0, #20
 8004ec0:	f107 0210 	add.w	r2, r7, #16
 8004ec4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004ec8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004ecc:	46f2      	mov	sl, lr
 8004ece:	2700      	movs	r7, #0
 8004ed0:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004ed8:	fa1f f883 	uxth.w	r8, r3
 8004edc:	fa17 f78b 	uxtah	r7, r7, fp
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	eba7 0808 	sub.w	r8, r7, r8
 8004ee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004eea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004eee:	fa1f f888 	uxth.w	r8, r8
 8004ef2:	141f      	asrs	r7, r3, #16
 8004ef4:	454d      	cmp	r5, r9
 8004ef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004efa:	f84a 3b04 	str.w	r3, [sl], #4
 8004efe:	d8e7      	bhi.n	8004ed0 <__mdiff+0x7c>
 8004f00:	1b2b      	subs	r3, r5, r4
 8004f02:	3b15      	subs	r3, #21
 8004f04:	f023 0303 	bic.w	r3, r3, #3
 8004f08:	3304      	adds	r3, #4
 8004f0a:	3415      	adds	r4, #21
 8004f0c:	42a5      	cmp	r5, r4
 8004f0e:	bf38      	it	cc
 8004f10:	2304      	movcc	r3, #4
 8004f12:	4419      	add	r1, r3
 8004f14:	4473      	add	r3, lr
 8004f16:	469e      	mov	lr, r3
 8004f18:	460d      	mov	r5, r1
 8004f1a:	4565      	cmp	r5, ip
 8004f1c:	d30e      	bcc.n	8004f3c <__mdiff+0xe8>
 8004f1e:	f10c 0203 	add.w	r2, ip, #3
 8004f22:	1a52      	subs	r2, r2, r1
 8004f24:	f022 0203 	bic.w	r2, r2, #3
 8004f28:	3903      	subs	r1, #3
 8004f2a:	458c      	cmp	ip, r1
 8004f2c:	bf38      	it	cc
 8004f2e:	2200      	movcc	r2, #0
 8004f30:	441a      	add	r2, r3
 8004f32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004f36:	b17b      	cbz	r3, 8004f58 <__mdiff+0x104>
 8004f38:	6106      	str	r6, [r0, #16]
 8004f3a:	e7a5      	b.n	8004e88 <__mdiff+0x34>
 8004f3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8004f40:	fa17 f488 	uxtah	r4, r7, r8
 8004f44:	1422      	asrs	r2, r4, #16
 8004f46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004f4a:	b2a4      	uxth	r4, r4
 8004f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004f50:	f84e 4b04 	str.w	r4, [lr], #4
 8004f54:	1417      	asrs	r7, r2, #16
 8004f56:	e7e0      	b.n	8004f1a <__mdiff+0xc6>
 8004f58:	3e01      	subs	r6, #1
 8004f5a:	e7ea      	b.n	8004f32 <__mdiff+0xde>
 8004f5c:	080061d7 	.word	0x080061d7
 8004f60:	080061e8 	.word	0x080061e8

08004f64 <__d2b>:
 8004f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	4689      	mov	r9, r1
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	ec57 6b10 	vmov	r6, r7, d0
 8004f70:	4690      	mov	r8, r2
 8004f72:	f7ff fcd5 	bl	8004920 <_Balloc>
 8004f76:	4604      	mov	r4, r0
 8004f78:	b930      	cbnz	r0, 8004f88 <__d2b+0x24>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <__d2b+0xb0>)
 8004f7e:	4826      	ldr	r0, [pc, #152]	; (8005018 <__d2b+0xb4>)
 8004f80:	f240 310a 	movw	r1, #778	; 0x30a
 8004f84:	f000 fa70 	bl	8005468 <__assert_func>
 8004f88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004f8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f90:	bb35      	cbnz	r5, 8004fe0 <__d2b+0x7c>
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	d028      	beq.n	8004fea <__d2b+0x86>
 8004f98:	4668      	mov	r0, sp
 8004f9a:	9600      	str	r6, [sp, #0]
 8004f9c:	f7ff fd8c 	bl	8004ab8 <__lo0bits>
 8004fa0:	9900      	ldr	r1, [sp, #0]
 8004fa2:	b300      	cbz	r0, 8004fe6 <__d2b+0x82>
 8004fa4:	9a01      	ldr	r2, [sp, #4]
 8004fa6:	f1c0 0320 	rsb	r3, r0, #32
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	40c2      	lsrs	r2, r0
 8004fb2:	6163      	str	r3, [r4, #20]
 8004fb4:	9201      	str	r2, [sp, #4]
 8004fb6:	9b01      	ldr	r3, [sp, #4]
 8004fb8:	61a3      	str	r3, [r4, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2202      	movne	r2, #2
 8004fc0:	2201      	moveq	r2, #1
 8004fc2:	6122      	str	r2, [r4, #16]
 8004fc4:	b1d5      	cbz	r5, 8004ffc <__d2b+0x98>
 8004fc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004fca:	4405      	add	r5, r0
 8004fcc:	f8c9 5000 	str.w	r5, [r9]
 8004fd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fd4:	f8c8 0000 	str.w	r0, [r8]
 8004fd8:	4620      	mov	r0, r4
 8004fda:	b003      	add	sp, #12
 8004fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe4:	e7d5      	b.n	8004f92 <__d2b+0x2e>
 8004fe6:	6161      	str	r1, [r4, #20]
 8004fe8:	e7e5      	b.n	8004fb6 <__d2b+0x52>
 8004fea:	a801      	add	r0, sp, #4
 8004fec:	f7ff fd64 	bl	8004ab8 <__lo0bits>
 8004ff0:	9b01      	ldr	r3, [sp, #4]
 8004ff2:	6163      	str	r3, [r4, #20]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	6122      	str	r2, [r4, #16]
 8004ff8:	3020      	adds	r0, #32
 8004ffa:	e7e3      	b.n	8004fc4 <__d2b+0x60>
 8004ffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005004:	f8c9 0000 	str.w	r0, [r9]
 8005008:	6918      	ldr	r0, [r3, #16]
 800500a:	f7ff fd35 	bl	8004a78 <__hi0bits>
 800500e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005012:	e7df      	b.n	8004fd4 <__d2b+0x70>
 8005014:	080061d7 	.word	0x080061d7
 8005018:	080061e8 	.word	0x080061e8

0800501c <_calloc_r>:
 800501c:	b513      	push	{r0, r1, r4, lr}
 800501e:	434a      	muls	r2, r1
 8005020:	4611      	mov	r1, r2
 8005022:	9201      	str	r2, [sp, #4]
 8005024:	f000 f85a 	bl	80050dc <_malloc_r>
 8005028:	4604      	mov	r4, r0
 800502a:	b118      	cbz	r0, 8005034 <_calloc_r+0x18>
 800502c:	9a01      	ldr	r2, [sp, #4]
 800502e:	2100      	movs	r1, #0
 8005030:	f7fe f9e0 	bl	80033f4 <memset>
 8005034:	4620      	mov	r0, r4
 8005036:	b002      	add	sp, #8
 8005038:	bd10      	pop	{r4, pc}
	...

0800503c <_free_r>:
 800503c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800503e:	2900      	cmp	r1, #0
 8005040:	d048      	beq.n	80050d4 <_free_r+0x98>
 8005042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005046:	9001      	str	r0, [sp, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f1a1 0404 	sub.w	r4, r1, #4
 800504e:	bfb8      	it	lt
 8005050:	18e4      	addlt	r4, r4, r3
 8005052:	f000 fa65 	bl	8005520 <__malloc_lock>
 8005056:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <_free_r+0x9c>)
 8005058:	9801      	ldr	r0, [sp, #4]
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	4615      	mov	r5, r2
 800505e:	b933      	cbnz	r3, 800506e <_free_r+0x32>
 8005060:	6063      	str	r3, [r4, #4]
 8005062:	6014      	str	r4, [r2, #0]
 8005064:	b003      	add	sp, #12
 8005066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506a:	f000 ba5f 	b.w	800552c <__malloc_unlock>
 800506e:	42a3      	cmp	r3, r4
 8005070:	d90b      	bls.n	800508a <_free_r+0x4e>
 8005072:	6821      	ldr	r1, [r4, #0]
 8005074:	1862      	adds	r2, r4, r1
 8005076:	4293      	cmp	r3, r2
 8005078:	bf04      	itt	eq
 800507a:	681a      	ldreq	r2, [r3, #0]
 800507c:	685b      	ldreq	r3, [r3, #4]
 800507e:	6063      	str	r3, [r4, #4]
 8005080:	bf04      	itt	eq
 8005082:	1852      	addeq	r2, r2, r1
 8005084:	6022      	streq	r2, [r4, #0]
 8005086:	602c      	str	r4, [r5, #0]
 8005088:	e7ec      	b.n	8005064 <_free_r+0x28>
 800508a:	461a      	mov	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b10b      	cbz	r3, 8005094 <_free_r+0x58>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x4e>
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	1855      	adds	r5, r2, r1
 8005098:	42a5      	cmp	r5, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x78>
 800509c:	6824      	ldr	r4, [r4, #0]
 800509e:	4421      	add	r1, r4
 80050a0:	1854      	adds	r4, r2, r1
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	d1dd      	bne.n	8005064 <_free_r+0x28>
 80050a8:	681c      	ldr	r4, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6053      	str	r3, [r2, #4]
 80050ae:	4421      	add	r1, r4
 80050b0:	6011      	str	r1, [r2, #0]
 80050b2:	e7d7      	b.n	8005064 <_free_r+0x28>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x80>
 80050b6:	230c      	movs	r3, #12
 80050b8:	6003      	str	r3, [r0, #0]
 80050ba:	e7d3      	b.n	8005064 <_free_r+0x28>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf04      	itt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	bf04      	itt	eq
 80050cc:	1949      	addeq	r1, r1, r5
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	6054      	str	r4, [r2, #4]
 80050d2:	e7c7      	b.n	8005064 <_free_r+0x28>
 80050d4:	b003      	add	sp, #12
 80050d6:	bd30      	pop	{r4, r5, pc}
 80050d8:	200002d8 	.word	0x200002d8

080050dc <_malloc_r>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	1ccd      	adds	r5, r1, #3
 80050e0:	f025 0503 	bic.w	r5, r5, #3
 80050e4:	3508      	adds	r5, #8
 80050e6:	2d0c      	cmp	r5, #12
 80050e8:	bf38      	it	cc
 80050ea:	250c      	movcc	r5, #12
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	4606      	mov	r6, r0
 80050f0:	db01      	blt.n	80050f6 <_malloc_r+0x1a>
 80050f2:	42a9      	cmp	r1, r5
 80050f4:	d903      	bls.n	80050fe <_malloc_r+0x22>
 80050f6:	230c      	movs	r3, #12
 80050f8:	6033      	str	r3, [r6, #0]
 80050fa:	2000      	movs	r0, #0
 80050fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050fe:	f000 fa0f 	bl	8005520 <__malloc_lock>
 8005102:	4921      	ldr	r1, [pc, #132]	; (8005188 <_malloc_r+0xac>)
 8005104:	680a      	ldr	r2, [r1, #0]
 8005106:	4614      	mov	r4, r2
 8005108:	b99c      	cbnz	r4, 8005132 <_malloc_r+0x56>
 800510a:	4f20      	ldr	r7, [pc, #128]	; (800518c <_malloc_r+0xb0>)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	b923      	cbnz	r3, 800511a <_malloc_r+0x3e>
 8005110:	4621      	mov	r1, r4
 8005112:	4630      	mov	r0, r6
 8005114:	f000 f998 	bl	8005448 <_sbrk_r>
 8005118:	6038      	str	r0, [r7, #0]
 800511a:	4629      	mov	r1, r5
 800511c:	4630      	mov	r0, r6
 800511e:	f000 f993 	bl	8005448 <_sbrk_r>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	d123      	bne.n	800516e <_malloc_r+0x92>
 8005126:	230c      	movs	r3, #12
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	4630      	mov	r0, r6
 800512c:	f000 f9fe 	bl	800552c <__malloc_unlock>
 8005130:	e7e3      	b.n	80050fa <_malloc_r+0x1e>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	1b5b      	subs	r3, r3, r5
 8005136:	d417      	bmi.n	8005168 <_malloc_r+0x8c>
 8005138:	2b0b      	cmp	r3, #11
 800513a:	d903      	bls.n	8005144 <_malloc_r+0x68>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	441c      	add	r4, r3
 8005140:	6025      	str	r5, [r4, #0]
 8005142:	e004      	b.n	800514e <_malloc_r+0x72>
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	42a2      	cmp	r2, r4
 8005148:	bf0c      	ite	eq
 800514a:	600b      	streq	r3, [r1, #0]
 800514c:	6053      	strne	r3, [r2, #4]
 800514e:	4630      	mov	r0, r6
 8005150:	f000 f9ec 	bl	800552c <__malloc_unlock>
 8005154:	f104 000b 	add.w	r0, r4, #11
 8005158:	1d23      	adds	r3, r4, #4
 800515a:	f020 0007 	bic.w	r0, r0, #7
 800515e:	1ac2      	subs	r2, r0, r3
 8005160:	d0cc      	beq.n	80050fc <_malloc_r+0x20>
 8005162:	1a1b      	subs	r3, r3, r0
 8005164:	50a3      	str	r3, [r4, r2]
 8005166:	e7c9      	b.n	80050fc <_malloc_r+0x20>
 8005168:	4622      	mov	r2, r4
 800516a:	6864      	ldr	r4, [r4, #4]
 800516c:	e7cc      	b.n	8005108 <_malloc_r+0x2c>
 800516e:	1cc4      	adds	r4, r0, #3
 8005170:	f024 0403 	bic.w	r4, r4, #3
 8005174:	42a0      	cmp	r0, r4
 8005176:	d0e3      	beq.n	8005140 <_malloc_r+0x64>
 8005178:	1a21      	subs	r1, r4, r0
 800517a:	4630      	mov	r0, r6
 800517c:	f000 f964 	bl	8005448 <_sbrk_r>
 8005180:	3001      	adds	r0, #1
 8005182:	d1dd      	bne.n	8005140 <_malloc_r+0x64>
 8005184:	e7cf      	b.n	8005126 <_malloc_r+0x4a>
 8005186:	bf00      	nop
 8005188:	200002d8 	.word	0x200002d8
 800518c:	200002dc 	.word	0x200002dc

08005190 <__ssputs_r>:
 8005190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	688e      	ldr	r6, [r1, #8]
 8005196:	429e      	cmp	r6, r3
 8005198:	4682      	mov	sl, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4690      	mov	r8, r2
 800519e:	461f      	mov	r7, r3
 80051a0:	d838      	bhi.n	8005214 <__ssputs_r+0x84>
 80051a2:	898a      	ldrh	r2, [r1, #12]
 80051a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051a8:	d032      	beq.n	8005210 <__ssputs_r+0x80>
 80051aa:	6825      	ldr	r5, [r4, #0]
 80051ac:	6909      	ldr	r1, [r1, #16]
 80051ae:	eba5 0901 	sub.w	r9, r5, r1
 80051b2:	6965      	ldr	r5, [r4, #20]
 80051b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051bc:	3301      	adds	r3, #1
 80051be:	444b      	add	r3, r9
 80051c0:	106d      	asrs	r5, r5, #1
 80051c2:	429d      	cmp	r5, r3
 80051c4:	bf38      	it	cc
 80051c6:	461d      	movcc	r5, r3
 80051c8:	0553      	lsls	r3, r2, #21
 80051ca:	d531      	bpl.n	8005230 <__ssputs_r+0xa0>
 80051cc:	4629      	mov	r1, r5
 80051ce:	f7ff ff85 	bl	80050dc <_malloc_r>
 80051d2:	4606      	mov	r6, r0
 80051d4:	b950      	cbnz	r0, 80051ec <__ssputs_r+0x5c>
 80051d6:	230c      	movs	r3, #12
 80051d8:	f8ca 3000 	str.w	r3, [sl]
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e2:	81a3      	strh	r3, [r4, #12]
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295
 80051e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ec:	6921      	ldr	r1, [r4, #16]
 80051ee:	464a      	mov	r2, r9
 80051f0:	f7ff fb88 	bl	8004904 <memcpy>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	6126      	str	r6, [r4, #16]
 8005202:	6165      	str	r5, [r4, #20]
 8005204:	444e      	add	r6, r9
 8005206:	eba5 0509 	sub.w	r5, r5, r9
 800520a:	6026      	str	r6, [r4, #0]
 800520c:	60a5      	str	r5, [r4, #8]
 800520e:	463e      	mov	r6, r7
 8005210:	42be      	cmp	r6, r7
 8005212:	d900      	bls.n	8005216 <__ssputs_r+0x86>
 8005214:	463e      	mov	r6, r7
 8005216:	4632      	mov	r2, r6
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	4641      	mov	r1, r8
 800521c:	f000 f966 	bl	80054ec <memmove>
 8005220:	68a3      	ldr	r3, [r4, #8]
 8005222:	6822      	ldr	r2, [r4, #0]
 8005224:	1b9b      	subs	r3, r3, r6
 8005226:	4432      	add	r2, r6
 8005228:	60a3      	str	r3, [r4, #8]
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	2000      	movs	r0, #0
 800522e:	e7db      	b.n	80051e8 <__ssputs_r+0x58>
 8005230:	462a      	mov	r2, r5
 8005232:	f000 f981 	bl	8005538 <_realloc_r>
 8005236:	4606      	mov	r6, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	d1e1      	bne.n	8005200 <__ssputs_r+0x70>
 800523c:	6921      	ldr	r1, [r4, #16]
 800523e:	4650      	mov	r0, sl
 8005240:	f7ff fefc 	bl	800503c <_free_r>
 8005244:	e7c7      	b.n	80051d6 <__ssputs_r+0x46>
	...

08005248 <_svfiprintf_r>:
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	4698      	mov	r8, r3
 800524e:	898b      	ldrh	r3, [r1, #12]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	b09d      	sub	sp, #116	; 0x74
 8005254:	4607      	mov	r7, r0
 8005256:	460d      	mov	r5, r1
 8005258:	4614      	mov	r4, r2
 800525a:	d50e      	bpl.n	800527a <_svfiprintf_r+0x32>
 800525c:	690b      	ldr	r3, [r1, #16]
 800525e:	b963      	cbnz	r3, 800527a <_svfiprintf_r+0x32>
 8005260:	2140      	movs	r1, #64	; 0x40
 8005262:	f7ff ff3b 	bl	80050dc <_malloc_r>
 8005266:	6028      	str	r0, [r5, #0]
 8005268:	6128      	str	r0, [r5, #16]
 800526a:	b920      	cbnz	r0, 8005276 <_svfiprintf_r+0x2e>
 800526c:	230c      	movs	r3, #12
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	e0d1      	b.n	800541a <_svfiprintf_r+0x1d2>
 8005276:	2340      	movs	r3, #64	; 0x40
 8005278:	616b      	str	r3, [r5, #20]
 800527a:	2300      	movs	r3, #0
 800527c:	9309      	str	r3, [sp, #36]	; 0x24
 800527e:	2320      	movs	r3, #32
 8005280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005284:	f8cd 800c 	str.w	r8, [sp, #12]
 8005288:	2330      	movs	r3, #48	; 0x30
 800528a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005434 <_svfiprintf_r+0x1ec>
 800528e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005292:	f04f 0901 	mov.w	r9, #1
 8005296:	4623      	mov	r3, r4
 8005298:	469a      	mov	sl, r3
 800529a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800529e:	b10a      	cbz	r2, 80052a4 <_svfiprintf_r+0x5c>
 80052a0:	2a25      	cmp	r2, #37	; 0x25
 80052a2:	d1f9      	bne.n	8005298 <_svfiprintf_r+0x50>
 80052a4:	ebba 0b04 	subs.w	fp, sl, r4
 80052a8:	d00b      	beq.n	80052c2 <_svfiprintf_r+0x7a>
 80052aa:	465b      	mov	r3, fp
 80052ac:	4622      	mov	r2, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	4638      	mov	r0, r7
 80052b2:	f7ff ff6d 	bl	8005190 <__ssputs_r>
 80052b6:	3001      	adds	r0, #1
 80052b8:	f000 80aa 	beq.w	8005410 <_svfiprintf_r+0x1c8>
 80052bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052be:	445a      	add	r2, fp
 80052c0:	9209      	str	r2, [sp, #36]	; 0x24
 80052c2:	f89a 3000 	ldrb.w	r3, [sl]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80a2 	beq.w	8005410 <_svfiprintf_r+0x1c8>
 80052cc:	2300      	movs	r3, #0
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295
 80052d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d6:	f10a 0a01 	add.w	sl, sl, #1
 80052da:	9304      	str	r3, [sp, #16]
 80052dc:	9307      	str	r3, [sp, #28]
 80052de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052e2:	931a      	str	r3, [sp, #104]	; 0x68
 80052e4:	4654      	mov	r4, sl
 80052e6:	2205      	movs	r2, #5
 80052e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ec:	4851      	ldr	r0, [pc, #324]	; (8005434 <_svfiprintf_r+0x1ec>)
 80052ee:	f7fa ffaf 	bl	8000250 <memchr>
 80052f2:	9a04      	ldr	r2, [sp, #16]
 80052f4:	b9d8      	cbnz	r0, 800532e <_svfiprintf_r+0xe6>
 80052f6:	06d0      	lsls	r0, r2, #27
 80052f8:	bf44      	itt	mi
 80052fa:	2320      	movmi	r3, #32
 80052fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005300:	0711      	lsls	r1, r2, #28
 8005302:	bf44      	itt	mi
 8005304:	232b      	movmi	r3, #43	; 0x2b
 8005306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800530a:	f89a 3000 	ldrb.w	r3, [sl]
 800530e:	2b2a      	cmp	r3, #42	; 0x2a
 8005310:	d015      	beq.n	800533e <_svfiprintf_r+0xf6>
 8005312:	9a07      	ldr	r2, [sp, #28]
 8005314:	4654      	mov	r4, sl
 8005316:	2000      	movs	r0, #0
 8005318:	f04f 0c0a 	mov.w	ip, #10
 800531c:	4621      	mov	r1, r4
 800531e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005322:	3b30      	subs	r3, #48	; 0x30
 8005324:	2b09      	cmp	r3, #9
 8005326:	d94e      	bls.n	80053c6 <_svfiprintf_r+0x17e>
 8005328:	b1b0      	cbz	r0, 8005358 <_svfiprintf_r+0x110>
 800532a:	9207      	str	r2, [sp, #28]
 800532c:	e014      	b.n	8005358 <_svfiprintf_r+0x110>
 800532e:	eba0 0308 	sub.w	r3, r0, r8
 8005332:	fa09 f303 	lsl.w	r3, r9, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	46a2      	mov	sl, r4
 800533c:	e7d2      	b.n	80052e4 <_svfiprintf_r+0x9c>
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	1d19      	adds	r1, r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	9103      	str	r1, [sp, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfbb      	ittet	lt
 800534a:	425b      	neglt	r3, r3
 800534c:	f042 0202 	orrlt.w	r2, r2, #2
 8005350:	9307      	strge	r3, [sp, #28]
 8005352:	9307      	strlt	r3, [sp, #28]
 8005354:	bfb8      	it	lt
 8005356:	9204      	strlt	r2, [sp, #16]
 8005358:	7823      	ldrb	r3, [r4, #0]
 800535a:	2b2e      	cmp	r3, #46	; 0x2e
 800535c:	d10c      	bne.n	8005378 <_svfiprintf_r+0x130>
 800535e:	7863      	ldrb	r3, [r4, #1]
 8005360:	2b2a      	cmp	r3, #42	; 0x2a
 8005362:	d135      	bne.n	80053d0 <_svfiprintf_r+0x188>
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	9203      	str	r2, [sp, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	bfb8      	it	lt
 8005370:	f04f 33ff 	movlt.w	r3, #4294967295
 8005374:	3402      	adds	r4, #2
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005444 <_svfiprintf_r+0x1fc>
 800537c:	7821      	ldrb	r1, [r4, #0]
 800537e:	2203      	movs	r2, #3
 8005380:	4650      	mov	r0, sl
 8005382:	f7fa ff65 	bl	8000250 <memchr>
 8005386:	b140      	cbz	r0, 800539a <_svfiprintf_r+0x152>
 8005388:	2340      	movs	r3, #64	; 0x40
 800538a:	eba0 000a 	sub.w	r0, r0, sl
 800538e:	fa03 f000 	lsl.w	r0, r3, r0
 8005392:	9b04      	ldr	r3, [sp, #16]
 8005394:	4303      	orrs	r3, r0
 8005396:	3401      	adds	r4, #1
 8005398:	9304      	str	r3, [sp, #16]
 800539a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539e:	4826      	ldr	r0, [pc, #152]	; (8005438 <_svfiprintf_r+0x1f0>)
 80053a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a4:	2206      	movs	r2, #6
 80053a6:	f7fa ff53 	bl	8000250 <memchr>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d038      	beq.n	8005420 <_svfiprintf_r+0x1d8>
 80053ae:	4b23      	ldr	r3, [pc, #140]	; (800543c <_svfiprintf_r+0x1f4>)
 80053b0:	bb1b      	cbnz	r3, 80053fa <_svfiprintf_r+0x1b2>
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	3307      	adds	r3, #7
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	3308      	adds	r3, #8
 80053bc:	9303      	str	r3, [sp, #12]
 80053be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c0:	4433      	add	r3, r6
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	e767      	b.n	8005296 <_svfiprintf_r+0x4e>
 80053c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ca:	460c      	mov	r4, r1
 80053cc:	2001      	movs	r0, #1
 80053ce:	e7a5      	b.n	800531c <_svfiprintf_r+0xd4>
 80053d0:	2300      	movs	r3, #0
 80053d2:	3401      	adds	r4, #1
 80053d4:	9305      	str	r3, [sp, #20]
 80053d6:	4619      	mov	r1, r3
 80053d8:	f04f 0c0a 	mov.w	ip, #10
 80053dc:	4620      	mov	r0, r4
 80053de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e2:	3a30      	subs	r2, #48	; 0x30
 80053e4:	2a09      	cmp	r2, #9
 80053e6:	d903      	bls.n	80053f0 <_svfiprintf_r+0x1a8>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0c5      	beq.n	8005378 <_svfiprintf_r+0x130>
 80053ec:	9105      	str	r1, [sp, #20]
 80053ee:	e7c3      	b.n	8005378 <_svfiprintf_r+0x130>
 80053f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f4:	4604      	mov	r4, r0
 80053f6:	2301      	movs	r3, #1
 80053f8:	e7f0      	b.n	80053dc <_svfiprintf_r+0x194>
 80053fa:	ab03      	add	r3, sp, #12
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	462a      	mov	r2, r5
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <_svfiprintf_r+0x1f8>)
 8005402:	a904      	add	r1, sp, #16
 8005404:	4638      	mov	r0, r7
 8005406:	f7fe f88f 	bl	8003528 <_printf_float>
 800540a:	1c42      	adds	r2, r0, #1
 800540c:	4606      	mov	r6, r0
 800540e:	d1d6      	bne.n	80053be <_svfiprintf_r+0x176>
 8005410:	89ab      	ldrh	r3, [r5, #12]
 8005412:	065b      	lsls	r3, r3, #25
 8005414:	f53f af2c 	bmi.w	8005270 <_svfiprintf_r+0x28>
 8005418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800541a:	b01d      	add	sp, #116	; 0x74
 800541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005420:	ab03      	add	r3, sp, #12
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	462a      	mov	r2, r5
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <_svfiprintf_r+0x1f8>)
 8005428:	a904      	add	r1, sp, #16
 800542a:	4638      	mov	r0, r7
 800542c:	f7fe fb08 	bl	8003a40 <_printf_i>
 8005430:	e7eb      	b.n	800540a <_svfiprintf_r+0x1c2>
 8005432:	bf00      	nop
 8005434:	08006344 	.word	0x08006344
 8005438:	0800634e 	.word	0x0800634e
 800543c:	08003529 	.word	0x08003529
 8005440:	08005191 	.word	0x08005191
 8005444:	0800634a 	.word	0x0800634a

08005448 <_sbrk_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d06      	ldr	r5, [pc, #24]	; (8005464 <_sbrk_r+0x1c>)
 800544c:	2300      	movs	r3, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	f000 fe14 	bl	8006080 <_sbrk>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_sbrk_r+0x1a>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_sbrk_r+0x1a>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	200002e8 	.word	0x200002e8

08005468 <__assert_func>:
 8005468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800546a:	4614      	mov	r4, r2
 800546c:	461a      	mov	r2, r3
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <__assert_func+0x2c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4605      	mov	r5, r0
 8005474:	68d8      	ldr	r0, [r3, #12]
 8005476:	b14c      	cbz	r4, 800548c <__assert_func+0x24>
 8005478:	4b07      	ldr	r3, [pc, #28]	; (8005498 <__assert_func+0x30>)
 800547a:	9100      	str	r1, [sp, #0]
 800547c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005480:	4906      	ldr	r1, [pc, #24]	; (800549c <__assert_func+0x34>)
 8005482:	462b      	mov	r3, r5
 8005484:	f000 f80e 	bl	80054a4 <fiprintf>
 8005488:	f000 faa4 	bl	80059d4 <abort>
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <__assert_func+0x38>)
 800548e:	461c      	mov	r4, r3
 8005490:	e7f3      	b.n	800547a <__assert_func+0x12>
 8005492:	bf00      	nop
 8005494:	2000001c 	.word	0x2000001c
 8005498:	08006355 	.word	0x08006355
 800549c:	08006362 	.word	0x08006362
 80054a0:	08006390 	.word	0x08006390

080054a4 <fiprintf>:
 80054a4:	b40e      	push	{r1, r2, r3}
 80054a6:	b503      	push	{r0, r1, lr}
 80054a8:	4601      	mov	r1, r0
 80054aa:	ab03      	add	r3, sp, #12
 80054ac:	4805      	ldr	r0, [pc, #20]	; (80054c4 <fiprintf+0x20>)
 80054ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b2:	6800      	ldr	r0, [r0, #0]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	f000 f88f 	bl	80055d8 <_vfiprintf_r>
 80054ba:	b002      	add	sp, #8
 80054bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c0:	b003      	add	sp, #12
 80054c2:	4770      	bx	lr
 80054c4:	2000001c 	.word	0x2000001c

080054c8 <__ascii_mbtowc>:
 80054c8:	b082      	sub	sp, #8
 80054ca:	b901      	cbnz	r1, 80054ce <__ascii_mbtowc+0x6>
 80054cc:	a901      	add	r1, sp, #4
 80054ce:	b142      	cbz	r2, 80054e2 <__ascii_mbtowc+0x1a>
 80054d0:	b14b      	cbz	r3, 80054e6 <__ascii_mbtowc+0x1e>
 80054d2:	7813      	ldrb	r3, [r2, #0]
 80054d4:	600b      	str	r3, [r1, #0]
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	1e10      	subs	r0, r2, #0
 80054da:	bf18      	it	ne
 80054dc:	2001      	movne	r0, #1
 80054de:	b002      	add	sp, #8
 80054e0:	4770      	bx	lr
 80054e2:	4610      	mov	r0, r2
 80054e4:	e7fb      	b.n	80054de <__ascii_mbtowc+0x16>
 80054e6:	f06f 0001 	mvn.w	r0, #1
 80054ea:	e7f8      	b.n	80054de <__ascii_mbtowc+0x16>

080054ec <memmove>:
 80054ec:	4288      	cmp	r0, r1
 80054ee:	b510      	push	{r4, lr}
 80054f0:	eb01 0402 	add.w	r4, r1, r2
 80054f4:	d902      	bls.n	80054fc <memmove+0x10>
 80054f6:	4284      	cmp	r4, r0
 80054f8:	4623      	mov	r3, r4
 80054fa:	d807      	bhi.n	800550c <memmove+0x20>
 80054fc:	1e43      	subs	r3, r0, #1
 80054fe:	42a1      	cmp	r1, r4
 8005500:	d008      	beq.n	8005514 <memmove+0x28>
 8005502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800550a:	e7f8      	b.n	80054fe <memmove+0x12>
 800550c:	4402      	add	r2, r0
 800550e:	4601      	mov	r1, r0
 8005510:	428a      	cmp	r2, r1
 8005512:	d100      	bne.n	8005516 <memmove+0x2a>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800551a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800551e:	e7f7      	b.n	8005510 <memmove+0x24>

08005520 <__malloc_lock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_lock+0x8>)
 8005522:	f000 bc17 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	200002f0 	.word	0x200002f0

0800552c <__malloc_unlock>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__malloc_unlock+0x8>)
 800552e:	f000 bc12 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	200002f0 	.word	0x200002f0

08005538 <_realloc_r>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	4607      	mov	r7, r0
 800553c:	4614      	mov	r4, r2
 800553e:	460e      	mov	r6, r1
 8005540:	b921      	cbnz	r1, 800554c <_realloc_r+0x14>
 8005542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005546:	4611      	mov	r1, r2
 8005548:	f7ff bdc8 	b.w	80050dc <_malloc_r>
 800554c:	b922      	cbnz	r2, 8005558 <_realloc_r+0x20>
 800554e:	f7ff fd75 	bl	800503c <_free_r>
 8005552:	4625      	mov	r5, r4
 8005554:	4628      	mov	r0, r5
 8005556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005558:	f000 fc62 	bl	8005e20 <_malloc_usable_size_r>
 800555c:	42a0      	cmp	r0, r4
 800555e:	d20f      	bcs.n	8005580 <_realloc_r+0x48>
 8005560:	4621      	mov	r1, r4
 8005562:	4638      	mov	r0, r7
 8005564:	f7ff fdba 	bl	80050dc <_malloc_r>
 8005568:	4605      	mov	r5, r0
 800556a:	2800      	cmp	r0, #0
 800556c:	d0f2      	beq.n	8005554 <_realloc_r+0x1c>
 800556e:	4631      	mov	r1, r6
 8005570:	4622      	mov	r2, r4
 8005572:	f7ff f9c7 	bl	8004904 <memcpy>
 8005576:	4631      	mov	r1, r6
 8005578:	4638      	mov	r0, r7
 800557a:	f7ff fd5f 	bl	800503c <_free_r>
 800557e:	e7e9      	b.n	8005554 <_realloc_r+0x1c>
 8005580:	4635      	mov	r5, r6
 8005582:	e7e7      	b.n	8005554 <_realloc_r+0x1c>

08005584 <__sfputc_r>:
 8005584:	6893      	ldr	r3, [r2, #8]
 8005586:	3b01      	subs	r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	b410      	push	{r4}
 800558c:	6093      	str	r3, [r2, #8]
 800558e:	da08      	bge.n	80055a2 <__sfputc_r+0x1e>
 8005590:	6994      	ldr	r4, [r2, #24]
 8005592:	42a3      	cmp	r3, r4
 8005594:	db01      	blt.n	800559a <__sfputc_r+0x16>
 8005596:	290a      	cmp	r1, #10
 8005598:	d103      	bne.n	80055a2 <__sfputc_r+0x1e>
 800559a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559e:	f000 b94b 	b.w	8005838 <__swbuf_r>
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	1c58      	adds	r0, r3, #1
 80055a6:	6010      	str	r0, [r2, #0]
 80055a8:	7019      	strb	r1, [r3, #0]
 80055aa:	4608      	mov	r0, r1
 80055ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <__sfputs_r>:
 80055b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b4:	4606      	mov	r6, r0
 80055b6:	460f      	mov	r7, r1
 80055b8:	4614      	mov	r4, r2
 80055ba:	18d5      	adds	r5, r2, r3
 80055bc:	42ac      	cmp	r4, r5
 80055be:	d101      	bne.n	80055c4 <__sfputs_r+0x12>
 80055c0:	2000      	movs	r0, #0
 80055c2:	e007      	b.n	80055d4 <__sfputs_r+0x22>
 80055c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c8:	463a      	mov	r2, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	f7ff ffda 	bl	8005584 <__sfputc_r>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d1f3      	bne.n	80055bc <__sfputs_r+0xa>
 80055d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055d8 <_vfiprintf_r>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	460d      	mov	r5, r1
 80055de:	b09d      	sub	sp, #116	; 0x74
 80055e0:	4614      	mov	r4, r2
 80055e2:	4698      	mov	r8, r3
 80055e4:	4606      	mov	r6, r0
 80055e6:	b118      	cbz	r0, 80055f0 <_vfiprintf_r+0x18>
 80055e8:	6983      	ldr	r3, [r0, #24]
 80055ea:	b90b      	cbnz	r3, 80055f0 <_vfiprintf_r+0x18>
 80055ec:	f000 fb14 	bl	8005c18 <__sinit>
 80055f0:	4b89      	ldr	r3, [pc, #548]	; (8005818 <_vfiprintf_r+0x240>)
 80055f2:	429d      	cmp	r5, r3
 80055f4:	d11b      	bne.n	800562e <_vfiprintf_r+0x56>
 80055f6:	6875      	ldr	r5, [r6, #4]
 80055f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055fa:	07d9      	lsls	r1, r3, #31
 80055fc:	d405      	bmi.n	800560a <_vfiprintf_r+0x32>
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	059a      	lsls	r2, r3, #22
 8005602:	d402      	bmi.n	800560a <_vfiprintf_r+0x32>
 8005604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005606:	f000 fba5 	bl	8005d54 <__retarget_lock_acquire_recursive>
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	071b      	lsls	r3, r3, #28
 800560e:	d501      	bpl.n	8005614 <_vfiprintf_r+0x3c>
 8005610:	692b      	ldr	r3, [r5, #16]
 8005612:	b9eb      	cbnz	r3, 8005650 <_vfiprintf_r+0x78>
 8005614:	4629      	mov	r1, r5
 8005616:	4630      	mov	r0, r6
 8005618:	f000 f96e 	bl	80058f8 <__swsetup_r>
 800561c:	b1c0      	cbz	r0, 8005650 <_vfiprintf_r+0x78>
 800561e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005620:	07dc      	lsls	r4, r3, #31
 8005622:	d50e      	bpl.n	8005642 <_vfiprintf_r+0x6a>
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	b01d      	add	sp, #116	; 0x74
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	4b7b      	ldr	r3, [pc, #492]	; (800581c <_vfiprintf_r+0x244>)
 8005630:	429d      	cmp	r5, r3
 8005632:	d101      	bne.n	8005638 <_vfiprintf_r+0x60>
 8005634:	68b5      	ldr	r5, [r6, #8]
 8005636:	e7df      	b.n	80055f8 <_vfiprintf_r+0x20>
 8005638:	4b79      	ldr	r3, [pc, #484]	; (8005820 <_vfiprintf_r+0x248>)
 800563a:	429d      	cmp	r5, r3
 800563c:	bf08      	it	eq
 800563e:	68f5      	ldreq	r5, [r6, #12]
 8005640:	e7da      	b.n	80055f8 <_vfiprintf_r+0x20>
 8005642:	89ab      	ldrh	r3, [r5, #12]
 8005644:	0598      	lsls	r0, r3, #22
 8005646:	d4ed      	bmi.n	8005624 <_vfiprintf_r+0x4c>
 8005648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800564a:	f000 fb84 	bl	8005d56 <__retarget_lock_release_recursive>
 800564e:	e7e9      	b.n	8005624 <_vfiprintf_r+0x4c>
 8005650:	2300      	movs	r3, #0
 8005652:	9309      	str	r3, [sp, #36]	; 0x24
 8005654:	2320      	movs	r3, #32
 8005656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800565a:	f8cd 800c 	str.w	r8, [sp, #12]
 800565e:	2330      	movs	r3, #48	; 0x30
 8005660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005824 <_vfiprintf_r+0x24c>
 8005664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005668:	f04f 0901 	mov.w	r9, #1
 800566c:	4623      	mov	r3, r4
 800566e:	469a      	mov	sl, r3
 8005670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005674:	b10a      	cbz	r2, 800567a <_vfiprintf_r+0xa2>
 8005676:	2a25      	cmp	r2, #37	; 0x25
 8005678:	d1f9      	bne.n	800566e <_vfiprintf_r+0x96>
 800567a:	ebba 0b04 	subs.w	fp, sl, r4
 800567e:	d00b      	beq.n	8005698 <_vfiprintf_r+0xc0>
 8005680:	465b      	mov	r3, fp
 8005682:	4622      	mov	r2, r4
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f7ff ff93 	bl	80055b2 <__sfputs_r>
 800568c:	3001      	adds	r0, #1
 800568e:	f000 80aa 	beq.w	80057e6 <_vfiprintf_r+0x20e>
 8005692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005694:	445a      	add	r2, fp
 8005696:	9209      	str	r2, [sp, #36]	; 0x24
 8005698:	f89a 3000 	ldrb.w	r3, [sl]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80a2 	beq.w	80057e6 <_vfiprintf_r+0x20e>
 80056a2:	2300      	movs	r3, #0
 80056a4:	f04f 32ff 	mov.w	r2, #4294967295
 80056a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ac:	f10a 0a01 	add.w	sl, sl, #1
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056b8:	931a      	str	r3, [sp, #104]	; 0x68
 80056ba:	4654      	mov	r4, sl
 80056bc:	2205      	movs	r2, #5
 80056be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c2:	4858      	ldr	r0, [pc, #352]	; (8005824 <_vfiprintf_r+0x24c>)
 80056c4:	f7fa fdc4 	bl	8000250 <memchr>
 80056c8:	9a04      	ldr	r2, [sp, #16]
 80056ca:	b9d8      	cbnz	r0, 8005704 <_vfiprintf_r+0x12c>
 80056cc:	06d1      	lsls	r1, r2, #27
 80056ce:	bf44      	itt	mi
 80056d0:	2320      	movmi	r3, #32
 80056d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d6:	0713      	lsls	r3, r2, #28
 80056d8:	bf44      	itt	mi
 80056da:	232b      	movmi	r3, #43	; 0x2b
 80056dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e0:	f89a 3000 	ldrb.w	r3, [sl]
 80056e4:	2b2a      	cmp	r3, #42	; 0x2a
 80056e6:	d015      	beq.n	8005714 <_vfiprintf_r+0x13c>
 80056e8:	9a07      	ldr	r2, [sp, #28]
 80056ea:	4654      	mov	r4, sl
 80056ec:	2000      	movs	r0, #0
 80056ee:	f04f 0c0a 	mov.w	ip, #10
 80056f2:	4621      	mov	r1, r4
 80056f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056f8:	3b30      	subs	r3, #48	; 0x30
 80056fa:	2b09      	cmp	r3, #9
 80056fc:	d94e      	bls.n	800579c <_vfiprintf_r+0x1c4>
 80056fe:	b1b0      	cbz	r0, 800572e <_vfiprintf_r+0x156>
 8005700:	9207      	str	r2, [sp, #28]
 8005702:	e014      	b.n	800572e <_vfiprintf_r+0x156>
 8005704:	eba0 0308 	sub.w	r3, r0, r8
 8005708:	fa09 f303 	lsl.w	r3, r9, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	9304      	str	r3, [sp, #16]
 8005710:	46a2      	mov	sl, r4
 8005712:	e7d2      	b.n	80056ba <_vfiprintf_r+0xe2>
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	1d19      	adds	r1, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	9103      	str	r1, [sp, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	bfbb      	ittet	lt
 8005720:	425b      	neglt	r3, r3
 8005722:	f042 0202 	orrlt.w	r2, r2, #2
 8005726:	9307      	strge	r3, [sp, #28]
 8005728:	9307      	strlt	r3, [sp, #28]
 800572a:	bfb8      	it	lt
 800572c:	9204      	strlt	r2, [sp, #16]
 800572e:	7823      	ldrb	r3, [r4, #0]
 8005730:	2b2e      	cmp	r3, #46	; 0x2e
 8005732:	d10c      	bne.n	800574e <_vfiprintf_r+0x176>
 8005734:	7863      	ldrb	r3, [r4, #1]
 8005736:	2b2a      	cmp	r3, #42	; 0x2a
 8005738:	d135      	bne.n	80057a6 <_vfiprintf_r+0x1ce>
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	9203      	str	r2, [sp, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfb8      	it	lt
 8005746:	f04f 33ff 	movlt.w	r3, #4294967295
 800574a:	3402      	adds	r4, #2
 800574c:	9305      	str	r3, [sp, #20]
 800574e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005834 <_vfiprintf_r+0x25c>
 8005752:	7821      	ldrb	r1, [r4, #0]
 8005754:	2203      	movs	r2, #3
 8005756:	4650      	mov	r0, sl
 8005758:	f7fa fd7a 	bl	8000250 <memchr>
 800575c:	b140      	cbz	r0, 8005770 <_vfiprintf_r+0x198>
 800575e:	2340      	movs	r3, #64	; 0x40
 8005760:	eba0 000a 	sub.w	r0, r0, sl
 8005764:	fa03 f000 	lsl.w	r0, r3, r0
 8005768:	9b04      	ldr	r3, [sp, #16]
 800576a:	4303      	orrs	r3, r0
 800576c:	3401      	adds	r4, #1
 800576e:	9304      	str	r3, [sp, #16]
 8005770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005774:	482c      	ldr	r0, [pc, #176]	; (8005828 <_vfiprintf_r+0x250>)
 8005776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800577a:	2206      	movs	r2, #6
 800577c:	f7fa fd68 	bl	8000250 <memchr>
 8005780:	2800      	cmp	r0, #0
 8005782:	d03f      	beq.n	8005804 <_vfiprintf_r+0x22c>
 8005784:	4b29      	ldr	r3, [pc, #164]	; (800582c <_vfiprintf_r+0x254>)
 8005786:	bb1b      	cbnz	r3, 80057d0 <_vfiprintf_r+0x1f8>
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	3307      	adds	r3, #7
 800578c:	f023 0307 	bic.w	r3, r3, #7
 8005790:	3308      	adds	r3, #8
 8005792:	9303      	str	r3, [sp, #12]
 8005794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005796:	443b      	add	r3, r7
 8005798:	9309      	str	r3, [sp, #36]	; 0x24
 800579a:	e767      	b.n	800566c <_vfiprintf_r+0x94>
 800579c:	fb0c 3202 	mla	r2, ip, r2, r3
 80057a0:	460c      	mov	r4, r1
 80057a2:	2001      	movs	r0, #1
 80057a4:	e7a5      	b.n	80056f2 <_vfiprintf_r+0x11a>
 80057a6:	2300      	movs	r3, #0
 80057a8:	3401      	adds	r4, #1
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	4619      	mov	r1, r3
 80057ae:	f04f 0c0a 	mov.w	ip, #10
 80057b2:	4620      	mov	r0, r4
 80057b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057b8:	3a30      	subs	r2, #48	; 0x30
 80057ba:	2a09      	cmp	r2, #9
 80057bc:	d903      	bls.n	80057c6 <_vfiprintf_r+0x1ee>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0c5      	beq.n	800574e <_vfiprintf_r+0x176>
 80057c2:	9105      	str	r1, [sp, #20]
 80057c4:	e7c3      	b.n	800574e <_vfiprintf_r+0x176>
 80057c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ca:	4604      	mov	r4, r0
 80057cc:	2301      	movs	r3, #1
 80057ce:	e7f0      	b.n	80057b2 <_vfiprintf_r+0x1da>
 80057d0:	ab03      	add	r3, sp, #12
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	462a      	mov	r2, r5
 80057d6:	4b16      	ldr	r3, [pc, #88]	; (8005830 <_vfiprintf_r+0x258>)
 80057d8:	a904      	add	r1, sp, #16
 80057da:	4630      	mov	r0, r6
 80057dc:	f7fd fea4 	bl	8003528 <_printf_float>
 80057e0:	4607      	mov	r7, r0
 80057e2:	1c78      	adds	r0, r7, #1
 80057e4:	d1d6      	bne.n	8005794 <_vfiprintf_r+0x1bc>
 80057e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057e8:	07d9      	lsls	r1, r3, #31
 80057ea:	d405      	bmi.n	80057f8 <_vfiprintf_r+0x220>
 80057ec:	89ab      	ldrh	r3, [r5, #12]
 80057ee:	059a      	lsls	r2, r3, #22
 80057f0:	d402      	bmi.n	80057f8 <_vfiprintf_r+0x220>
 80057f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f4:	f000 faaf 	bl	8005d56 <__retarget_lock_release_recursive>
 80057f8:	89ab      	ldrh	r3, [r5, #12]
 80057fa:	065b      	lsls	r3, r3, #25
 80057fc:	f53f af12 	bmi.w	8005624 <_vfiprintf_r+0x4c>
 8005800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005802:	e711      	b.n	8005628 <_vfiprintf_r+0x50>
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	462a      	mov	r2, r5
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <_vfiprintf_r+0x258>)
 800580c:	a904      	add	r1, sp, #16
 800580e:	4630      	mov	r0, r6
 8005810:	f7fe f916 	bl	8003a40 <_printf_i>
 8005814:	e7e4      	b.n	80057e0 <_vfiprintf_r+0x208>
 8005816:	bf00      	nop
 8005818:	080064bc 	.word	0x080064bc
 800581c:	080064dc 	.word	0x080064dc
 8005820:	0800649c 	.word	0x0800649c
 8005824:	08006344 	.word	0x08006344
 8005828:	0800634e 	.word	0x0800634e
 800582c:	08003529 	.word	0x08003529
 8005830:	080055b3 	.word	0x080055b3
 8005834:	0800634a 	.word	0x0800634a

08005838 <__swbuf_r>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	460e      	mov	r6, r1
 800583c:	4614      	mov	r4, r2
 800583e:	4605      	mov	r5, r0
 8005840:	b118      	cbz	r0, 800584a <__swbuf_r+0x12>
 8005842:	6983      	ldr	r3, [r0, #24]
 8005844:	b90b      	cbnz	r3, 800584a <__swbuf_r+0x12>
 8005846:	f000 f9e7 	bl	8005c18 <__sinit>
 800584a:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <__swbuf_r+0x98>)
 800584c:	429c      	cmp	r4, r3
 800584e:	d12b      	bne.n	80058a8 <__swbuf_r+0x70>
 8005850:	686c      	ldr	r4, [r5, #4]
 8005852:	69a3      	ldr	r3, [r4, #24]
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	071a      	lsls	r2, r3, #28
 800585a:	d52f      	bpl.n	80058bc <__swbuf_r+0x84>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	b36b      	cbz	r3, 80058bc <__swbuf_r+0x84>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	6820      	ldr	r0, [r4, #0]
 8005864:	1ac0      	subs	r0, r0, r3
 8005866:	6963      	ldr	r3, [r4, #20]
 8005868:	b2f6      	uxtb	r6, r6
 800586a:	4283      	cmp	r3, r0
 800586c:	4637      	mov	r7, r6
 800586e:	dc04      	bgt.n	800587a <__swbuf_r+0x42>
 8005870:	4621      	mov	r1, r4
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f93c 	bl	8005af0 <_fflush_r>
 8005878:	bb30      	cbnz	r0, 80058c8 <__swbuf_r+0x90>
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	3b01      	subs	r3, #1
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	701e      	strb	r6, [r3, #0]
 8005888:	6963      	ldr	r3, [r4, #20]
 800588a:	3001      	adds	r0, #1
 800588c:	4283      	cmp	r3, r0
 800588e:	d004      	beq.n	800589a <__swbuf_r+0x62>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	07db      	lsls	r3, r3, #31
 8005894:	d506      	bpl.n	80058a4 <__swbuf_r+0x6c>
 8005896:	2e0a      	cmp	r6, #10
 8005898:	d104      	bne.n	80058a4 <__swbuf_r+0x6c>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 f927 	bl	8005af0 <_fflush_r>
 80058a2:	b988      	cbnz	r0, 80058c8 <__swbuf_r+0x90>
 80058a4:	4638      	mov	r0, r7
 80058a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <__swbuf_r+0x9c>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d101      	bne.n	80058b2 <__swbuf_r+0x7a>
 80058ae:	68ac      	ldr	r4, [r5, #8]
 80058b0:	e7cf      	b.n	8005852 <__swbuf_r+0x1a>
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <__swbuf_r+0xa0>)
 80058b4:	429c      	cmp	r4, r3
 80058b6:	bf08      	it	eq
 80058b8:	68ec      	ldreq	r4, [r5, #12]
 80058ba:	e7ca      	b.n	8005852 <__swbuf_r+0x1a>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f81a 	bl	80058f8 <__swsetup_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0cb      	beq.n	8005860 <__swbuf_r+0x28>
 80058c8:	f04f 37ff 	mov.w	r7, #4294967295
 80058cc:	e7ea      	b.n	80058a4 <__swbuf_r+0x6c>
 80058ce:	bf00      	nop
 80058d0:	080064bc 	.word	0x080064bc
 80058d4:	080064dc 	.word	0x080064dc
 80058d8:	0800649c 	.word	0x0800649c

080058dc <__ascii_wctomb>:
 80058dc:	b149      	cbz	r1, 80058f2 <__ascii_wctomb+0x16>
 80058de:	2aff      	cmp	r2, #255	; 0xff
 80058e0:	bf85      	ittet	hi
 80058e2:	238a      	movhi	r3, #138	; 0x8a
 80058e4:	6003      	strhi	r3, [r0, #0]
 80058e6:	700a      	strbls	r2, [r1, #0]
 80058e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80058ec:	bf98      	it	ls
 80058ee:	2001      	movls	r0, #1
 80058f0:	4770      	bx	lr
 80058f2:	4608      	mov	r0, r1
 80058f4:	4770      	bx	lr
	...

080058f8 <__swsetup_r>:
 80058f8:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <__swsetup_r+0xcc>)
 80058fa:	b570      	push	{r4, r5, r6, lr}
 80058fc:	681d      	ldr	r5, [r3, #0]
 80058fe:	4606      	mov	r6, r0
 8005900:	460c      	mov	r4, r1
 8005902:	b125      	cbz	r5, 800590e <__swsetup_r+0x16>
 8005904:	69ab      	ldr	r3, [r5, #24]
 8005906:	b913      	cbnz	r3, 800590e <__swsetup_r+0x16>
 8005908:	4628      	mov	r0, r5
 800590a:	f000 f985 	bl	8005c18 <__sinit>
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <__swsetup_r+0xd0>)
 8005910:	429c      	cmp	r4, r3
 8005912:	d10f      	bne.n	8005934 <__swsetup_r+0x3c>
 8005914:	686c      	ldr	r4, [r5, #4]
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800591c:	0719      	lsls	r1, r3, #28
 800591e:	d42c      	bmi.n	800597a <__swsetup_r+0x82>
 8005920:	06dd      	lsls	r5, r3, #27
 8005922:	d411      	bmi.n	8005948 <__swsetup_r+0x50>
 8005924:	2309      	movs	r3, #9
 8005926:	6033      	str	r3, [r6, #0]
 8005928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	f04f 30ff 	mov.w	r0, #4294967295
 8005932:	e03e      	b.n	80059b2 <__swsetup_r+0xba>
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <__swsetup_r+0xd4>)
 8005936:	429c      	cmp	r4, r3
 8005938:	d101      	bne.n	800593e <__swsetup_r+0x46>
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	e7eb      	b.n	8005916 <__swsetup_r+0x1e>
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <__swsetup_r+0xd8>)
 8005940:	429c      	cmp	r4, r3
 8005942:	bf08      	it	eq
 8005944:	68ec      	ldreq	r4, [r5, #12]
 8005946:	e7e6      	b.n	8005916 <__swsetup_r+0x1e>
 8005948:	0758      	lsls	r0, r3, #29
 800594a:	d512      	bpl.n	8005972 <__swsetup_r+0x7a>
 800594c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594e:	b141      	cbz	r1, 8005962 <__swsetup_r+0x6a>
 8005950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005954:	4299      	cmp	r1, r3
 8005956:	d002      	beq.n	800595e <__swsetup_r+0x66>
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff fb6f 	bl	800503c <_free_r>
 800595e:	2300      	movs	r3, #0
 8005960:	6363      	str	r3, [r4, #52]	; 0x34
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	2300      	movs	r3, #0
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	b94b      	cbnz	r3, 8005992 <__swsetup_r+0x9a>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005988:	d003      	beq.n	8005992 <__swsetup_r+0x9a>
 800598a:	4621      	mov	r1, r4
 800598c:	4630      	mov	r0, r6
 800598e:	f000 fa07 	bl	8005da0 <__smakebuf_r>
 8005992:	89a0      	ldrh	r0, [r4, #12]
 8005994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005998:	f010 0301 	ands.w	r3, r0, #1
 800599c:	d00a      	beq.n	80059b4 <__swsetup_r+0xbc>
 800599e:	2300      	movs	r3, #0
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	6963      	ldr	r3, [r4, #20]
 80059a4:	425b      	negs	r3, r3
 80059a6:	61a3      	str	r3, [r4, #24]
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	b943      	cbnz	r3, 80059be <__swsetup_r+0xc6>
 80059ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059b0:	d1ba      	bne.n	8005928 <__swsetup_r+0x30>
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	0781      	lsls	r1, r0, #30
 80059b6:	bf58      	it	pl
 80059b8:	6963      	ldrpl	r3, [r4, #20]
 80059ba:	60a3      	str	r3, [r4, #8]
 80059bc:	e7f4      	b.n	80059a8 <__swsetup_r+0xb0>
 80059be:	2000      	movs	r0, #0
 80059c0:	e7f7      	b.n	80059b2 <__swsetup_r+0xba>
 80059c2:	bf00      	nop
 80059c4:	2000001c 	.word	0x2000001c
 80059c8:	080064bc 	.word	0x080064bc
 80059cc:	080064dc 	.word	0x080064dc
 80059d0:	0800649c 	.word	0x0800649c

080059d4 <abort>:
 80059d4:	b508      	push	{r3, lr}
 80059d6:	2006      	movs	r0, #6
 80059d8:	f000 fa52 	bl	8005e80 <raise>
 80059dc:	2001      	movs	r0, #1
 80059de:	f000 fb65 	bl	80060ac <_exit>
	...

080059e4 <__sflush_r>:
 80059e4:	898a      	ldrh	r2, [r1, #12]
 80059e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	0710      	lsls	r0, r2, #28
 80059ee:	460c      	mov	r4, r1
 80059f0:	d458      	bmi.n	8005aa4 <__sflush_r+0xc0>
 80059f2:	684b      	ldr	r3, [r1, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dc05      	bgt.n	8005a04 <__sflush_r+0x20>
 80059f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dc02      	bgt.n	8005a04 <__sflush_r+0x20>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d0f9      	beq.n	80059fe <__sflush_r+0x1a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a10:	682f      	ldr	r7, [r5, #0]
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	d032      	beq.n	8005a7c <__sflush_r+0x98>
 8005a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	075a      	lsls	r2, r3, #29
 8005a1c:	d505      	bpl.n	8005a2a <__sflush_r+0x46>
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	1ac0      	subs	r0, r0, r3
 8005a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a24:	b10b      	cbz	r3, 8005a2a <__sflush_r+0x46>
 8005a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a28:	1ac0      	subs	r0, r0, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a30:	6a21      	ldr	r1, [r4, #32]
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b0      	blx	r6
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	d106      	bne.n	8005a4a <__sflush_r+0x66>
 8005a3c:	6829      	ldr	r1, [r5, #0]
 8005a3e:	291d      	cmp	r1, #29
 8005a40:	d82c      	bhi.n	8005a9c <__sflush_r+0xb8>
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <__sflush_r+0x108>)
 8005a44:	40ca      	lsrs	r2, r1
 8005a46:	07d6      	lsls	r6, r2, #31
 8005a48:	d528      	bpl.n	8005a9c <__sflush_r+0xb8>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	6062      	str	r2, [r4, #4]
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	d504      	bpl.n	8005a60 <__sflush_r+0x7c>
 8005a56:	1c42      	adds	r2, r0, #1
 8005a58:	d101      	bne.n	8005a5e <__sflush_r+0x7a>
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b903      	cbnz	r3, 8005a60 <__sflush_r+0x7c>
 8005a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a62:	602f      	str	r7, [r5, #0]
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d0ca      	beq.n	80059fe <__sflush_r+0x1a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__sflush_r+0x92>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff fae3 	bl	800503c <_free_r>
 8005a76:	2000      	movs	r0, #0
 8005a78:	6360      	str	r0, [r4, #52]	; 0x34
 8005a7a:	e7c1      	b.n	8005a00 <__sflush_r+0x1c>
 8005a7c:	6a21      	ldr	r1, [r4, #32]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	1c41      	adds	r1, r0, #1
 8005a86:	d1c7      	bne.n	8005a18 <__sflush_r+0x34>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0c4      	beq.n	8005a18 <__sflush_r+0x34>
 8005a8e:	2b1d      	cmp	r3, #29
 8005a90:	d001      	beq.n	8005a96 <__sflush_r+0xb2>
 8005a92:	2b16      	cmp	r3, #22
 8005a94:	d101      	bne.n	8005a9a <__sflush_r+0xb6>
 8005a96:	602f      	str	r7, [r5, #0]
 8005a98:	e7b1      	b.n	80059fe <__sflush_r+0x1a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7ad      	b.n	8005a00 <__sflush_r+0x1c>
 8005aa4:	690f      	ldr	r7, [r1, #16]
 8005aa6:	2f00      	cmp	r7, #0
 8005aa8:	d0a9      	beq.n	80059fe <__sflush_r+0x1a>
 8005aaa:	0793      	lsls	r3, r2, #30
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	bf08      	it	eq
 8005ab0:	694b      	ldreq	r3, [r1, #20]
 8005ab2:	600f      	str	r7, [r1, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	eba6 0807 	sub.w	r8, r6, r7
 8005abc:	608b      	str	r3, [r1, #8]
 8005abe:	f1b8 0f00 	cmp.w	r8, #0
 8005ac2:	dd9c      	ble.n	80059fe <__sflush_r+0x1a>
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ac8:	4643      	mov	r3, r8
 8005aca:	463a      	mov	r2, r7
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dc06      	bgt.n	8005ae2 <__sflush_r+0xfe>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e78e      	b.n	8005a00 <__sflush_r+0x1c>
 8005ae2:	4407      	add	r7, r0
 8005ae4:	eba8 0800 	sub.w	r8, r8, r0
 8005ae8:	e7e9      	b.n	8005abe <__sflush_r+0xda>
 8005aea:	bf00      	nop
 8005aec:	20400001 	.word	0x20400001

08005af0 <_fflush_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	690b      	ldr	r3, [r1, #16]
 8005af4:	4605      	mov	r5, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	b913      	cbnz	r3, 8005b00 <_fflush_r+0x10>
 8005afa:	2500      	movs	r5, #0
 8005afc:	4628      	mov	r0, r5
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	b118      	cbz	r0, 8005b0a <_fflush_r+0x1a>
 8005b02:	6983      	ldr	r3, [r0, #24]
 8005b04:	b90b      	cbnz	r3, 8005b0a <_fflush_r+0x1a>
 8005b06:	f000 f887 	bl	8005c18 <__sinit>
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <_fflush_r+0x6c>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d11b      	bne.n	8005b48 <_fflush_r+0x58>
 8005b10:	686c      	ldr	r4, [r5, #4]
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <_fflush_r+0xa>
 8005b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d404      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b20:	0599      	lsls	r1, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f915 	bl	8005d54 <__retarget_lock_acquire_recursive>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7ff ff59 	bl	80059e4 <__sflush_r>
 8005b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	4605      	mov	r5, r0
 8005b38:	d4e0      	bmi.n	8005afc <_fflush_r+0xc>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d4dd      	bmi.n	8005afc <_fflush_r+0xc>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f000 f908 	bl	8005d56 <__retarget_lock_release_recursive>
 8005b46:	e7d9      	b.n	8005afc <_fflush_r+0xc>
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <_fflush_r+0x70>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d101      	bne.n	8005b52 <_fflush_r+0x62>
 8005b4e:	68ac      	ldr	r4, [r5, #8]
 8005b50:	e7df      	b.n	8005b12 <_fflush_r+0x22>
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <_fflush_r+0x74>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	bf08      	it	eq
 8005b58:	68ec      	ldreq	r4, [r5, #12]
 8005b5a:	e7da      	b.n	8005b12 <_fflush_r+0x22>
 8005b5c:	080064bc 	.word	0x080064bc
 8005b60:	080064dc 	.word	0x080064dc
 8005b64:	0800649c 	.word	0x0800649c

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b76:	6083      	str	r3, [r0, #8]
 8005b78:	8181      	strh	r1, [r0, #12]
 8005b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b7c:	81c2      	strh	r2, [r0, #14]
 8005b7e:	6183      	str	r3, [r0, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f7fd fc35 	bl	80033f4 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x3c>)
 8005b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x40>)
 8005b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x44>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005eb9 	.word	0x08005eb9
 8005ba4:	08005edb 	.word	0x08005edb
 8005ba8:	08005f13 	.word	0x08005f13
 8005bac:	08005f37 	.word	0x08005f37

08005bb0 <_cleanup_r>:
 8005bb0:	4901      	ldr	r1, [pc, #4]	; (8005bb8 <_cleanup_r+0x8>)
 8005bb2:	f000 b8af 	b.w	8005d14 <_fwalk_reent>
 8005bb6:	bf00      	nop
 8005bb8:	08005af1 	.word	0x08005af1

08005bbc <__sfmoreglue>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	1e4a      	subs	r2, r1, #1
 8005bc0:	2568      	movs	r5, #104	; 0x68
 8005bc2:	4355      	muls	r5, r2
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bca:	f7ff fa87 	bl	80050dc <_malloc_r>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	b140      	cbz	r0, 8005be4 <__sfmoreglue+0x28>
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd8:	300c      	adds	r0, #12
 8005bda:	60a0      	str	r0, [r4, #8]
 8005bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005be0:	f7fd fc08 	bl	80033f4 <memset>
 8005be4:	4620      	mov	r0, r4
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <__sfp_lock_acquire>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__sfp_lock_acquire+0x8>)
 8005bea:	f000 b8b3 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005bee:	bf00      	nop
 8005bf0:	200002f4 	.word	0x200002f4

08005bf4 <__sfp_lock_release>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_release+0x8>)
 8005bf6:	f000 b8ae 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	200002f4 	.word	0x200002f4

08005c00 <__sinit_lock_acquire>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sinit_lock_acquire+0x8>)
 8005c02:	f000 b8a7 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	200002ef 	.word	0x200002ef

08005c0c <__sinit_lock_release>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__sinit_lock_release+0x8>)
 8005c0e:	f000 b8a2 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	200002ef 	.word	0x200002ef

08005c18 <__sinit>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7ff fff0 	bl	8005c00 <__sinit_lock_acquire>
 8005c20:	69a3      	ldr	r3, [r4, #24]
 8005c22:	b11b      	cbz	r3, 8005c2c <__sinit+0x14>
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f7ff bff0 	b.w	8005c0c <__sinit_lock_release>
 8005c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c30:	6523      	str	r3, [r4, #80]	; 0x50
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <__sinit+0x68>)
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <__sinit+0x6c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	bf04      	itt	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	61a3      	streq	r3, [r4, #24]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f820 	bl	8005c88 <__sfp>
 8005c48:	6060      	str	r0, [r4, #4]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f81c 	bl	8005c88 <__sfp>
 8005c50:	60a0      	str	r0, [r4, #8]
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 f818 	bl	8005c88 <__sfp>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	60e0      	str	r0, [r4, #12]
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	6860      	ldr	r0, [r4, #4]
 8005c60:	f7ff ff82 	bl	8005b68 <std>
 8005c64:	68a0      	ldr	r0, [r4, #8]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2109      	movs	r1, #9
 8005c6a:	f7ff ff7d 	bl	8005b68 <std>
 8005c6e:	68e0      	ldr	r0, [r4, #12]
 8005c70:	2202      	movs	r2, #2
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff ff78 	bl	8005b68 <std>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61a3      	str	r3, [r4, #24]
 8005c7c:	e7d2      	b.n	8005c24 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	0800611c 	.word	0x0800611c
 8005c84:	08005bb1 	.word	0x08005bb1

08005c88 <__sfp>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	f7ff ffac 	bl	8005be8 <__sfp_lock_acquire>
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <__sfp+0x84>)
 8005c92:	681e      	ldr	r6, [r3, #0]
 8005c94:	69b3      	ldr	r3, [r6, #24]
 8005c96:	b913      	cbnz	r3, 8005c9e <__sfp+0x16>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ffbd 	bl	8005c18 <__sinit>
 8005c9e:	3648      	adds	r6, #72	; 0x48
 8005ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	d503      	bpl.n	8005cb0 <__sfp+0x28>
 8005ca8:	6833      	ldr	r3, [r6, #0]
 8005caa:	b30b      	cbz	r3, 8005cf0 <__sfp+0x68>
 8005cac:	6836      	ldr	r6, [r6, #0]
 8005cae:	e7f7      	b.n	8005ca0 <__sfp+0x18>
 8005cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb4:	b9d5      	cbnz	r5, 8005cec <__sfp+0x64>
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <__sfp+0x88>)
 8005cb8:	60e3      	str	r3, [r4, #12]
 8005cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8005cc0:	f000 f847 	bl	8005d52 <__retarget_lock_init_recursive>
 8005cc4:	f7ff ff96 	bl	8005bf4 <__sfp_lock_release>
 8005cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cd0:	6025      	str	r5, [r4, #0]
 8005cd2:	61a5      	str	r5, [r4, #24]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cdc:	f7fd fb8a 	bl	80033f4 <memset>
 8005ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce8:	4620      	mov	r0, r4
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	3468      	adds	r4, #104	; 0x68
 8005cee:	e7d9      	b.n	8005ca4 <__sfp+0x1c>
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ff62 	bl	8005bbc <__sfmoreglue>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	6030      	str	r0, [r6, #0]
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d1d5      	bne.n	8005cac <__sfp+0x24>
 8005d00:	f7ff ff78 	bl	8005bf4 <__sfp_lock_release>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	e7ee      	b.n	8005ce8 <__sfp+0x60>
 8005d0a:	bf00      	nop
 8005d0c:	0800611c 	.word	0x0800611c
 8005d10:	ffff0001 	.word	0xffff0001

08005d14 <_fwalk_reent>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4606      	mov	r6, r0
 8005d1a:	4688      	mov	r8, r1
 8005d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d20:	2700      	movs	r7, #0
 8005d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d26:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2a:	d505      	bpl.n	8005d38 <_fwalk_reent+0x24>
 8005d2c:	6824      	ldr	r4, [r4, #0]
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d1f7      	bne.n	8005d22 <_fwalk_reent+0xe>
 8005d32:	4638      	mov	r0, r7
 8005d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d907      	bls.n	8005d4e <_fwalk_reent+0x3a>
 8005d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d42:	3301      	adds	r3, #1
 8005d44:	d003      	beq.n	8005d4e <_fwalk_reent+0x3a>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4630      	mov	r0, r6
 8005d4a:	47c0      	blx	r8
 8005d4c:	4307      	orrs	r7, r0
 8005d4e:	3568      	adds	r5, #104	; 0x68
 8005d50:	e7e9      	b.n	8005d26 <_fwalk_reent+0x12>

08005d52 <__retarget_lock_init_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <__swhatbuf_r>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	460e      	mov	r6, r1
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	2900      	cmp	r1, #0
 8005d62:	b096      	sub	sp, #88	; 0x58
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	da07      	bge.n	8005d7a <__swhatbuf_r+0x22>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	89b3      	ldrh	r3, [r6, #12]
 8005d70:	061a      	lsls	r2, r3, #24
 8005d72:	d410      	bmi.n	8005d96 <__swhatbuf_r+0x3e>
 8005d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d78:	e00e      	b.n	8005d98 <__swhatbuf_r+0x40>
 8005d7a:	466a      	mov	r2, sp
 8005d7c:	f000 f902 	bl	8005f84 <_fstat_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	dbf2      	blt.n	8005d6a <__swhatbuf_r+0x12>
 8005d84:	9a01      	ldr	r2, [sp, #4]
 8005d86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d8e:	425a      	negs	r2, r3
 8005d90:	415a      	adcs	r2, r3
 8005d92:	602a      	str	r2, [r5, #0]
 8005d94:	e7ee      	b.n	8005d74 <__swhatbuf_r+0x1c>
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	2000      	movs	r0, #0
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	b016      	add	sp, #88	; 0x58
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}

08005da0 <__smakebuf_r>:
 8005da0:	898b      	ldrh	r3, [r1, #12]
 8005da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005da4:	079d      	lsls	r5, r3, #30
 8005da6:	4606      	mov	r6, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	d507      	bpl.n	8005dbc <__smakebuf_r+0x1c>
 8005dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	2301      	movs	r3, #1
 8005db6:	6163      	str	r3, [r4, #20]
 8005db8:	b002      	add	sp, #8
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	ab01      	add	r3, sp, #4
 8005dbe:	466a      	mov	r2, sp
 8005dc0:	f7ff ffca 	bl	8005d58 <__swhatbuf_r>
 8005dc4:	9900      	ldr	r1, [sp, #0]
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7ff f987 	bl	80050dc <_malloc_r>
 8005dce:	b948      	cbnz	r0, 8005de4 <__smakebuf_r+0x44>
 8005dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd4:	059a      	lsls	r2, r3, #22
 8005dd6:	d4ef      	bmi.n	8005db8 <__smakebuf_r+0x18>
 8005dd8:	f023 0303 	bic.w	r3, r3, #3
 8005ddc:	f043 0302 	orr.w	r3, r3, #2
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	e7e3      	b.n	8005dac <__smakebuf_r+0xc>
 8005de4:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <__smakebuf_r+0x7c>)
 8005de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	6020      	str	r0, [r4, #0]
 8005dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	9b00      	ldr	r3, [sp, #0]
 8005df4:	6163      	str	r3, [r4, #20]
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	6120      	str	r0, [r4, #16]
 8005dfa:	b15b      	cbz	r3, 8005e14 <__smakebuf_r+0x74>
 8005dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f8d1 	bl	8005fa8 <_isatty_r>
 8005e06:	b128      	cbz	r0, 8005e14 <__smakebuf_r+0x74>
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	f023 0303 	bic.w	r3, r3, #3
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	89a0      	ldrh	r0, [r4, #12]
 8005e16:	4305      	orrs	r5, r0
 8005e18:	81a5      	strh	r5, [r4, #12]
 8005e1a:	e7cd      	b.n	8005db8 <__smakebuf_r+0x18>
 8005e1c:	08005bb1 	.word	0x08005bb1

08005e20 <_malloc_usable_size_r>:
 8005e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e24:	1f18      	subs	r0, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfbc      	itt	lt
 8005e2a:	580b      	ldrlt	r3, [r1, r0]
 8005e2c:	18c0      	addlt	r0, r0, r3
 8005e2e:	4770      	bx	lr

08005e30 <_raise_r>:
 8005e30:	291f      	cmp	r1, #31
 8005e32:	b538      	push	{r3, r4, r5, lr}
 8005e34:	4604      	mov	r4, r0
 8005e36:	460d      	mov	r5, r1
 8005e38:	d904      	bls.n	8005e44 <_raise_r+0x14>
 8005e3a:	2316      	movs	r3, #22
 8005e3c:	6003      	str	r3, [r0, #0]
 8005e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e46:	b112      	cbz	r2, 8005e4e <_raise_r+0x1e>
 8005e48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e4c:	b94b      	cbnz	r3, 8005e62 <_raise_r+0x32>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 f830 	bl	8005eb4 <_getpid_r>
 8005e54:	462a      	mov	r2, r5
 8005e56:	4601      	mov	r1, r0
 8005e58:	4620      	mov	r0, r4
 8005e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e5e:	f000 b817 	b.w	8005e90 <_kill_r>
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d00a      	beq.n	8005e7c <_raise_r+0x4c>
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	d103      	bne.n	8005e72 <_raise_r+0x42>
 8005e6a:	2316      	movs	r3, #22
 8005e6c:	6003      	str	r3, [r0, #0]
 8005e6e:	2001      	movs	r0, #1
 8005e70:	e7e7      	b.n	8005e42 <_raise_r+0x12>
 8005e72:	2400      	movs	r4, #0
 8005e74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e78:	4628      	mov	r0, r5
 8005e7a:	4798      	blx	r3
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e7e0      	b.n	8005e42 <_raise_r+0x12>

08005e80 <raise>:
 8005e80:	4b02      	ldr	r3, [pc, #8]	; (8005e8c <raise+0xc>)
 8005e82:	4601      	mov	r1, r0
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	f7ff bfd3 	b.w	8005e30 <_raise_r>
 8005e8a:	bf00      	nop
 8005e8c:	2000001c 	.word	0x2000001c

08005e90 <_kill_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d07      	ldr	r5, [pc, #28]	; (8005eb0 <_kill_r+0x20>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	f000 f8d7 	bl	8006050 <_kill>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	d102      	bne.n	8005eac <_kill_r+0x1c>
 8005ea6:	682b      	ldr	r3, [r5, #0]
 8005ea8:	b103      	cbz	r3, 8005eac <_kill_r+0x1c>
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	bd38      	pop	{r3, r4, r5, pc}
 8005eae:	bf00      	nop
 8005eb0:	200002e8 	.word	0x200002e8

08005eb4 <_getpid_r>:
 8005eb4:	f000 b8bc 	b.w	8006030 <_getpid>

08005eb8 <__sread>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	460c      	mov	r4, r1
 8005ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec0:	f000 f894 	bl	8005fec <_read_r>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	bfab      	itete	ge
 8005ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005eca:	89a3      	ldrhlt	r3, [r4, #12]
 8005ecc:	181b      	addge	r3, r3, r0
 8005ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ed2:	bfac      	ite	ge
 8005ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ed6:	81a3      	strhlt	r3, [r4, #12]
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__swrite>:
 8005eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	461f      	mov	r7, r3
 8005ee0:	898b      	ldrh	r3, [r1, #12]
 8005ee2:	05db      	lsls	r3, r3, #23
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4616      	mov	r6, r2
 8005eea:	d505      	bpl.n	8005ef8 <__swrite+0x1e>
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f000 f868 	bl	8005fc8 <_lseek_r>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	f000 b817 	b.w	8005f40 <_write_r>

08005f12 <__sseek>:
 8005f12:	b510      	push	{r4, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1a:	f000 f855 	bl	8005fc8 <_lseek_r>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	bf15      	itete	ne
 8005f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f2e:	81a3      	strheq	r3, [r4, #12]
 8005f30:	bf18      	it	ne
 8005f32:	81a3      	strhne	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__sclose>:
 8005f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3a:	f000 b813 	b.w	8005f64 <_close_r>
	...

08005f40 <_write_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	; (8005f60 <_write_r+0x20>)
 8005f44:	4604      	mov	r4, r0
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f8a4 	bl	800609c <_write>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_write_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_write_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	200002e8 	.word	0x200002e8

08005f64 <_close_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d06      	ldr	r5, [pc, #24]	; (8005f80 <_close_r+0x1c>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	f000 f84e 	bl	8006010 <_close>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_close_r+0x1a>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_close_r+0x1a>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	200002e8 	.word	0x200002e8

08005f84 <_fstat_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	; (8005fa4 <_fstat_r+0x20>)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	f000 f845 	bl	8006020 <_fstat>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d102      	bne.n	8005fa0 <_fstat_r+0x1c>
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	b103      	cbz	r3, 8005fa0 <_fstat_r+0x1c>
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200002e8 	.word	0x200002e8

08005fa8 <_isatty_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d06      	ldr	r5, [pc, #24]	; (8005fc4 <_isatty_r+0x1c>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f000 f844 	bl	8006040 <_isatty>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_isatty_r+0x1a>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_isatty_r+0x1a>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	200002e8 	.word	0x200002e8

08005fc8 <_lseek_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	; (8005fe8 <_lseek_r+0x20>)
 8005fcc:	4604      	mov	r4, r0
 8005fce:	4608      	mov	r0, r1
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 f842 	bl	8006060 <_lseek>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_lseek_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_lseek_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	200002e8 	.word	0x200002e8

08005fec <_read_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	; (800600c <_read_r+0x20>)
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	602a      	str	r2, [r5, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 f838 	bl	8006070 <_read>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_read_r+0x1e>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_read_r+0x1e>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	200002e8 	.word	0x200002e8

08006010 <_close>:
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <_close+0xc>)
 8006012:	2258      	movs	r2, #88	; 0x58
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	4770      	bx	lr
 800601c:	200002e8 	.word	0x200002e8

08006020 <_fstat>:
 8006020:	4b02      	ldr	r3, [pc, #8]	; (800602c <_fstat+0xc>)
 8006022:	2258      	movs	r2, #88	; 0x58
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	f04f 30ff 	mov.w	r0, #4294967295
 800602a:	4770      	bx	lr
 800602c:	200002e8 	.word	0x200002e8

08006030 <_getpid>:
 8006030:	4b02      	ldr	r3, [pc, #8]	; (800603c <_getpid+0xc>)
 8006032:	2258      	movs	r2, #88	; 0x58
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	f04f 30ff 	mov.w	r0, #4294967295
 800603a:	4770      	bx	lr
 800603c:	200002e8 	.word	0x200002e8

08006040 <_isatty>:
 8006040:	4b02      	ldr	r3, [pc, #8]	; (800604c <_isatty+0xc>)
 8006042:	2258      	movs	r2, #88	; 0x58
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	2000      	movs	r0, #0
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200002e8 	.word	0x200002e8

08006050 <_kill>:
 8006050:	4b02      	ldr	r3, [pc, #8]	; (800605c <_kill+0xc>)
 8006052:	2258      	movs	r2, #88	; 0x58
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	4770      	bx	lr
 800605c:	200002e8 	.word	0x200002e8

08006060 <_lseek>:
 8006060:	4b02      	ldr	r3, [pc, #8]	; (800606c <_lseek+0xc>)
 8006062:	2258      	movs	r2, #88	; 0x58
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f04f 30ff 	mov.w	r0, #4294967295
 800606a:	4770      	bx	lr
 800606c:	200002e8 	.word	0x200002e8

08006070 <_read>:
 8006070:	4b02      	ldr	r3, [pc, #8]	; (800607c <_read+0xc>)
 8006072:	2258      	movs	r2, #88	; 0x58
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f04f 30ff 	mov.w	r0, #4294967295
 800607a:	4770      	bx	lr
 800607c:	200002e8 	.word	0x200002e8

08006080 <_sbrk>:
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <_sbrk+0x14>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	4602      	mov	r2, r0
 8006086:	b909      	cbnz	r1, 800608c <_sbrk+0xc>
 8006088:	4903      	ldr	r1, [pc, #12]	; (8006098 <_sbrk+0x18>)
 800608a:	6019      	str	r1, [r3, #0]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	4402      	add	r2, r0
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	4770      	bx	lr
 8006094:	200002e0 	.word	0x200002e0
 8006098:	200002f8 	.word	0x200002f8

0800609c <_write>:
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <_write+0xc>)
 800609e:	2258      	movs	r2, #88	; 0x58
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	4770      	bx	lr
 80060a8:	200002e8 	.word	0x200002e8

080060ac <_exit>:
 80060ac:	e7fe      	b.n	80060ac <_exit>
	...

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
