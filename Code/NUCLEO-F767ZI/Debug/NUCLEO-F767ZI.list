
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f48  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002148  08002148  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002150  08002150  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002164  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002164  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab59  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015f9  00000000  00000000  0002ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002c830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b80  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009620  00000000  00000000  000559d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d88  00000000  00000000  0005eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150d80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a28  00000000  00000000  00150dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002128 	.word	0x08002128

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002128 	.word	0x08002128

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000534:	f000 f936 	bl	80007a4 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 8000538:	f000 fa65 	bl	8000a06 <HAL_SYSTICK_IRQHandler>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <USART3_IRQHandler>:

/* This function handles USART3. */
extern "C" void USART3_IRQHandler( void )
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

	// Invoke callback if it exists.
	HAL_UART_IRQHandler(&huart3);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <USART3_IRQHandler+0x10>)
 8000546:	f000 fe0d 	bl	8001164 <HAL_UART_IRQHandler>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <main>:
static void UART3_Init( void );
static void Error_Handler( void );
static inline char convert_to_Upper(char c);

int main( void )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000558:	f000 f8e7 	bl	800072a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800055c:	f000 f803 	bl	8000566 <_ZL18SystemClock_Configv>

	/* Configure the UART for debug console */
	UART3_Init();
 8000560:	f000 f808 	bl	8000574 <_ZL10UART3_Initv>
	}

	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
#endif // USE_UART_EXAMPLE

	while(true)
 8000564:	e7fe      	b.n	8000564 <main+0x10>

08000566 <_ZL18SystemClock_Configv>:
}

#endif // USE_UART_EXAMPLE

static void SystemClock_Config( void )
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	/* UART High level initilization */
	huart3.Instance = USART3;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <_ZL10UART3_Initv+0x64>)
 800057c:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 8000580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000584:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart3) != HAL_OK)
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <_ZL10UART3_Initv+0x60>)
 80005b8:	f000 fd86 	bl	80010c8 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	bf14      	ite	ne
 80005c2:	2301      	movne	r3, #1
 80005c4:	2300      	moveq	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <_ZL10UART3_Initv+0x5c>
	{
		// Initialization Error.
		Error_Handler();
 80005cc:	f000 f806 	bl	80005dc <_ZL13Error_Handlerv>
	}
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40004800 	.word	0x40004800

080005dc <_ZL13Error_Handlerv>:
	return retVal;
}
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	for (;;);
 80005e0:	e7fe      	b.n	80005e0 <_ZL13Error_Handlerv+0x4>
	...

080005e4 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f9cb 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_MspInit+0x40>)
 80005f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f2:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <HAL_MspInit+0x40>)
 80005f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80005f8:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	f06f 0009 	mvn.w	r0, #9
 8000602:	f000 f9ca 	bl	800099a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	f06f 000a 	mvn.w	r0, #10
 800060e:	f000 f9c4 	bl	800099a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	f06f 000b 	mvn.w	r0, #11
 800061a:	f000 f9be 	bl	800099a <HAL_NVIC_SetPriority>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <HAL_UART_MspInit+0x84>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_UART_MspInit+0x84>)
 8000646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_UART_MspInit+0x84>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_UART_MspInit+0x84>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <HAL_UART_MspInit+0x84>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_UART_MspInit+0x84>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000674:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 800067a:	2301      	movs	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 8000682:	2307      	movs	r3, #7
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &USART3_gpio_config);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <HAL_UART_MspInit+0x88>)
 800068e:	f000 fa59 	bl	8000b44 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority(USART3_IRQn, 0x0F, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	2027      	movs	r0, #39	; 0x27
 8000698:	f000 f97f 	bl	800099a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 800069c:	2027      	movs	r0, #39	; 0x27
 800069e:	f000 f998 	bl	80009d2 <HAL_NVIC_EnableIRQ>
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemInit+0x20>)
 80006ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <SystemInit+0x20>)
 80006c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006de:	490e      	ldr	r1, [pc, #56]	; (8000718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006f4:	4c0b      	ldr	r4, [pc, #44]	; (8000724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000702:	f7ff ffd7 	bl	80006b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f001 fceb 	bl	80020e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070a:	f7ff ff23 	bl	8000554 <main>
  bx  lr    
 800070e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000710:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	08002158 	.word	0x08002158
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	200000b0 	.word	0x200000b0

08000728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC_IRQHandler>

0800072a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072e:	2003      	movs	r0, #3
 8000730:	f000 f928 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f805 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073a:	f7ff ff53 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	bd80      	pop	{r7, pc}

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f943 	bl	80009ee <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f90b 	bl	800099a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	200000ac 	.word	0x200000ac

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200000ac 	.word	0x200000ac

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <__NVIC_SetPriorityGrouping+0x40>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	4313      	orrs	r3, r2
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x40>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	05fa0000 	.word	0x05fa0000

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4907      	ldr	r1, [pc, #28]	; (8000880 <__NVIC_EnableIRQ+0x38>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	; 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000950:	d301      	bcc.n	8000956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e00f      	b.n	8000976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <SysTick_Config+0x40>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	210f      	movs	r1, #15
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff ff8e 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SysTick_Config+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SysTick_Config+0x40>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff29 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ac:	f7ff ff3e 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	6978      	ldr	r0, [r7, #20]
 80009b8:	f7ff ff8e 	bl	80008d8 <NVIC_EncodePriority>
 80009bc:	4602      	mov	r2, r0
 80009be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <__NVIC_SetPriority>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff31 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffa2 	bl	8000940 <SysTick_Config>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a0a:	f000 f802 	bl	8000a12 <HAL_SYSTICK_Callback>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000a2e:	f7ff fecd 	bl	80007cc <HAL_GetTick>
 8000a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d008      	beq.n	8000a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e052      	b.n	8000af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0216 	bic.w	r2, r2, #22
 8000a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <HAL_DMA_Abort+0x62>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d007      	beq.n	8000a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f022 0208 	bic.w	r2, r2, #8
 8000a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0201 	bic.w	r2, r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000aa2:	e013      	b.n	8000acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000aa4:	f7ff fe92 	bl	80007cc <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b05      	cmp	r3, #5
 8000ab0:	d90c      	bls.n	8000acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2203      	movs	r2, #3
 8000abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	e015      	b.n	8000af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1e4      	bne.n	8000aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ade:	223f      	movs	r2, #63	; 0x3f
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d004      	beq.n	8000b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00c      	b.n	8000b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2205      	movs	r2, #5
 8000b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0201 	bic.w	r2, r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e175      	b.n	8000e50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b64:	2201      	movs	r2, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8164 	bne.w	8000e4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d005      	beq.n	8000b9a <HAL_GPIO_Init+0x56>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d130      	bne.n	8000bfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	091b      	lsrs	r3, r3, #4
 8000be6:	f003 0201 	and.w	r2, r3, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d017      	beq.n	8000c38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d123      	bne.n	8000c8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3208      	adds	r2, #8
 8000c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	69b9      	ldr	r1, [r7, #24]
 8000c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0203 	and.w	r2, r3, #3
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80be 	beq.w	8000e4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b66      	ldr	r3, [pc, #408]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a65      	ldr	r2, [pc, #404]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ce6:	4a61      	ldr	r2, [pc, #388]	; (8000e6c <HAL_GPIO_Init+0x328>)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a58      	ldr	r2, [pc, #352]	; (8000e70 <HAL_GPIO_Init+0x32c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d037      	beq.n	8000d82 <HAL_GPIO_Init+0x23e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a57      	ldr	r2, [pc, #348]	; (8000e74 <HAL_GPIO_Init+0x330>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d031      	beq.n	8000d7e <HAL_GPIO_Init+0x23a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a56      	ldr	r2, [pc, #344]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d02b      	beq.n	8000d7a <HAL_GPIO_Init+0x236>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a55      	ldr	r2, [pc, #340]	; (8000e7c <HAL_GPIO_Init+0x338>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d025      	beq.n	8000d76 <HAL_GPIO_Init+0x232>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a54      	ldr	r2, [pc, #336]	; (8000e80 <HAL_GPIO_Init+0x33c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d01f      	beq.n	8000d72 <HAL_GPIO_Init+0x22e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a53      	ldr	r2, [pc, #332]	; (8000e84 <HAL_GPIO_Init+0x340>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d019      	beq.n	8000d6e <HAL_GPIO_Init+0x22a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a52      	ldr	r2, [pc, #328]	; (8000e88 <HAL_GPIO_Init+0x344>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <HAL_GPIO_Init+0x348>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00d      	beq.n	8000d66 <HAL_GPIO_Init+0x222>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a50      	ldr	r2, [pc, #320]	; (8000e90 <HAL_GPIO_Init+0x34c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x21e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4f      	ldr	r2, [pc, #316]	; (8000e94 <HAL_GPIO_Init+0x350>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_GPIO_Init+0x21a>
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	e012      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d5e:	230a      	movs	r3, #10
 8000d60:	e010      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d62:	2308      	movs	r3, #8
 8000d64:	e00e      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e00c      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	e00a      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d6e:	2305      	movs	r3, #5
 8000d70:	e008      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d76:	2303      	movs	r3, #3
 8000d78:	e004      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x240>
 8000d82:	2300      	movs	r3, #0
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	f002 0203 	and.w	r2, r2, #3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4093      	lsls	r3, r2
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d94:	4935      	ldr	r1, [pc, #212]	; (8000e6c <HAL_GPIO_Init+0x328>)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_GPIO_Init+0x354>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b0f      	cmp	r3, #15
 8000e54:	f67f ae86 	bls.w	8000b64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40013800 	.word	0x40013800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020400 	.word	0x40020400
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40021400 	.word	0x40021400
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	40021c00 	.word	0x40021c00
 8000e90:	40022000 	.word	0x40022000
 8000e94:	40022400 	.word	0x40022400
 8000e98:	40013c00 	.word	0x40013c00

08000e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eb4:	4b67      	ldr	r3, [pc, #412]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d00d      	beq.n	8000edc <HAL_RCC_GetSysClockFreq+0x40>
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	f200 80bd 	bhi.w	8001040 <HAL_RCC_GetSysClockFreq+0x1a4>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d003      	beq.n	8000ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8000ece:	e0b7      	b.n	8001040 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ed0:	4b61      	ldr	r3, [pc, #388]	; (8001058 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8000ed2:	60bb      	str	r3, [r7, #8]
      break;
 8000ed4:	e0b7      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000ed6:	4b61      	ldr	r3, [pc, #388]	; (800105c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8000ed8:	60bb      	str	r3, [r7, #8]
      break;
 8000eda:	e0b4      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000edc:	4b5d      	ldr	r3, [pc, #372]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ee4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d04d      	beq.n	8000f8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef2:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	099b      	lsrs	r3, r3, #6
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f02:	f04f 0100 	mov.w	r1, #0
 8000f06:	ea02 0800 	and.w	r8, r2, r0
 8000f0a:	ea03 0901 	and.w	r9, r3, r1
 8000f0e:	4640      	mov	r0, r8
 8000f10:	4649      	mov	r1, r9
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	014b      	lsls	r3, r1, #5
 8000f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f20:	0142      	lsls	r2, r0, #5
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	ebb0 0008 	subs.w	r0, r0, r8
 8000f2a:	eb61 0109 	sbc.w	r1, r1, r9
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	018b      	lsls	r3, r1, #6
 8000f38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000f3c:	0182      	lsls	r2, r0, #6
 8000f3e:	1a12      	subs	r2, r2, r0
 8000f40:	eb63 0301 	sbc.w	r3, r3, r1
 8000f44:	f04f 0000 	mov.w	r0, #0
 8000f48:	f04f 0100 	mov.w	r1, #0
 8000f4c:	00d9      	lsls	r1, r3, #3
 8000f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000f52:	00d0      	lsls	r0, r2, #3
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	eb12 0208 	adds.w	r2, r2, r8
 8000f5c:	eb43 0309 	adc.w	r3, r3, r9
 8000f60:	f04f 0000 	mov.w	r0, #0
 8000f64:	f04f 0100 	mov.w	r1, #0
 8000f68:	0259      	lsls	r1, r3, #9
 8000f6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8000f6e:	0250      	lsls	r0, r2, #9
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	f7ff f95a 	bl	8000238 <__aeabi_uldivmod>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4613      	mov	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e04a      	b.n	8001024 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	099b      	lsrs	r3, r3, #6
 8000f94:	461a      	mov	r2, r3
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f9e:	f04f 0100 	mov.w	r1, #0
 8000fa2:	ea02 0400 	and.w	r4, r2, r0
 8000fa6:	ea03 0501 	and.w	r5, r3, r1
 8000faa:	4620      	mov	r0, r4
 8000fac:	4629      	mov	r1, r5
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	014b      	lsls	r3, r1, #5
 8000fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fbc:	0142      	lsls	r2, r0, #5
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	1b00      	subs	r0, r0, r4
 8000fc4:	eb61 0105 	sbc.w	r1, r1, r5
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	018b      	lsls	r3, r1, #6
 8000fd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000fd6:	0182      	lsls	r2, r0, #6
 8000fd8:	1a12      	subs	r2, r2, r0
 8000fda:	eb63 0301 	sbc.w	r3, r3, r1
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	f04f 0100 	mov.w	r1, #0
 8000fe6:	00d9      	lsls	r1, r3, #3
 8000fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000fec:	00d0      	lsls	r0, r2, #3
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	1912      	adds	r2, r2, r4
 8000ff4:	eb45 0303 	adc.w	r3, r5, r3
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	f04f 0100 	mov.w	r1, #0
 8001000:	0299      	lsls	r1, r3, #10
 8001002:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001006:	0290      	lsls	r0, r2, #10
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	461a      	mov	r2, r3
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	f7ff f90e 	bl	8000238 <__aeabi_uldivmod>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4613      	mov	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	3301      	adds	r3, #1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	fbb2 f3f3 	udiv	r3, r2, r3
 800103c:	60bb      	str	r3, [r7, #8]
      break;
 800103e:	e002      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001042:	60bb      	str	r3, [r7, #8]
      break;
 8001044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001046:	68bb      	ldr	r3, [r7, #8]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	00f42400 	.word	0x00f42400
 800105c:	007a1200 	.word	0x007a1200

08001060 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_RCC_GetHCLKFreq+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000

08001078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800107c:	f7ff fff0 	bl	8001060 <HAL_RCC_GetHCLKFreq>
 8001080:	4602      	mov	r2, r0
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0a9b      	lsrs	r3, r3, #10
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	4903      	ldr	r1, [pc, #12]	; (800109c <HAL_RCC_GetPCLK1Freq+0x24>)
 800108e:	5ccb      	ldrb	r3, [r1, r3]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	08002140 	.word	0x08002140

080010a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010a4:	f7ff ffdc 	bl	8001060 <HAL_RCC_GetHCLKFreq>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	0b5b      	lsrs	r3, r3, #13
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	4903      	ldr	r1, [pc, #12]	; (80010c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010b6:	5ccb      	ldrb	r3, [r1, r3]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	08002140 	.word	0x08002140

080010c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e040      	b.n	800115c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fa9c 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fb36 	bl	8001778 <UART_SetConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e022      	b.n	800115c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fd8c 	bl	8001c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 fe13 	bl	8001d80 <UART_CheckIdleState>
 800115a:	4603      	mov	r3, r0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0ba      	sub	sp, #232	; 0xe8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800118a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800118e:	f640 030f 	movw	r3, #2063	; 0x80f
 8001192:	4013      	ands	r3, r2
 8001194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8001198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800119c:	2b00      	cmp	r3, #0
 800119e:	d115      	bne.n	80011cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80011a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00f      	beq.n	80011cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80011ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 82a4 	beq.w	800170a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	4798      	blx	r3
      }
      return;
 80011ca:	e29e      	b.n	800170a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80011cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8117 	beq.w	8001404 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80011d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d106      	bne.n	80011f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80011e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <HAL_UART_IRQHandler+0x298>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 810a 	beq.w	8001404 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80011f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d011      	beq.n	8001220 <HAL_UART_IRQHandler+0xbc>
 80011fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00b      	beq.n	8001220 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d011      	beq.n	8001250 <HAL_UART_IRQHandler+0xec>
 800122c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00b      	beq.n	8001250 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2202      	movs	r2, #2
 800123e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001246:	f043 0204 	orr.w	r2, r3, #4
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d011      	beq.n	8001280 <HAL_UART_IRQHandler+0x11c>
 800125c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2204      	movs	r2, #4
 800126e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001276:	f043 0202 	orr.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d017      	beq.n	80012bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800128c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800129c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2208      	movs	r2, #8
 80012aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	f043 0208 	orr.w	r2, r3, #8
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80012bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d012      	beq.n	80012ee <HAL_UART_IRQHandler+0x18a>
 80012c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 820a 	beq.w	800170e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80012fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00d      	beq.n	8001322 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	2b40      	cmp	r3, #64	; 0x40
 8001338:	d005      	beq.n	8001346 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800133a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800133e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001342:	2b00      	cmp	r3, #0
 8001344:	d04f      	beq.n	80013e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fe27 	bl	8001f9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d141      	bne.n	80013de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3308      	adds	r3, #8
 8001360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001368:	e853 3f00 	ldrex	r3, [r3]
 800136c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3308      	adds	r3, #8
 8001382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800138e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001396:	e841 2300 	strex	r3, r2, [r1]
 800139a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800139e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1d9      	bne.n	800135a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d013      	beq.n	80013d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <HAL_UART_IRQHandler+0x29c>)
 80013b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fba0 	bl	8000b00 <HAL_DMA_Abort_IT>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d017      	beq.n	80013f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80013d0:	4610      	mov	r0, r2
 80013d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013d4:	e00f      	b.n	80013f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f9ae 	bl	8001738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013dc:	e00b      	b.n	80013f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f9aa 	bl	8001738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013e4:	e007      	b.n	80013f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f9a6 	bl	8001738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80013f4:	e18b      	b.n	800170e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013f6:	bf00      	nop
    return;
 80013f8:	e189      	b.n	800170e <HAL_UART_IRQHandler+0x5aa>
 80013fa:	bf00      	nop
 80013fc:	04000120 	.word	0x04000120
 8001400:	08002061 	.word	0x08002061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001408:	2b01      	cmp	r3, #1
 800140a:	f040 8144 	bne.w	8001696 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800140e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 813d 	beq.w	8001696 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800141c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8136 	beq.w	8001696 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2210      	movs	r2, #16
 8001430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143c:	2b40      	cmp	r3, #64	; 0x40
 800143e:	f040 80b2 	bne.w	80015a6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800144e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 815d 	beq.w	8001712 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800145e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001462:	429a      	cmp	r2, r3
 8001464:	f080 8155 	bcs.w	8001712 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800146e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800147c:	f000 8085 	beq.w	800158a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800148c:	e853 3f00 	ldrex	r3, [r3]
 8001490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80014b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014ba:	e841 2300 	strex	r3, r2, [r1]
 80014be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80014c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1da      	bne.n	8001480 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3308      	adds	r3, #8
 80014d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014d4:	e853 3f00 	ldrex	r3, [r3]
 80014d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80014da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3308      	adds	r3, #8
 80014ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80014f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80014f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80014fa:	e841 2300 	strex	r3, r2, [r1]
 80014fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e1      	bne.n	80014ca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3308      	adds	r3, #8
 800150c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800150e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001510:	e853 3f00 	ldrex	r3, [r3]
 8001514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800151c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3308      	adds	r3, #8
 8001526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800152a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800152c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800152e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001532:	e841 2300 	strex	r3, r2, [r1]
 8001536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e3      	bne.n	8001506 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001552:	e853 3f00 	ldrex	r3, [r3]
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800155a:	f023 0310 	bic.w	r3, r3, #16
 800155e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800156c:	65bb      	str	r3, [r7, #88]	; 0x58
 800156e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001574:	e841 2300 	strex	r3, r2, [r1]
 8001578:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800157a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e4      	bne.n	800154a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fa4b 	bl	8000a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001596:	b29b      	uxth	r3, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8d4 	bl	800174c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80015a4:	e0b5      	b.n	8001712 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a7 	beq.w	8001716 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80015c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a2 	beq.w	8001716 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015da:	e853 3f00 	ldrex	r3, [r3]
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015f4:	647b      	str	r3, [r7, #68]	; 0x44
 80015f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015fc:	e841 2300 	strex	r3, r2, [r1]
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e4      	bne.n	80015d2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3308      	adds	r3, #8
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	e853 3f00 	ldrex	r3, [r3]
 8001616:	623b      	str	r3, [r7, #32]
   return(result);
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3308      	adds	r3, #8
 8001628:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800162c:	633a      	str	r2, [r7, #48]	; 0x30
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001634:	e841 2300 	strex	r3, r2, [r1]
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1e3      	bne.n	8001608 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	e853 3f00 	ldrex	r3, [r3]
 800165e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f023 0310 	bic.w	r3, r3, #16
 8001666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001678:	69b9      	ldr	r1, [r7, #24]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	e841 2300 	strex	r3, r2, [r1]
 8001680:	617b      	str	r3, [r7, #20]
   return(result);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e4      	bne.n	8001652 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f85c 	bl	800174c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001694:	e03f      	b.n	8001716 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00e      	beq.n	80016c0 <HAL_UART_IRQHandler+0x55c>
 80016a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f853 	bl	8001764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80016be:	e02d      	b.n	800171c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80016c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00e      	beq.n	80016ea <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80016cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01c      	beq.n	800171a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
    }
    return;
 80016e8:	e017      	b.n	800171a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80016ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d012      	beq.n	800171c <HAL_UART_IRQHandler+0x5b8>
 80016f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00c      	beq.n	800171c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fcc2 	bl	800208c <UART_EndTransmit_IT>
    return;
 8001708:	e008      	b.n	800171c <HAL_UART_IRQHandler+0x5b8>
      return;
 800170a:	bf00      	nop
 800170c:	e006      	b.n	800171c <HAL_UART_IRQHandler+0x5b8>
    return;
 800170e:	bf00      	nop
 8001710:	e004      	b.n	800171c <HAL_UART_IRQHandler+0x5b8>
      return;
 8001712:	bf00      	nop
 8001714:	e002      	b.n	800171c <HAL_UART_IRQHandler+0x5b8>
      return;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <HAL_UART_IRQHandler+0x5b8>
    return;
 800171a:	bf00      	nop
  }

}
 800171c:	37e8      	adds	r7, #232	; 0xe8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop

08001724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4ba7      	ldr	r3, [pc, #668]	; (8001a40 <UART_SetConfig+0x2c8>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a95      	ldr	r2, [pc, #596]	; (8001a44 <UART_SetConfig+0x2cc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d120      	bne.n	8001836 <UART_SetConfig+0xbe>
 80017f4:	4b94      	ldr	r3, [pc, #592]	; (8001a48 <UART_SetConfig+0x2d0>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d816      	bhi.n	8001830 <UART_SetConfig+0xb8>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <UART_SetConfig+0x90>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001819 	.word	0x08001819
 800180c:	08001825 	.word	0x08001825
 8001810:	0800181f 	.word	0x0800181f
 8001814:	0800182b 	.word	0x0800182b
 8001818:	2301      	movs	r3, #1
 800181a:	77fb      	strb	r3, [r7, #31]
 800181c:	e14f      	b.n	8001abe <UART_SetConfig+0x346>
 800181e:	2302      	movs	r3, #2
 8001820:	77fb      	strb	r3, [r7, #31]
 8001822:	e14c      	b.n	8001abe <UART_SetConfig+0x346>
 8001824:	2304      	movs	r3, #4
 8001826:	77fb      	strb	r3, [r7, #31]
 8001828:	e149      	b.n	8001abe <UART_SetConfig+0x346>
 800182a:	2308      	movs	r3, #8
 800182c:	77fb      	strb	r3, [r7, #31]
 800182e:	e146      	b.n	8001abe <UART_SetConfig+0x346>
 8001830:	2310      	movs	r3, #16
 8001832:	77fb      	strb	r3, [r7, #31]
 8001834:	e143      	b.n	8001abe <UART_SetConfig+0x346>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a84      	ldr	r2, [pc, #528]	; (8001a4c <UART_SetConfig+0x2d4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d132      	bne.n	80018a6 <UART_SetConfig+0x12e>
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <UART_SetConfig+0x2d0>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d828      	bhi.n	80018a0 <UART_SetConfig+0x128>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <UART_SetConfig+0xdc>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001889 	.word	0x08001889
 8001858:	080018a1 	.word	0x080018a1
 800185c:	080018a1 	.word	0x080018a1
 8001860:	080018a1 	.word	0x080018a1
 8001864:	08001895 	.word	0x08001895
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018a1 	.word	0x080018a1
 8001870:	080018a1 	.word	0x080018a1
 8001874:	0800188f 	.word	0x0800188f
 8001878:	080018a1 	.word	0x080018a1
 800187c:	080018a1 	.word	0x080018a1
 8001880:	080018a1 	.word	0x080018a1
 8001884:	0800189b 	.word	0x0800189b
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
 800188c:	e117      	b.n	8001abe <UART_SetConfig+0x346>
 800188e:	2302      	movs	r3, #2
 8001890:	77fb      	strb	r3, [r7, #31]
 8001892:	e114      	b.n	8001abe <UART_SetConfig+0x346>
 8001894:	2304      	movs	r3, #4
 8001896:	77fb      	strb	r3, [r7, #31]
 8001898:	e111      	b.n	8001abe <UART_SetConfig+0x346>
 800189a:	2308      	movs	r3, #8
 800189c:	77fb      	strb	r3, [r7, #31]
 800189e:	e10e      	b.n	8001abe <UART_SetConfig+0x346>
 80018a0:	2310      	movs	r3, #16
 80018a2:	77fb      	strb	r3, [r7, #31]
 80018a4:	e10b      	b.n	8001abe <UART_SetConfig+0x346>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a69      	ldr	r2, [pc, #420]	; (8001a50 <UART_SetConfig+0x2d8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d120      	bne.n	80018f2 <UART_SetConfig+0x17a>
 80018b0:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <UART_SetConfig+0x2d0>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018ba:	2b30      	cmp	r3, #48	; 0x30
 80018bc:	d013      	beq.n	80018e6 <UART_SetConfig+0x16e>
 80018be:	2b30      	cmp	r3, #48	; 0x30
 80018c0:	d814      	bhi.n	80018ec <UART_SetConfig+0x174>
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d009      	beq.n	80018da <UART_SetConfig+0x162>
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	d810      	bhi.n	80018ec <UART_SetConfig+0x174>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <UART_SetConfig+0x15c>
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d006      	beq.n	80018e0 <UART_SetConfig+0x168>
 80018d2:	e00b      	b.n	80018ec <UART_SetConfig+0x174>
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
 80018d8:	e0f1      	b.n	8001abe <UART_SetConfig+0x346>
 80018da:	2302      	movs	r3, #2
 80018dc:	77fb      	strb	r3, [r7, #31]
 80018de:	e0ee      	b.n	8001abe <UART_SetConfig+0x346>
 80018e0:	2304      	movs	r3, #4
 80018e2:	77fb      	strb	r3, [r7, #31]
 80018e4:	e0eb      	b.n	8001abe <UART_SetConfig+0x346>
 80018e6:	2308      	movs	r3, #8
 80018e8:	77fb      	strb	r3, [r7, #31]
 80018ea:	e0e8      	b.n	8001abe <UART_SetConfig+0x346>
 80018ec:	2310      	movs	r3, #16
 80018ee:	77fb      	strb	r3, [r7, #31]
 80018f0:	e0e5      	b.n	8001abe <UART_SetConfig+0x346>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a57      	ldr	r2, [pc, #348]	; (8001a54 <UART_SetConfig+0x2dc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d120      	bne.n	800193e <UART_SetConfig+0x1c6>
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <UART_SetConfig+0x2d0>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001906:	2bc0      	cmp	r3, #192	; 0xc0
 8001908:	d013      	beq.n	8001932 <UART_SetConfig+0x1ba>
 800190a:	2bc0      	cmp	r3, #192	; 0xc0
 800190c:	d814      	bhi.n	8001938 <UART_SetConfig+0x1c0>
 800190e:	2b80      	cmp	r3, #128	; 0x80
 8001910:	d009      	beq.n	8001926 <UART_SetConfig+0x1ae>
 8001912:	2b80      	cmp	r3, #128	; 0x80
 8001914:	d810      	bhi.n	8001938 <UART_SetConfig+0x1c0>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <UART_SetConfig+0x1a8>
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d006      	beq.n	800192c <UART_SetConfig+0x1b4>
 800191e:	e00b      	b.n	8001938 <UART_SetConfig+0x1c0>
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
 8001924:	e0cb      	b.n	8001abe <UART_SetConfig+0x346>
 8001926:	2302      	movs	r3, #2
 8001928:	77fb      	strb	r3, [r7, #31]
 800192a:	e0c8      	b.n	8001abe <UART_SetConfig+0x346>
 800192c:	2304      	movs	r3, #4
 800192e:	77fb      	strb	r3, [r7, #31]
 8001930:	e0c5      	b.n	8001abe <UART_SetConfig+0x346>
 8001932:	2308      	movs	r3, #8
 8001934:	77fb      	strb	r3, [r7, #31]
 8001936:	e0c2      	b.n	8001abe <UART_SetConfig+0x346>
 8001938:	2310      	movs	r3, #16
 800193a:	77fb      	strb	r3, [r7, #31]
 800193c:	e0bf      	b.n	8001abe <UART_SetConfig+0x346>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a45      	ldr	r2, [pc, #276]	; (8001a58 <UART_SetConfig+0x2e0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d125      	bne.n	8001994 <UART_SetConfig+0x21c>
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <UART_SetConfig+0x2d0>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001956:	d017      	beq.n	8001988 <UART_SetConfig+0x210>
 8001958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800195c:	d817      	bhi.n	800198e <UART_SetConfig+0x216>
 800195e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001962:	d00b      	beq.n	800197c <UART_SetConfig+0x204>
 8001964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001968:	d811      	bhi.n	800198e <UART_SetConfig+0x216>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <UART_SetConfig+0x1fe>
 800196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001972:	d006      	beq.n	8001982 <UART_SetConfig+0x20a>
 8001974:	e00b      	b.n	800198e <UART_SetConfig+0x216>
 8001976:	2300      	movs	r3, #0
 8001978:	77fb      	strb	r3, [r7, #31]
 800197a:	e0a0      	b.n	8001abe <UART_SetConfig+0x346>
 800197c:	2302      	movs	r3, #2
 800197e:	77fb      	strb	r3, [r7, #31]
 8001980:	e09d      	b.n	8001abe <UART_SetConfig+0x346>
 8001982:	2304      	movs	r3, #4
 8001984:	77fb      	strb	r3, [r7, #31]
 8001986:	e09a      	b.n	8001abe <UART_SetConfig+0x346>
 8001988:	2308      	movs	r3, #8
 800198a:	77fb      	strb	r3, [r7, #31]
 800198c:	e097      	b.n	8001abe <UART_SetConfig+0x346>
 800198e:	2310      	movs	r3, #16
 8001990:	77fb      	strb	r3, [r7, #31]
 8001992:	e094      	b.n	8001abe <UART_SetConfig+0x346>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <UART_SetConfig+0x2e4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d125      	bne.n	80019ea <UART_SetConfig+0x272>
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <UART_SetConfig+0x2d0>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019ac:	d017      	beq.n	80019de <UART_SetConfig+0x266>
 80019ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019b2:	d817      	bhi.n	80019e4 <UART_SetConfig+0x26c>
 80019b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b8:	d00b      	beq.n	80019d2 <UART_SetConfig+0x25a>
 80019ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019be:	d811      	bhi.n	80019e4 <UART_SetConfig+0x26c>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <UART_SetConfig+0x254>
 80019c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c8:	d006      	beq.n	80019d8 <UART_SetConfig+0x260>
 80019ca:	e00b      	b.n	80019e4 <UART_SetConfig+0x26c>
 80019cc:	2301      	movs	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
 80019d0:	e075      	b.n	8001abe <UART_SetConfig+0x346>
 80019d2:	2302      	movs	r3, #2
 80019d4:	77fb      	strb	r3, [r7, #31]
 80019d6:	e072      	b.n	8001abe <UART_SetConfig+0x346>
 80019d8:	2304      	movs	r3, #4
 80019da:	77fb      	strb	r3, [r7, #31]
 80019dc:	e06f      	b.n	8001abe <UART_SetConfig+0x346>
 80019de:	2308      	movs	r3, #8
 80019e0:	77fb      	strb	r3, [r7, #31]
 80019e2:	e06c      	b.n	8001abe <UART_SetConfig+0x346>
 80019e4:	2310      	movs	r3, #16
 80019e6:	77fb      	strb	r3, [r7, #31]
 80019e8:	e069      	b.n	8001abe <UART_SetConfig+0x346>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <UART_SetConfig+0x2e8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d137      	bne.n	8001a64 <UART_SetConfig+0x2ec>
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <UART_SetConfig+0x2d0>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80019fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a02:	d017      	beq.n	8001a34 <UART_SetConfig+0x2bc>
 8001a04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a08:	d817      	bhi.n	8001a3a <UART_SetConfig+0x2c2>
 8001a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a0e:	d00b      	beq.n	8001a28 <UART_SetConfig+0x2b0>
 8001a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a14:	d811      	bhi.n	8001a3a <UART_SetConfig+0x2c2>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <UART_SetConfig+0x2aa>
 8001a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a1e:	d006      	beq.n	8001a2e <UART_SetConfig+0x2b6>
 8001a20:	e00b      	b.n	8001a3a <UART_SetConfig+0x2c2>
 8001a22:	2300      	movs	r3, #0
 8001a24:	77fb      	strb	r3, [r7, #31]
 8001a26:	e04a      	b.n	8001abe <UART_SetConfig+0x346>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	77fb      	strb	r3, [r7, #31]
 8001a2c:	e047      	b.n	8001abe <UART_SetConfig+0x346>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	77fb      	strb	r3, [r7, #31]
 8001a32:	e044      	b.n	8001abe <UART_SetConfig+0x346>
 8001a34:	2308      	movs	r3, #8
 8001a36:	77fb      	strb	r3, [r7, #31]
 8001a38:	e041      	b.n	8001abe <UART_SetConfig+0x346>
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	77fb      	strb	r3, [r7, #31]
 8001a3e:	e03e      	b.n	8001abe <UART_SetConfig+0x346>
 8001a40:	efff69f3 	.word	0xefff69f3
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40004800 	.word	0x40004800
 8001a54:	40004c00 	.word	0x40004c00
 8001a58:	40005000 	.word	0x40005000
 8001a5c:	40011400 	.word	0x40011400
 8001a60:	40007800 	.word	0x40007800
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a71      	ldr	r2, [pc, #452]	; (8001c30 <UART_SetConfig+0x4b8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d125      	bne.n	8001aba <UART_SetConfig+0x342>
 8001a6e:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <UART_SetConfig+0x4bc>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a7c:	d017      	beq.n	8001aae <UART_SetConfig+0x336>
 8001a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a82:	d817      	bhi.n	8001ab4 <UART_SetConfig+0x33c>
 8001a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a88:	d00b      	beq.n	8001aa2 <UART_SetConfig+0x32a>
 8001a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8e:	d811      	bhi.n	8001ab4 <UART_SetConfig+0x33c>
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <UART_SetConfig+0x324>
 8001a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a98:	d006      	beq.n	8001aa8 <UART_SetConfig+0x330>
 8001a9a:	e00b      	b.n	8001ab4 <UART_SetConfig+0x33c>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	77fb      	strb	r3, [r7, #31]
 8001aa0:	e00d      	b.n	8001abe <UART_SetConfig+0x346>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	77fb      	strb	r3, [r7, #31]
 8001aa6:	e00a      	b.n	8001abe <UART_SetConfig+0x346>
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	77fb      	strb	r3, [r7, #31]
 8001aac:	e007      	b.n	8001abe <UART_SetConfig+0x346>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	77fb      	strb	r3, [r7, #31]
 8001ab2:	e004      	b.n	8001abe <UART_SetConfig+0x346>
 8001ab4:	2310      	movs	r3, #16
 8001ab6:	77fb      	strb	r3, [r7, #31]
 8001ab8:	e001      	b.n	8001abe <UART_SetConfig+0x346>
 8001aba:	2310      	movs	r3, #16
 8001abc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac6:	d15a      	bne.n	8001b7e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8001ac8:	7ffb      	ldrb	r3, [r7, #31]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d827      	bhi.n	8001b1e <UART_SetConfig+0x3a6>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <UART_SetConfig+0x35c>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001af9 	.word	0x08001af9
 8001ad8:	08001b01 	.word	0x08001b01
 8001adc:	08001b09 	.word	0x08001b09
 8001ae0:	08001b1f 	.word	0x08001b1f
 8001ae4:	08001b0f 	.word	0x08001b0f
 8001ae8:	08001b1f 	.word	0x08001b1f
 8001aec:	08001b1f 	.word	0x08001b1f
 8001af0:	08001b1f 	.word	0x08001b1f
 8001af4:	08001b17 	.word	0x08001b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001af8:	f7ff fabe 	bl	8001078 <HAL_RCC_GetPCLK1Freq>
 8001afc:	61b8      	str	r0, [r7, #24]
        break;
 8001afe:	e013      	b.n	8001b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b00:	f7ff face 	bl	80010a0 <HAL_RCC_GetPCLK2Freq>
 8001b04:	61b8      	str	r0, [r7, #24]
        break;
 8001b06:	e00f      	b.n	8001b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <UART_SetConfig+0x4c0>)
 8001b0a:	61bb      	str	r3, [r7, #24]
        break;
 8001b0c:	e00c      	b.n	8001b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b0e:	f7ff f9c5 	bl	8000e9c <HAL_RCC_GetSysClockFreq>
 8001b12:	61b8      	str	r0, [r7, #24]
        break;
 8001b14:	e008      	b.n	8001b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1a:	61bb      	str	r3, [r7, #24]
        break;
 8001b1c:	e004      	b.n	8001b28 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	77bb      	strb	r3, [r7, #30]
        break;
 8001b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d074      	beq.n	8001c18 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	005a      	lsls	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	441a      	add	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	d916      	bls.n	8001b78 <UART_SetConfig+0x400>
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d212      	bcs.n	8001b78 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f023 030f 	bic.w	r3, r3, #15
 8001b5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	89fa      	ldrh	r2, [r7, #14]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	e04f      	b.n	8001c18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	77bb      	strb	r3, [r7, #30]
 8001b7c:	e04c      	b.n	8001c18 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d828      	bhi.n	8001bd6 <UART_SetConfig+0x45e>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <UART_SetConfig+0x414>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001bb1 	.word	0x08001bb1
 8001b90:	08001bb9 	.word	0x08001bb9
 8001b94:	08001bc1 	.word	0x08001bc1
 8001b98:	08001bd7 	.word	0x08001bd7
 8001b9c:	08001bc7 	.word	0x08001bc7
 8001ba0:	08001bd7 	.word	0x08001bd7
 8001ba4:	08001bd7 	.word	0x08001bd7
 8001ba8:	08001bd7 	.word	0x08001bd7
 8001bac:	08001bcf 	.word	0x08001bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bb0:	f7ff fa62 	bl	8001078 <HAL_RCC_GetPCLK1Freq>
 8001bb4:	61b8      	str	r0, [r7, #24]
        break;
 8001bb6:	e013      	b.n	8001be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001bb8:	f7ff fa72 	bl	80010a0 <HAL_RCC_GetPCLK2Freq>
 8001bbc:	61b8      	str	r0, [r7, #24]
        break;
 8001bbe:	e00f      	b.n	8001be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <UART_SetConfig+0x4c0>)
 8001bc2:	61bb      	str	r3, [r7, #24]
        break;
 8001bc4:	e00c      	b.n	8001be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001bc6:	f7ff f969 	bl	8000e9c <HAL_RCC_GetSysClockFreq>
 8001bca:	61b8      	str	r0, [r7, #24]
        break;
 8001bcc:	e008      	b.n	8001be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd2:	61bb      	str	r3, [r7, #24]
        break;
 8001bd4:	e004      	b.n	8001be0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	77bb      	strb	r3, [r7, #30]
        break;
 8001bde:	bf00      	nop
    }

    if (pclk != 0U)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d018      	beq.n	8001c18 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	085a      	lsrs	r2, r3, #1
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	441a      	add	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d909      	bls.n	8001c14 <UART_SetConfig+0x49c>
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d205      	bcs.n	8001c14 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	e001      	b.n	8001c18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001c24:	7fbb      	ldrb	r3, [r7, #30]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40007c00 	.word	0x40007c00
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400

08001c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00a      	beq.n	8001c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01a      	beq.n	8001d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d3a:	d10a      	bne.n	8001d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	605a      	str	r2, [r3, #4]
  }
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001d90:	f7fe fd1c 	bl	80007cc <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d10e      	bne.n	8001dc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f82d 	bl	8001e12 <UART_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e023      	b.n	8001e0a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d10e      	bne.n	8001dee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f817 	bl	8001e12 <UART_WaitOnFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e00d      	b.n	8001e0a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b09c      	sub	sp, #112	; 0x70
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e22:	e0a5      	b.n	8001f70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	f000 80a1 	beq.w	8001f70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2e:	f7fe fccd 	bl	80007cc <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <UART_WaitOnFlagUntilTimeout+0x32>
 8001e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d13e      	bne.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4c:	e853 3f00 	ldrex	r3, [r3]
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e58:	667b      	str	r3, [r7, #100]	; 0x64
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e6a:	e841 2300 	strex	r3, r2, [r1]
 8001e6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1e6      	bne.n	8001e44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	e853 3f00 	ldrex	r3, [r3]
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3308      	adds	r3, #8
 8001e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e9e:	e841 2300 	strex	r3, r2, [r1]
 8001ea2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e5      	bne.n	8001e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e067      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d04f      	beq.n	8001f70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ede:	d147      	bne.n	8001f70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	e853 3f00 	ldrex	r3, [r3]
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f10:	e841 2300 	strex	r3, r2, [r1]
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e6      	bne.n	8001eea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3308      	adds	r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	e853 3f00 	ldrex	r3, [r3]
 8001f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3308      	adds	r3, #8
 8001f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f3c:	623a      	str	r2, [r7, #32]
 8001f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f40:	69f9      	ldr	r1, [r7, #28]
 8001f42:	6a3a      	ldr	r2, [r7, #32]
 8001f44:	e841 2300 	strex	r3, r2, [r1]
 8001f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e5      	bne.n	8001f1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e010      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	f43f af4a 	beq.w	8001e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3770      	adds	r7, #112	; 0x70
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b095      	sub	sp, #84	; 0x54
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001faa:	e853 3f00 	ldrex	r3, [r3]
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fc8:	e841 2300 	strex	r3, r2, [r1]
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e6      	bne.n	8001fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	e853 3f00 	ldrex	r3, [r3]
 8001fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffc:	e841 2300 	strex	r3, r2, [r1]
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e5      	bne.n	8001fd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	2b01      	cmp	r3, #1
 800200e:	d118      	bne.n	8002042 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	60bb      	str	r3, [r7, #8]
   return(result);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f023 0310 	bic.w	r3, r3, #16
 8002024:	647b      	str	r3, [r7, #68]	; 0x44
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	e841 2300 	strex	r3, r2, [r1]
 800203a:	613b      	str	r3, [r7, #16]
   return(result);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1e6      	bne.n	8002010 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002054:	bf00      	nop
 8002056:	3754      	adds	r7, #84	; 0x54
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff fb5a 	bl	8001738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	e853 3f00 	ldrex	r3, [r3]
 80020a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b6:	6979      	ldr	r1, [r7, #20]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	e841 2300 	strex	r3, r2, [r1]
 80020be:	613b      	str	r3, [r7, #16]
   return(result);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1e6      	bne.n	8002094 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fb26 	bl	8001724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <__libc_init_array>:
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	4d0d      	ldr	r5, [pc, #52]	; (8002118 <__libc_init_array+0x38>)
 80020e4:	4c0d      	ldr	r4, [pc, #52]	; (800211c <__libc_init_array+0x3c>)
 80020e6:	1b64      	subs	r4, r4, r5
 80020e8:	10a4      	asrs	r4, r4, #2
 80020ea:	2600      	movs	r6, #0
 80020ec:	42a6      	cmp	r6, r4
 80020ee:	d109      	bne.n	8002104 <__libc_init_array+0x24>
 80020f0:	4d0b      	ldr	r5, [pc, #44]	; (8002120 <__libc_init_array+0x40>)
 80020f2:	4c0c      	ldr	r4, [pc, #48]	; (8002124 <__libc_init_array+0x44>)
 80020f4:	f000 f818 	bl	8002128 <_init>
 80020f8:	1b64      	subs	r4, r4, r5
 80020fa:	10a4      	asrs	r4, r4, #2
 80020fc:	2600      	movs	r6, #0
 80020fe:	42a6      	cmp	r6, r4
 8002100:	d105      	bne.n	800210e <__libc_init_array+0x2e>
 8002102:	bd70      	pop	{r4, r5, r6, pc}
 8002104:	f855 3b04 	ldr.w	r3, [r5], #4
 8002108:	4798      	blx	r3
 800210a:	3601      	adds	r6, #1
 800210c:	e7ee      	b.n	80020ec <__libc_init_array+0xc>
 800210e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002112:	4798      	blx	r3
 8002114:	3601      	adds	r6, #1
 8002116:	e7f2      	b.n	80020fe <__libc_init_array+0x1e>
 8002118:	08002150 	.word	0x08002150
 800211c:	08002150 	.word	0x08002150
 8002120:	08002150 	.word	0x08002150
 8002124:	08002154 	.word	0x08002154

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
