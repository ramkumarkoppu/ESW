
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce4  08002ce4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cec  08002cec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08002d64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002d64  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a82e  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e5  00000000  00000000  0002a8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0002bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f35  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087e0  00000000  00000000  000557a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a79  00000000  00000000  0005df85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001509fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  00150a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002c40 	.word	0x08002c40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002c40 	.word	0x08002c40

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005ec:	f000 fa14 	bl	8000a18 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 80005f0:	f000 fb60 	bl	8000cb4 <HAL_SYSTICK_IRQHandler>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <main>:
#ifdef USE_UART_EXAMPLE
static inline char convert_to_Upper( char c );
#endif // USE_UART_EXAMPLE

int main( void )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fc:	f000 f9cf 	bl	800099e <HAL_Init>

	// Print current settings of clocks.
	displayClkInfo();
 8000600:	f000 f8b2 	bl	8000768 <_ZL14displayClkInfov>

	/* Configure the system clock */
	SystemClock_Config();
 8000604:	f000 f804 	bl	8000610 <_ZL18SystemClock_Configv>
	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
#endif // USE_UART_EXAMPLE

#if defined( USE_HSE_EXAMPLE ) || defined( USE_PLL_EXAMPLE )
	// Print current settings of clocks.
	displayClkInfo();
 8000608:	f000 f8ae 	bl	8000768 <_ZL14displayClkInfov>
#endif // USE_HSE_EXAMPLE or USE_PLL_EXAMPLE

	while(true)
 800060c:	e7fe      	b.n	800060c <main+0x14>
	...

08000610 <_ZL18SystemClock_Configv>:
}

#endif // USE_UART_EXAMPLE

static void SystemClock_Config( void )
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
#endif // USE_HSE_EXAMPLE

#ifdef USE_PLL_EXAMPLE
	// Configure the Clock Source.
	RCC_OscInitTypeDef Osc_init{0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 feca 	bl	80023b8 <memset>
	Osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
	Osc_init.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_init.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	633b      	str	r3, [r7, #48]	; 0x30
//	Osc_init.PLL.PLLM = 16;
//	Osc_init.PLL.PLLN = 168;
//	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
	/* End of 84Mhz specific configuration */
	/* Configure PLL to generate 120MHz clock for SYSCLK. */
	Osc_init.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_init.PLL.PLLN = 240;
 800063c:	23f0      	movs	r3, #240	; 0xf0
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
	Osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
	/* End of 120Mhz specific configuration */
	Osc_init.PLL.PLLQ = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
	Osc_init.PLL.PLLR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
	if ( HAL_RCC_OscConfig(&Osc_init) != HAL_OK )
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fce9 	bl	8001028 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_ZL18SystemClock_Configv+0x5a>
	{
		// Error in Oscillator or PLL configuration.
		Error_Handler();
 8000666:	f000 f87b 	bl	8000760 <_ZL13Error_Handlerv>
	}

	// Configure the various clocks.
	RCC_ClkInitTypeDef Clk_init{0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
	Clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000678:	230f      	movs	r3, #15
 800067a:	607b      	str	r3, [r7, #4]
	Clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
	Clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1; // for 50, 84 and 120Mhz configurations.
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
	//Clk_init.APB1CLKDivider = RCC_HCLK_DIV2;	// for 50 and 84 configurations.
	Clk_init.APB1CLKDivider = RCC_HCLK_DIV4;	// for 128HHz configuration.
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	613b      	str	r3, [r7, #16]
	Clk_init.APB2CLKDivider = RCC_HCLK_DIV2;	// for 50, 84 and 128MHz configurations.
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	617b      	str	r3, [r7, #20]
	std::uint32_t flash_latency{FLASH_LATENCY_0};
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
	//flash_latency = FLASH_LATENCY_1; // for 50MHz configuration.
	//flash_latency = FLASH_LATENCY_2; // for 84MHz configuration.
	flash_latency = FLASH_LATENCY_4; // for 120MHz configuration.
 8000694:	2304      	movs	r3, #4
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ( HAL_RCC_ClockConfig( &Clk_init, flash_latency ) != HAL_OK )
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800069c:	4618      	mov	r0, r3
 800069e:	f000 ff71 	bl	8001584 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_ZL18SystemClock_Configv+0xa6>
	{
		// Error in Clock configuration.
		Error_Handler();
 80006b2:	f000 f855 	bl	8000760 <_ZL13Error_Handlerv>
	}

	// Disable HSI
	__HAL_RCC_HSI_DISABLE();
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <_ZL18SystemClock_Configv+0xd4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <_ZL18SystemClock_Configv+0xd4>)
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]

	// Configure SysTick with new clock settings.
	HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 80006c2:	2004      	movs	r0, #4
 80006c4:	f000 fada 	bl	8000c7c <HAL_SYSTICK_CLKSourceConfig>
	HAL_SYSTICK_Config( ( HAL_RCC_GetHCLKFreq() / 1000 ) );
 80006c8:	f001 f92a 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <_ZL18SystemClock_Configv+0xd8>)
 80006d0:	fba2 2303 	umull	r2, r3, r2, r3
 80006d4:	099b      	lsrs	r3, r3, #6
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fac3 	bl	8000c62 <HAL_SYSTICK_Config>
#endif // USE_PLL_EXAMPLE
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	10624dd3 	.word	0x10624dd3

080006ec <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	std::memset( &huart3, 0, sizeof(huart3) );
 80006f0:	2284      	movs	r2, #132	; 0x84
 80006f2:	2100      	movs	r1, #0
 80006f4:	4818      	ldr	r0, [pc, #96]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 80006f6:	f001 fe5f 	bl	80023b8 <memset>
	/* UART High level initilization */
	huart3.Instance = USART3;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <_ZL10UART3_Initv+0x70>)
 80006fe:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 8000702:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000706:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 800071c:	220c      	movs	r2, #12
 800071e:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init( &huart3 ) != HAL_OK)
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <_ZL10UART3_Initv+0x6c>)
 800073a:	f001 f925 	bl	8001988 <HAL_UART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf14      	ite	ne
 8000744:	2301      	movne	r3, #1
 8000746:	2300      	moveq	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <_ZL10UART3_Initv+0x66>
	{
		// Initialization Error.
		Error_Handler();
 800074e:	f000 f807 	bl	8000760 <_ZL13Error_Handlerv>
	}
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000008c 	.word	0x2000008c
 800075c:	40004800 	.word	0x40004800

08000760 <_ZL13Error_Handlerv>:
	return retVal;
}
#endif // USE_UART_EXAMPLE

static void Error_Handler( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	for (;;);
 8000764:	e7fe      	b.n	8000764 <_ZL13Error_Handlerv+0x4>
	...

08000768 <_ZL14displayClkInfov>:
}

static void displayClkInfo( void )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800076e:	af00      	add	r7, sp, #0
	char msg[1024];

	/* Configure the UART for debug console */
	UART3_Init();
 8000770:	f7ff ffbc 	bl	80006ec <_ZL10UART3_Initv>

	std::sprintf (msg, "SYSCLK:%luMHZ\r\n", ( HAL_RCC_GetSysClockFreq() / 1000000 ) );
 8000774:	f000 fff2 	bl	800175c <HAL_RCC_GetSysClockFreq>
 8000778:	4603      	mov	r3, r0
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <_ZL14displayClkInfov+0xd8>)
 800077c:	fba2 2303 	umull	r2, r3, r2, r3
 8000780:	0c9a      	lsrs	r2, r3, #18
 8000782:	463b      	mov	r3, r7
 8000784:	492f      	ldr	r1, [pc, #188]	; (8000844 <_ZL14displayClkInfov+0xdc>)
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fe1e 	bl	80023c8 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 800078c:	463b      	mov	r3, r7
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fd56 	bl	8000240 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	4639      	mov	r1, r7
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <_ZL14displayClkInfov+0xe0>)
 80007a0:	f001 f940 	bl	8001a24 <HAL_UART_Transmit>
	std::sprintf( msg, "HCLK:%luMHZ\r\n", ( HAL_RCC_GetHCLKFreq() / 1000000 ) );
 80007a4:	f001 f8bc 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a25      	ldr	r2, [pc, #148]	; (8000840 <_ZL14displayClkInfov+0xd8>)
 80007ac:	fba2 2303 	umull	r2, r3, r2, r3
 80007b0:	0c9a      	lsrs	r2, r3, #18
 80007b2:	463b      	mov	r3, r7
 80007b4:	4925      	ldr	r1, [pc, #148]	; (800084c <_ZL14displayClkInfov+0xe4>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fe06 	bl	80023c8 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 80007bc:	463b      	mov	r3, r7
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd3e 	bl	8000240 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4639      	mov	r1, r7
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	481e      	ldr	r0, [pc, #120]	; (8000848 <_ZL14displayClkInfov+0xe0>)
 80007d0:	f001 f928 	bl	8001a24 <HAL_UART_Transmit>
	std::sprintf( msg, "PCLK1:%luMHZ\r\n", ( HAL_RCC_GetPCLK1Freq() / 1000000 ) );
 80007d4:	f001 f8b0 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <_ZL14displayClkInfov+0xd8>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	0c9a      	lsrs	r2, r3, #18
 80007e2:	463b      	mov	r3, r7
 80007e4:	491a      	ldr	r1, [pc, #104]	; (8000850 <_ZL14displayClkInfov+0xe8>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fdee 	bl	80023c8 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 80007ec:	463b      	mov	r3, r7
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd26 	bl	8000240 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4639      	mov	r1, r7
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <_ZL14displayClkInfov+0xe0>)
 8000800:	f001 f910 	bl	8001a24 <HAL_UART_Transmit>
	std::sprintf( msg, "PCLK2:%luMHZ\r\n", ( HAL_RCC_GetPCLK2Freq() / 1000000 ) );
 8000804:	f001 f8ac 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8000808:	4603      	mov	r3, r0
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <_ZL14displayClkInfov+0xd8>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	463b      	mov	r3, r7
 8000814:	490f      	ldr	r1, [pc, #60]	; (8000854 <_ZL14displayClkInfov+0xec>)
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fdd6 	bl	80023c8 <siprintf>
	HAL_UART_Transmit( &huart3, (const std::uint8_t *)msg, std::strlen(msg), HAL_MAX_DELAY );
 800081c:	463b      	mov	r3, r7
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd0e 	bl	8000240 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	4639      	mov	r1, r7
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <_ZL14displayClkInfov+0xe0>)
 8000830:	f001 f8f8 	bl	8001a24 <HAL_UART_Transmit>
}
 8000834:	bf00      	nop
 8000836:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	431bde83 	.word	0x431bde83
 8000844:	08002c58 	.word	0x08002c58
 8000848:	2000008c 	.word	0x2000008c
 800084c:	08002c68 	.word	0x08002c68
 8000850:	08002c78 	.word	0x08002c78
 8000854:	08002c88 	.word	0x08002c88

08000858 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f9cb 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x40>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <HAL_MspInit+0x40>)
 8000868:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800086c:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	f06f 0009 	mvn.w	r0, #9
 8000876:	f000 f9ca 	bl	8000c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	f06f 000a 	mvn.w	r0, #10
 8000882:	f000 f9c4 	bl	8000c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	f06f 000b 	mvn.w	r0, #11
 800088e:	f000 f9be 	bl	8000c0e <HAL_NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a13      	ldr	r2, [pc, #76]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80008e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e8:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &USART3_gpio_config);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <HAL_UART_MspInit+0x88>)
 8000902:	f000 f9e5 	bl	8000cd0 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority(USART3_IRQn, 0x0F, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	210f      	movs	r1, #15
 800090a:	2027      	movs	r0, #39	; 0x27
 800090c:	f000 f97f 	bl	8000c0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000910:	2027      	movs	r0, #39	; 0x27
 8000912:	f000 f998 	bl	8000c46 <HAL_NVIC_EnableIRQ>
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020c00 	.word	0x40020c00

08000928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000976:	f7ff ffd7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 fcf9 	bl	8002370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fe3b 	bl	80005f8 <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000990:	08002cf4 	.word	0x08002cf4
  ldr r2, =_sbss
 8000994:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000998:	20000130 	.word	0x20000130

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>

0800099e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 f928 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 f805 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ae:	f7ff ff53 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f943 	bl	8000c62 <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f90b 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	2000011c 	.word	0x2000011c

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000011c 	.word	0x2000011c

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <__NVIC_SetPriorityGrouping+0x40>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x40>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00
 8000a9c:	05fa0000 	.word	0x05fa0000

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff29 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff3e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff31 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa2 	bl	8000bb4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d106      	bne.n	8000c98 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000c96:	e005      	b.n	8000ca4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000c9e:	f023 0304 	bic.w	r3, r3, #4
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000cb8:	f000 f802 	bl	8000cc0 <HAL_SYSTICK_Callback>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e175      	b.n	8000fdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f040 8164 	bne.w	8000fd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d005      	beq.n	8000d26 <HAL_GPIO_Init+0x56>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d130      	bne.n	8000d88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	f003 0201 	and.w	r2, r3, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d017      	beq.n	8000dc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d123      	bne.n	8000e18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	69b9      	ldr	r1, [r7, #24]
 8000e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0203 	and.w	r2, r3, #3
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80be 	beq.w	8000fd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <HAL_GPIO_Init+0x324>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a65      	ldr	r2, [pc, #404]	; (8000ff4 <HAL_GPIO_Init+0x324>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b63      	ldr	r3, [pc, #396]	; (8000ff4 <HAL_GPIO_Init+0x324>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e72:	4a61      	ldr	r2, [pc, #388]	; (8000ff8 <HAL_GPIO_Init+0x328>)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a58      	ldr	r2, [pc, #352]	; (8000ffc <HAL_GPIO_Init+0x32c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d037      	beq.n	8000f0e <HAL_GPIO_Init+0x23e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a57      	ldr	r2, [pc, #348]	; (8001000 <HAL_GPIO_Init+0x330>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d031      	beq.n	8000f0a <HAL_GPIO_Init+0x23a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a56      	ldr	r2, [pc, #344]	; (8001004 <HAL_GPIO_Init+0x334>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d02b      	beq.n	8000f06 <HAL_GPIO_Init+0x236>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a55      	ldr	r2, [pc, #340]	; (8001008 <HAL_GPIO_Init+0x338>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d025      	beq.n	8000f02 <HAL_GPIO_Init+0x232>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a54      	ldr	r2, [pc, #336]	; (800100c <HAL_GPIO_Init+0x33c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01f      	beq.n	8000efe <HAL_GPIO_Init+0x22e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a53      	ldr	r2, [pc, #332]	; (8001010 <HAL_GPIO_Init+0x340>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0x22a>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_GPIO_Init+0x344>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0x226>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a51      	ldr	r2, [pc, #324]	; (8001018 <HAL_GPIO_Init+0x348>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_GPIO_Init+0x222>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_GPIO_Init+0x34c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x21e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_GPIO_Init+0x350>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x21a>
 8000ee6:	2309      	movs	r3, #9
 8000ee8:	e012      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000eea:	230a      	movs	r3, #10
 8000eec:	e010      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000eee:	2308      	movs	r3, #8
 8000ef0:	e00e      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	e00c      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	e00a      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x240>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x328>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f52:	4a34      	ldr	r2, [pc, #208]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f58:	4b32      	ldr	r3, [pc, #200]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f7c:	4a29      	ldr	r2, [pc, #164]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <HAL_GPIO_Init+0x354>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f ae86 	bls.w	8000cf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40021400 	.word	0x40021400
 8001014:	40021800 	.word	0x40021800
 8001018:	40021c00 	.word	0x40021c00
 800101c:	40022000 	.word	0x40022000
 8001020:	40022400 	.word	0x40022400
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e29b      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8087 	beq.w	800115a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800104c:	4b96      	ldr	r3, [pc, #600]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b04      	cmp	r3, #4
 8001056:	d00c      	beq.n	8001072 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001058:	4b93      	ldr	r3, [pc, #588]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d112      	bne.n	800108a <HAL_RCC_OscConfig+0x62>
 8001064:	4b90      	ldr	r3, [pc, #576]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b8d      	ldr	r3, [pc, #564]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d06c      	beq.n	8001158 <HAL_RCC_OscConfig+0x130>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d168      	bne.n	8001158 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e275      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x7a>
 8001094:	4b84      	ldr	r3, [pc, #528]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a83      	ldr	r2, [pc, #524]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e02e      	b.n	8001100 <HAL_RCC_OscConfig+0xd8>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x9c>
 80010aa:	4b7f      	ldr	r3, [pc, #508]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a7e      	ldr	r2, [pc, #504]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b7c      	ldr	r3, [pc, #496]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a7b      	ldr	r2, [pc, #492]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e01d      	b.n	8001100 <HAL_RCC_OscConfig+0xd8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0xc0>
 80010ce:	4b76      	ldr	r3, [pc, #472]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a75      	ldr	r2, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a72      	ldr	r2, [pc, #456]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xd8>
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6e      	ldr	r2, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b6c      	ldr	r3, [pc, #432]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a6b      	ldr	r2, [pc, #428]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fc9a 	bl	8000a40 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fc96 	bl	8000a40 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e229      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0xe8>
 800112e:	e014      	b.n	800115a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fc86 	bl	8000a40 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fc82 	bl	8000a40 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e215      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x110>
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d069      	beq.n	800123a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b08      	cmp	r3, #8
 800117c:	d11c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x190>
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d116      	bne.n	80011b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d005      	beq.n	80011a2 <HAL_RCC_OscConfig+0x17a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d001      	beq.n	80011a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e1e9      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	493d      	ldr	r1, [pc, #244]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e040      	b.n	800123a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d023      	beq.n	8001208 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc38 	bl	8000a40 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc34 	bl	8000a40 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1c7      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4929      	ldr	r1, [pc, #164]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
 8001206:	e018      	b.n	800123a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc14 	bl	8000a40 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc10 	bl	8000a40 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1a3      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d038      	beq.n	80012b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125a:	f7ff fbf1 	bl	8000a40 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fbed 	bl	8000a40 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e180      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x23a>
 8001280:	e01a      	b.n	80012b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x280>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128e:	f7ff fbd7 	bl	8000a40 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fbd3 	bl	8000a40 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d903      	bls.n	80012ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e166      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
 80012a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80012ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a4 	beq.w	800140e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c6:	4b8c      	ldr	r3, [pc, #560]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b89      	ldr	r3, [pc, #548]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a88      	ldr	r2, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b86      	ldr	r3, [pc, #536]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ea:	2301      	movs	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ee:	4b83      	ldr	r3, [pc, #524]	; (80014fc <HAL_RCC_OscConfig+0x4d4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d118      	bne.n	800132c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012fa:	4b80      	ldr	r3, [pc, #512]	; (80014fc <HAL_RCC_OscConfig+0x4d4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a7f      	ldr	r2, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x4d4>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001306:	f7ff fb9b 	bl	8000a40 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130e:	f7ff fb97 	bl	8000a40 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b64      	cmp	r3, #100	; 0x64
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e12a      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001320:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x4d4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <HAL_RCC_OscConfig+0x31a>
 8001334:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a6f      	ldr	r2, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	e02d      	b.n	800139e <HAL_RCC_OscConfig+0x376>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x33c>
 800134a:	4b6b      	ldr	r3, [pc, #428]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134e:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6713      	str	r3, [r2, #112]	; 0x70
 8001356:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	4a67      	ldr	r2, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800135c:	f023 0304 	bic.w	r3, r3, #4
 8001360:	6713      	str	r3, [r2, #112]	; 0x70
 8001362:	e01c      	b.n	800139e <HAL_RCC_OscConfig+0x376>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d10c      	bne.n	8001386 <HAL_RCC_OscConfig+0x35e>
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a5e      	ldr	r2, [pc, #376]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	e00b      	b.n	800139e <HAL_RCC_OscConfig+0x376>
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a5b      	ldr	r2, [pc, #364]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a58      	ldr	r2, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001398:	f023 0304 	bic.w	r3, r3, #4
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d015      	beq.n	80013d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a6:	f7ff fb4b 	bl	8000a40 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff fb47 	bl	8000a40 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e0d8      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0ee      	beq.n	80013ae <HAL_RCC_OscConfig+0x386>
 80013d0:	e014      	b.n	80013fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb35 	bl	8000a40 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff fb31 	bl	8000a40 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e0c2      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ee      	bne.n	80013da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013fc:	7dfb      	ldrb	r3, [r7, #23]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d105      	bne.n	800140e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a3c      	ldr	r2, [pc, #240]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80ae 	beq.w	8001574 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	2b08      	cmp	r3, #8
 8001422:	d06d      	beq.n	8001500 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d14b      	bne.n	80014c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a31      	ldr	r2, [pc, #196]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fb02 	bl	8000a40 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fafe 	bl	8000a40 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e091      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	071b      	lsls	r3, r3, #28
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 8001496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fad0 	bl	8000a40 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff facc 	bl	8000a40 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e05f      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x47c>
 80014c2:	e057      	b.n	8001574 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fab6 	bl	8000a40 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fab2 	bl	8000a40 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e045      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_RCC_OscConfig+0x4d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4b0>
 80014f6:	e03d      	b.n	8001574 <HAL_RCC_OscConfig+0x54c>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_RCC_OscConfig+0x558>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d030      	beq.n	8001570 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d129      	bne.n	8001570 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d122      	bne.n	8001570 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001536:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001538:	4293      	cmp	r3, r2
 800153a:	d119      	bne.n	8001570 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	3b01      	subs	r3, #1
 800154a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d10f      	bne.n	8001570 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0d0      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d910      	bls.n	80015cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 020f 	bic.w	r2, r3, #15
 80015b2:	4965      	ldr	r1, [pc, #404]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 80015ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001606:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d040      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d115      	bne.n	8001666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e073      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06b      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4936      	ldr	r1, [pc, #216]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001678:	f7ff f9e2 	bl	8000a40 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff f9de 	bl	8000a40 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e053      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d210      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 020f 	bic.w	r2, r3, #15
 80016be:	4922      	ldr	r1, [pc, #136]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f821 	bl	800175c <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490a      	ldr	r1, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1d4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f93e 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	08002c98 	.word	0x08002c98
 8001754:	20000000 	.word	0x20000000
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	2300      	movs	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d00d      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x40>
 8001780:	2b08      	cmp	r3, #8
 8001782:	f200 80bd 	bhi.w	8001900 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x34>
 800178a:	2b04      	cmp	r3, #4
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x3a>
 800178e:	e0b7      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b61      	ldr	r3, [pc, #388]	; (8001918 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001792:	60bb      	str	r3, [r7, #8]
      break;
 8001794:	e0b7      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001798:	60bb      	str	r3, [r7, #8]
      break;
 800179a:	e0b4      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179c:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017a6:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d04d      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b2:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	461a      	mov	r2, r3
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	ea02 0800 	and.w	r8, r2, r0
 80017ca:	ea03 0901 	and.w	r9, r3, r1
 80017ce:	4640      	mov	r0, r8
 80017d0:	4649      	mov	r1, r9
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	014b      	lsls	r3, r1, #5
 80017dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017e0:	0142      	lsls	r2, r0, #5
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	ebb0 0008 	subs.w	r0, r0, r8
 80017ea:	eb61 0109 	sbc.w	r1, r1, r9
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	018b      	lsls	r3, r1, #6
 80017f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017fc:	0182      	lsls	r2, r0, #6
 80017fe:	1a12      	subs	r2, r2, r0
 8001800:	eb63 0301 	sbc.w	r3, r3, r1
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	00d9      	lsls	r1, r3, #3
 800180e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001812:	00d0      	lsls	r0, r2, #3
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	eb12 0208 	adds.w	r2, r2, r8
 800181c:	eb43 0309 	adc.w	r3, r3, r9
 8001820:	f04f 0000 	mov.w	r0, #0
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	0259      	lsls	r1, r3, #9
 800182a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800182e:	0250      	lsls	r0, r2, #9
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f7fe fd56 	bl	80002f0 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4613      	mov	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e04a      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	461a      	mov	r2, r3
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	ea02 0400 	and.w	r4, r2, r0
 8001866:	ea03 0501 	and.w	r5, r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	014b      	lsls	r3, r1, #5
 8001878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800187c:	0142      	lsls	r2, r0, #5
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	1b00      	subs	r0, r0, r4
 8001884:	eb61 0105 	sbc.w	r1, r1, r5
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001896:	0182      	lsls	r2, r0, #6
 8001898:	1a12      	subs	r2, r2, r0
 800189a:	eb63 0301 	sbc.w	r3, r3, r1
 800189e:	f04f 0000 	mov.w	r0, #0
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	00d9      	lsls	r1, r3, #3
 80018a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018ac:	00d0      	lsls	r0, r2, #3
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	1912      	adds	r2, r2, r4
 80018b4:	eb45 0303 	adc.w	r3, r5, r3
 80018b8:	f04f 0000 	mov.w	r0, #0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	0299      	lsls	r1, r3, #10
 80018c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018c6:	0290      	lsls	r0, r2, #10
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	f7fe fd0a 	bl	80002f0 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	3301      	adds	r3, #1
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	60bb      	str	r3, [r7, #8]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001902:	60bb      	str	r3, [r7, #8]
      break;
 8001904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001906:	68bb      	ldr	r3, [r7, #8]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	00f42400 	.word	0x00f42400
 800191c:	007a1200 	.word	0x007a1200

08001920 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_GetHCLKFreq+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff0 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08002ca8 	.word	0x08002ca8

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffdc 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	08002ca8 	.word	0x08002ca8

08001988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e040      	b.n	8001a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe ff76 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f8c0 	bl	8001b4c <UART_SetConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e022      	b.n	8001a1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fb16 	bl	8002010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb9d 	bl	8002154 <UART_CheckIdleState>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	f040 8081 	bne.w	8001b40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_UART_Transmit+0x26>
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e079      	b.n	8001b42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_UART_Transmit+0x38>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e072      	b.n	8001b42 <HAL_UART_Transmit+0x11e>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2221      	movs	r2, #33	; 0x21
 8001a70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a72:	f7fe ffe5 	bl	8000a40 <HAL_GetTick>
 8001a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	88fa      	ldrh	r2, [r7, #6]
 8001a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a90:	d108      	bne.n	8001aa4 <HAL_UART_Transmit+0x80>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	e003      	b.n	8001aac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8001ab4:	e02c      	b.n	8001b10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fb90 	bl	80021e6 <UART_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e038      	b.n	8001b42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	e007      	b.n	8001afe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1cc      	bne.n	8001ab6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2200      	movs	r2, #0
 8001b24:	2140      	movs	r1, #64	; 0x40
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fb5d 	bl	80021e6 <UART_WaitOnFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e005      	b.n	8001b42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4ba7      	ldr	r3, [pc, #668]	; (8001e14 <UART_SetConfig+0x2c8>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	6979      	ldr	r1, [r7, #20]
 8001b80:	430b      	orrs	r3, r1
 8001b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a95      	ldr	r2, [pc, #596]	; (8001e18 <UART_SetConfig+0x2cc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d120      	bne.n	8001c0a <UART_SetConfig+0xbe>
 8001bc8:	4b94      	ldr	r3, [pc, #592]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d816      	bhi.n	8001c04 <UART_SetConfig+0xb8>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <UART_SetConfig+0x90>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bf9 	.word	0x08001bf9
 8001be4:	08001bf3 	.word	0x08001bf3
 8001be8:	08001bff 	.word	0x08001bff
 8001bec:	2301      	movs	r3, #1
 8001bee:	77fb      	strb	r3, [r7, #31]
 8001bf0:	e14f      	b.n	8001e92 <UART_SetConfig+0x346>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	77fb      	strb	r3, [r7, #31]
 8001bf6:	e14c      	b.n	8001e92 <UART_SetConfig+0x346>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	77fb      	strb	r3, [r7, #31]
 8001bfc:	e149      	b.n	8001e92 <UART_SetConfig+0x346>
 8001bfe:	2308      	movs	r3, #8
 8001c00:	77fb      	strb	r3, [r7, #31]
 8001c02:	e146      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c04:	2310      	movs	r3, #16
 8001c06:	77fb      	strb	r3, [r7, #31]
 8001c08:	e143      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a84      	ldr	r2, [pc, #528]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d132      	bne.n	8001c7a <UART_SetConfig+0x12e>
 8001c14:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d828      	bhi.n	8001c74 <UART_SetConfig+0x128>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <UART_SetConfig+0xdc>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c5d 	.word	0x08001c5d
 8001c2c:	08001c75 	.word	0x08001c75
 8001c30:	08001c75 	.word	0x08001c75
 8001c34:	08001c75 	.word	0x08001c75
 8001c38:	08001c69 	.word	0x08001c69
 8001c3c:	08001c75 	.word	0x08001c75
 8001c40:	08001c75 	.word	0x08001c75
 8001c44:	08001c75 	.word	0x08001c75
 8001c48:	08001c63 	.word	0x08001c63
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	08001c75 	.word	0x08001c75
 8001c54:	08001c75 	.word	0x08001c75
 8001c58:	08001c6f 	.word	0x08001c6f
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	77fb      	strb	r3, [r7, #31]
 8001c60:	e117      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c62:	2302      	movs	r3, #2
 8001c64:	77fb      	strb	r3, [r7, #31]
 8001c66:	e114      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	77fb      	strb	r3, [r7, #31]
 8001c6c:	e111      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	77fb      	strb	r3, [r7, #31]
 8001c72:	e10e      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c74:	2310      	movs	r3, #16
 8001c76:	77fb      	strb	r3, [r7, #31]
 8001c78:	e10b      	b.n	8001e92 <UART_SetConfig+0x346>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <UART_SetConfig+0x2d8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d120      	bne.n	8001cc6 <UART_SetConfig+0x17a>
 8001c84:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c8e:	2b30      	cmp	r3, #48	; 0x30
 8001c90:	d013      	beq.n	8001cba <UART_SetConfig+0x16e>
 8001c92:	2b30      	cmp	r3, #48	; 0x30
 8001c94:	d814      	bhi.n	8001cc0 <UART_SetConfig+0x174>
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d009      	beq.n	8001cae <UART_SetConfig+0x162>
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d810      	bhi.n	8001cc0 <UART_SetConfig+0x174>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <UART_SetConfig+0x15c>
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d006      	beq.n	8001cb4 <UART_SetConfig+0x168>
 8001ca6:	e00b      	b.n	8001cc0 <UART_SetConfig+0x174>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	77fb      	strb	r3, [r7, #31]
 8001cac:	e0f1      	b.n	8001e92 <UART_SetConfig+0x346>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	77fb      	strb	r3, [r7, #31]
 8001cb2:	e0ee      	b.n	8001e92 <UART_SetConfig+0x346>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	77fb      	strb	r3, [r7, #31]
 8001cb8:	e0eb      	b.n	8001e92 <UART_SetConfig+0x346>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	77fb      	strb	r3, [r7, #31]
 8001cbe:	e0e8      	b.n	8001e92 <UART_SetConfig+0x346>
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	77fb      	strb	r3, [r7, #31]
 8001cc4:	e0e5      	b.n	8001e92 <UART_SetConfig+0x346>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a57      	ldr	r2, [pc, #348]	; (8001e28 <UART_SetConfig+0x2dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d120      	bne.n	8001d12 <UART_SetConfig+0x1c6>
 8001cd0:	4b52      	ldr	r3, [pc, #328]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001cda:	2bc0      	cmp	r3, #192	; 0xc0
 8001cdc:	d013      	beq.n	8001d06 <UART_SetConfig+0x1ba>
 8001cde:	2bc0      	cmp	r3, #192	; 0xc0
 8001ce0:	d814      	bhi.n	8001d0c <UART_SetConfig+0x1c0>
 8001ce2:	2b80      	cmp	r3, #128	; 0x80
 8001ce4:	d009      	beq.n	8001cfa <UART_SetConfig+0x1ae>
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d810      	bhi.n	8001d0c <UART_SetConfig+0x1c0>
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <UART_SetConfig+0x1a8>
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d006      	beq.n	8001d00 <UART_SetConfig+0x1b4>
 8001cf2:	e00b      	b.n	8001d0c <UART_SetConfig+0x1c0>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
 8001cf8:	e0cb      	b.n	8001e92 <UART_SetConfig+0x346>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	77fb      	strb	r3, [r7, #31]
 8001cfe:	e0c8      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d00:	2304      	movs	r3, #4
 8001d02:	77fb      	strb	r3, [r7, #31]
 8001d04:	e0c5      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d06:	2308      	movs	r3, #8
 8001d08:	77fb      	strb	r3, [r7, #31]
 8001d0a:	e0c2      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	77fb      	strb	r3, [r7, #31]
 8001d10:	e0bf      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a45      	ldr	r2, [pc, #276]	; (8001e2c <UART_SetConfig+0x2e0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d125      	bne.n	8001d68 <UART_SetConfig+0x21c>
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d2a:	d017      	beq.n	8001d5c <UART_SetConfig+0x210>
 8001d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d30:	d817      	bhi.n	8001d62 <UART_SetConfig+0x216>
 8001d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d36:	d00b      	beq.n	8001d50 <UART_SetConfig+0x204>
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3c:	d811      	bhi.n	8001d62 <UART_SetConfig+0x216>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <UART_SetConfig+0x1fe>
 8001d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d46:	d006      	beq.n	8001d56 <UART_SetConfig+0x20a>
 8001d48:	e00b      	b.n	8001d62 <UART_SetConfig+0x216>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	77fb      	strb	r3, [r7, #31]
 8001d4e:	e0a0      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d50:	2302      	movs	r3, #2
 8001d52:	77fb      	strb	r3, [r7, #31]
 8001d54:	e09d      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d56:	2304      	movs	r3, #4
 8001d58:	77fb      	strb	r3, [r7, #31]
 8001d5a:	e09a      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	77fb      	strb	r3, [r7, #31]
 8001d60:	e097      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d62:	2310      	movs	r3, #16
 8001d64:	77fb      	strb	r3, [r7, #31]
 8001d66:	e094      	b.n	8001e92 <UART_SetConfig+0x346>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a30      	ldr	r2, [pc, #192]	; (8001e30 <UART_SetConfig+0x2e4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d125      	bne.n	8001dbe <UART_SetConfig+0x272>
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d80:	d017      	beq.n	8001db2 <UART_SetConfig+0x266>
 8001d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d86:	d817      	bhi.n	8001db8 <UART_SetConfig+0x26c>
 8001d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d8c:	d00b      	beq.n	8001da6 <UART_SetConfig+0x25a>
 8001d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d92:	d811      	bhi.n	8001db8 <UART_SetConfig+0x26c>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <UART_SetConfig+0x254>
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d006      	beq.n	8001dac <UART_SetConfig+0x260>
 8001d9e:	e00b      	b.n	8001db8 <UART_SetConfig+0x26c>
 8001da0:	2301      	movs	r3, #1
 8001da2:	77fb      	strb	r3, [r7, #31]
 8001da4:	e075      	b.n	8001e92 <UART_SetConfig+0x346>
 8001da6:	2302      	movs	r3, #2
 8001da8:	77fb      	strb	r3, [r7, #31]
 8001daa:	e072      	b.n	8001e92 <UART_SetConfig+0x346>
 8001dac:	2304      	movs	r3, #4
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	e06f      	b.n	8001e92 <UART_SetConfig+0x346>
 8001db2:	2308      	movs	r3, #8
 8001db4:	77fb      	strb	r3, [r7, #31]
 8001db6:	e06c      	b.n	8001e92 <UART_SetConfig+0x346>
 8001db8:	2310      	movs	r3, #16
 8001dba:	77fb      	strb	r3, [r7, #31]
 8001dbc:	e069      	b.n	8001e92 <UART_SetConfig+0x346>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <UART_SetConfig+0x2e8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d137      	bne.n	8001e38 <UART_SetConfig+0x2ec>
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001dd6:	d017      	beq.n	8001e08 <UART_SetConfig+0x2bc>
 8001dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ddc:	d817      	bhi.n	8001e0e <UART_SetConfig+0x2c2>
 8001dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de2:	d00b      	beq.n	8001dfc <UART_SetConfig+0x2b0>
 8001de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de8:	d811      	bhi.n	8001e0e <UART_SetConfig+0x2c2>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <UART_SetConfig+0x2aa>
 8001dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df2:	d006      	beq.n	8001e02 <UART_SetConfig+0x2b6>
 8001df4:	e00b      	b.n	8001e0e <UART_SetConfig+0x2c2>
 8001df6:	2300      	movs	r3, #0
 8001df8:	77fb      	strb	r3, [r7, #31]
 8001dfa:	e04a      	b.n	8001e92 <UART_SetConfig+0x346>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	77fb      	strb	r3, [r7, #31]
 8001e00:	e047      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e02:	2304      	movs	r3, #4
 8001e04:	77fb      	strb	r3, [r7, #31]
 8001e06:	e044      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e08:	2308      	movs	r3, #8
 8001e0a:	77fb      	strb	r3, [r7, #31]
 8001e0c:	e041      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e0e:	2310      	movs	r3, #16
 8001e10:	77fb      	strb	r3, [r7, #31]
 8001e12:	e03e      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e14:	efff69f3 	.word	0xefff69f3
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40004800 	.word	0x40004800
 8001e28:	40004c00 	.word	0x40004c00
 8001e2c:	40005000 	.word	0x40005000
 8001e30:	40011400 	.word	0x40011400
 8001e34:	40007800 	.word	0x40007800
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a71      	ldr	r2, [pc, #452]	; (8002004 <UART_SetConfig+0x4b8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d125      	bne.n	8001e8e <UART_SetConfig+0x342>
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <UART_SetConfig+0x4bc>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e50:	d017      	beq.n	8001e82 <UART_SetConfig+0x336>
 8001e52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e56:	d817      	bhi.n	8001e88 <UART_SetConfig+0x33c>
 8001e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e5c:	d00b      	beq.n	8001e76 <UART_SetConfig+0x32a>
 8001e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e62:	d811      	bhi.n	8001e88 <UART_SetConfig+0x33c>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <UART_SetConfig+0x324>
 8001e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e6c:	d006      	beq.n	8001e7c <UART_SetConfig+0x330>
 8001e6e:	e00b      	b.n	8001e88 <UART_SetConfig+0x33c>
 8001e70:	2300      	movs	r3, #0
 8001e72:	77fb      	strb	r3, [r7, #31]
 8001e74:	e00d      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e76:	2302      	movs	r3, #2
 8001e78:	77fb      	strb	r3, [r7, #31]
 8001e7a:	e00a      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	77fb      	strb	r3, [r7, #31]
 8001e80:	e007      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e82:	2308      	movs	r3, #8
 8001e84:	77fb      	strb	r3, [r7, #31]
 8001e86:	e004      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e88:	2310      	movs	r3, #16
 8001e8a:	77fb      	strb	r3, [r7, #31]
 8001e8c:	e001      	b.n	8001e92 <UART_SetConfig+0x346>
 8001e8e:	2310      	movs	r3, #16
 8001e90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9a:	d15a      	bne.n	8001f52 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8001e9c:	7ffb      	ldrb	r3, [r7, #31]
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d827      	bhi.n	8001ef2 <UART_SetConfig+0x3a6>
 8001ea2:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <UART_SetConfig+0x35c>)
 8001ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea8:	08001ecd 	.word	0x08001ecd
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	08001edd 	.word	0x08001edd
 8001eb4:	08001ef3 	.word	0x08001ef3
 8001eb8:	08001ee3 	.word	0x08001ee3
 8001ebc:	08001ef3 	.word	0x08001ef3
 8001ec0:	08001ef3 	.word	0x08001ef3
 8001ec4:	08001ef3 	.word	0x08001ef3
 8001ec8:	08001eeb 	.word	0x08001eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f7ff fd34 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	61b8      	str	r0, [r7, #24]
        break;
 8001ed2:	e013      	b.n	8001efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001ed4:	f7ff fd44 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8001ed8:	61b8      	str	r0, [r7, #24]
        break;
 8001eda:	e00f      	b.n	8001efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <UART_SetConfig+0x4c0>)
 8001ede:	61bb      	str	r3, [r7, #24]
        break;
 8001ee0:	e00c      	b.n	8001efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ee2:	f7ff fc3b 	bl	800175c <HAL_RCC_GetSysClockFreq>
 8001ee6:	61b8      	str	r0, [r7, #24]
        break;
 8001ee8:	e008      	b.n	8001efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eee:	61bb      	str	r3, [r7, #24]
        break;
 8001ef0:	e004      	b.n	8001efc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8001efa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d074      	beq.n	8001fec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	d916      	bls.n	8001f4c <UART_SetConfig+0x400>
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d212      	bcs.n	8001f4c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f023 030f 	bic.w	r3, r3, #15
 8001f2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	89fa      	ldrh	r2, [r7, #14]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	e04f      	b.n	8001fec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77bb      	strb	r3, [r7, #30]
 8001f50:	e04c      	b.n	8001fec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d828      	bhi.n	8001faa <UART_SetConfig+0x45e>
 8001f58:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <UART_SetConfig+0x414>)
 8001f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5e:	bf00      	nop
 8001f60:	08001f85 	.word	0x08001f85
 8001f64:	08001f8d 	.word	0x08001f8d
 8001f68:	08001f95 	.word	0x08001f95
 8001f6c:	08001fab 	.word	0x08001fab
 8001f70:	08001f9b 	.word	0x08001f9b
 8001f74:	08001fab 	.word	0x08001fab
 8001f78:	08001fab 	.word	0x08001fab
 8001f7c:	08001fab 	.word	0x08001fab
 8001f80:	08001fa3 	.word	0x08001fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f84:	f7ff fcd8 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8001f88:	61b8      	str	r0, [r7, #24]
        break;
 8001f8a:	e013      	b.n	8001fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f8c:	f7ff fce8 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8001f90:	61b8      	str	r0, [r7, #24]
        break;
 8001f92:	e00f      	b.n	8001fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <UART_SetConfig+0x4c0>)
 8001f96:	61bb      	str	r3, [r7, #24]
        break;
 8001f98:	e00c      	b.n	8001fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f9a:	f7ff fbdf 	bl	800175c <HAL_RCC_GetSysClockFreq>
 8001f9e:	61b8      	str	r0, [r7, #24]
        break;
 8001fa0:	e008      	b.n	8001fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa6:	61bb      	str	r3, [r7, #24]
        break;
 8001fa8:	e004      	b.n	8001fb4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8001fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d018      	beq.n	8001fec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	085a      	lsrs	r2, r3, #1
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d909      	bls.n	8001fe8 <UART_SetConfig+0x49c>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d205      	bcs.n	8001fe8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	e001      	b.n	8001fec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40007c00 	.word	0x40007c00
 8002008:	40023800 	.word	0x40023800
 800200c:	00f42400 	.word	0x00f42400

08002010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01a      	beq.n	8002126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800210e:	d10a      	bne.n	8002126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002164:	f7fe fc6c 	bl	8000a40 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b08      	cmp	r3, #8
 8002176:	d10e      	bne.n	8002196 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f82d 	bl	80021e6 <UART_WaitOnFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e023      	b.n	80021de <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d10e      	bne.n	80021c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f817 	bl	80021e6 <UART_WaitOnFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e00d      	b.n	80021de <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b09c      	sub	sp, #112	; 0x70
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f6:	e0a5      	b.n	8002344 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	f000 80a1 	beq.w	8002344 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7fe fc1d 	bl	8000a40 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <UART_WaitOnFlagUntilTimeout+0x32>
 8002212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002214:	2b00      	cmp	r3, #0
 8002216:	d13e      	bne.n	8002296 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800222c:	667b      	str	r3, [r7, #100]	; 0x64
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002238:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800223c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e6      	bne.n	8002218 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3308      	adds	r3, #8
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002254:	e853 3f00 	ldrex	r3, [r3]
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	663b      	str	r3, [r7, #96]	; 0x60
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3308      	adds	r3, #8
 8002268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800226a:	64ba      	str	r2, [r7, #72]	; 0x48
 800226c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002272:	e841 2300 	strex	r3, r2, [r1]
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1e5      	bne.n	800224a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e067      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d04f      	beq.n	8002344 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022b2:	d147      	bne.n	8002344 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	e853 3f00 	ldrex	r3, [r3]
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
 80022de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e4:	e841 2300 	strex	r3, r2, [r1]
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e6      	bne.n	80022be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3308      	adds	r3, #8
 80022f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	e853 3f00 	ldrex	r3, [r3]
 80022fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	66bb      	str	r3, [r7, #104]	; 0x68
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3308      	adds	r3, #8
 800230e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002310:	623a      	str	r2, [r7, #32]
 8002312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002314:	69f9      	ldr	r1, [r7, #28]
 8002316:	6a3a      	ldr	r2, [r7, #32]
 8002318:	e841 2300 	strex	r3, r2, [r1]
 800231c:	61bb      	str	r3, [r7, #24]
   return(result);
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e5      	bne.n	80022f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e010      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4013      	ands	r3, r2
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	429a      	cmp	r2, r3
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	429a      	cmp	r2, r3
 8002360:	f43f af4a 	beq.w	80021f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3770      	adds	r7, #112	; 0x70
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <__libc_init_array>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	4d0d      	ldr	r5, [pc, #52]	; (80023a8 <__libc_init_array+0x38>)
 8002374:	4c0d      	ldr	r4, [pc, #52]	; (80023ac <__libc_init_array+0x3c>)
 8002376:	1b64      	subs	r4, r4, r5
 8002378:	10a4      	asrs	r4, r4, #2
 800237a:	2600      	movs	r6, #0
 800237c:	42a6      	cmp	r6, r4
 800237e:	d109      	bne.n	8002394 <__libc_init_array+0x24>
 8002380:	4d0b      	ldr	r5, [pc, #44]	; (80023b0 <__libc_init_array+0x40>)
 8002382:	4c0c      	ldr	r4, [pc, #48]	; (80023b4 <__libc_init_array+0x44>)
 8002384:	f000 fc5c 	bl	8002c40 <_init>
 8002388:	1b64      	subs	r4, r4, r5
 800238a:	10a4      	asrs	r4, r4, #2
 800238c:	2600      	movs	r6, #0
 800238e:	42a6      	cmp	r6, r4
 8002390:	d105      	bne.n	800239e <__libc_init_array+0x2e>
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	f855 3b04 	ldr.w	r3, [r5], #4
 8002398:	4798      	blx	r3
 800239a:	3601      	adds	r6, #1
 800239c:	e7ee      	b.n	800237c <__libc_init_array+0xc>
 800239e:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a2:	4798      	blx	r3
 80023a4:	3601      	adds	r6, #1
 80023a6:	e7f2      	b.n	800238e <__libc_init_array+0x1e>
 80023a8:	08002cec 	.word	0x08002cec
 80023ac:	08002cec 	.word	0x08002cec
 80023b0:	08002cec 	.word	0x08002cec
 80023b4:	08002cf0 	.word	0x08002cf0

080023b8 <memset>:
 80023b8:	4402      	add	r2, r0
 80023ba:	4603      	mov	r3, r0
 80023bc:	4293      	cmp	r3, r2
 80023be:	d100      	bne.n	80023c2 <memset+0xa>
 80023c0:	4770      	bx	lr
 80023c2:	f803 1b01 	strb.w	r1, [r3], #1
 80023c6:	e7f9      	b.n	80023bc <memset+0x4>

080023c8 <siprintf>:
 80023c8:	b40e      	push	{r1, r2, r3}
 80023ca:	b500      	push	{lr}
 80023cc:	b09c      	sub	sp, #112	; 0x70
 80023ce:	ab1d      	add	r3, sp, #116	; 0x74
 80023d0:	9002      	str	r0, [sp, #8]
 80023d2:	9006      	str	r0, [sp, #24]
 80023d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023d8:	4809      	ldr	r0, [pc, #36]	; (8002400 <siprintf+0x38>)
 80023da:	9107      	str	r1, [sp, #28]
 80023dc:	9104      	str	r1, [sp, #16]
 80023de:	4909      	ldr	r1, [pc, #36]	; (8002404 <siprintf+0x3c>)
 80023e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80023e4:	9105      	str	r1, [sp, #20]
 80023e6:	6800      	ldr	r0, [r0, #0]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	a902      	add	r1, sp, #8
 80023ec:	f000 f868 	bl	80024c0 <_svfiprintf_r>
 80023f0:	9b02      	ldr	r3, [sp, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	b01c      	add	sp, #112	; 0x70
 80023f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80023fc:	b003      	add	sp, #12
 80023fe:	4770      	bx	lr
 8002400:	2000000c 	.word	0x2000000c
 8002404:	ffff0208 	.word	0xffff0208

08002408 <__ssputs_r>:
 8002408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800240c:	688e      	ldr	r6, [r1, #8]
 800240e:	429e      	cmp	r6, r3
 8002410:	4682      	mov	sl, r0
 8002412:	460c      	mov	r4, r1
 8002414:	4690      	mov	r8, r2
 8002416:	461f      	mov	r7, r3
 8002418:	d838      	bhi.n	800248c <__ssputs_r+0x84>
 800241a:	898a      	ldrh	r2, [r1, #12]
 800241c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002420:	d032      	beq.n	8002488 <__ssputs_r+0x80>
 8002422:	6825      	ldr	r5, [r4, #0]
 8002424:	6909      	ldr	r1, [r1, #16]
 8002426:	eba5 0901 	sub.w	r9, r5, r1
 800242a:	6965      	ldr	r5, [r4, #20]
 800242c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002434:	3301      	adds	r3, #1
 8002436:	444b      	add	r3, r9
 8002438:	106d      	asrs	r5, r5, #1
 800243a:	429d      	cmp	r5, r3
 800243c:	bf38      	it	cc
 800243e:	461d      	movcc	r5, r3
 8002440:	0553      	lsls	r3, r2, #21
 8002442:	d531      	bpl.n	80024a8 <__ssputs_r+0xa0>
 8002444:	4629      	mov	r1, r5
 8002446:	f000 fb47 	bl	8002ad8 <_malloc_r>
 800244a:	4606      	mov	r6, r0
 800244c:	b950      	cbnz	r0, 8002464 <__ssputs_r+0x5c>
 800244e:	230c      	movs	r3, #12
 8002450:	f8ca 3000 	str.w	r3, [sl]
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	81a3      	strh	r3, [r4, #12]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002464:	6921      	ldr	r1, [r4, #16]
 8002466:	464a      	mov	r2, r9
 8002468:	f000 fabe 	bl	80029e8 <memcpy>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	6126      	str	r6, [r4, #16]
 800247a:	6165      	str	r5, [r4, #20]
 800247c:	444e      	add	r6, r9
 800247e:	eba5 0509 	sub.w	r5, r5, r9
 8002482:	6026      	str	r6, [r4, #0]
 8002484:	60a5      	str	r5, [r4, #8]
 8002486:	463e      	mov	r6, r7
 8002488:	42be      	cmp	r6, r7
 800248a:	d900      	bls.n	800248e <__ssputs_r+0x86>
 800248c:	463e      	mov	r6, r7
 800248e:	4632      	mov	r2, r6
 8002490:	6820      	ldr	r0, [r4, #0]
 8002492:	4641      	mov	r1, r8
 8002494:	f000 fab6 	bl	8002a04 <memmove>
 8002498:	68a3      	ldr	r3, [r4, #8]
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	1b9b      	subs	r3, r3, r6
 800249e:	4432      	add	r2, r6
 80024a0:	60a3      	str	r3, [r4, #8]
 80024a2:	6022      	str	r2, [r4, #0]
 80024a4:	2000      	movs	r0, #0
 80024a6:	e7db      	b.n	8002460 <__ssputs_r+0x58>
 80024a8:	462a      	mov	r2, r5
 80024aa:	f000 fb6f 	bl	8002b8c <_realloc_r>
 80024ae:	4606      	mov	r6, r0
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d1e1      	bne.n	8002478 <__ssputs_r+0x70>
 80024b4:	6921      	ldr	r1, [r4, #16]
 80024b6:	4650      	mov	r0, sl
 80024b8:	f000 fabe 	bl	8002a38 <_free_r>
 80024bc:	e7c7      	b.n	800244e <__ssputs_r+0x46>
	...

080024c0 <_svfiprintf_r>:
 80024c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	4698      	mov	r8, r3
 80024c6:	898b      	ldrh	r3, [r1, #12]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	b09d      	sub	sp, #116	; 0x74
 80024cc:	4607      	mov	r7, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	d50e      	bpl.n	80024f2 <_svfiprintf_r+0x32>
 80024d4:	690b      	ldr	r3, [r1, #16]
 80024d6:	b963      	cbnz	r3, 80024f2 <_svfiprintf_r+0x32>
 80024d8:	2140      	movs	r1, #64	; 0x40
 80024da:	f000 fafd 	bl	8002ad8 <_malloc_r>
 80024de:	6028      	str	r0, [r5, #0]
 80024e0:	6128      	str	r0, [r5, #16]
 80024e2:	b920      	cbnz	r0, 80024ee <_svfiprintf_r+0x2e>
 80024e4:	230c      	movs	r3, #12
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	e0d1      	b.n	8002692 <_svfiprintf_r+0x1d2>
 80024ee:	2340      	movs	r3, #64	; 0x40
 80024f0:	616b      	str	r3, [r5, #20]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9309      	str	r3, [sp, #36]	; 0x24
 80024f6:	2320      	movs	r3, #32
 80024f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002500:	2330      	movs	r3, #48	; 0x30
 8002502:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80026ac <_svfiprintf_r+0x1ec>
 8002506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800250a:	f04f 0901 	mov.w	r9, #1
 800250e:	4623      	mov	r3, r4
 8002510:	469a      	mov	sl, r3
 8002512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002516:	b10a      	cbz	r2, 800251c <_svfiprintf_r+0x5c>
 8002518:	2a25      	cmp	r2, #37	; 0x25
 800251a:	d1f9      	bne.n	8002510 <_svfiprintf_r+0x50>
 800251c:	ebba 0b04 	subs.w	fp, sl, r4
 8002520:	d00b      	beq.n	800253a <_svfiprintf_r+0x7a>
 8002522:	465b      	mov	r3, fp
 8002524:	4622      	mov	r2, r4
 8002526:	4629      	mov	r1, r5
 8002528:	4638      	mov	r0, r7
 800252a:	f7ff ff6d 	bl	8002408 <__ssputs_r>
 800252e:	3001      	adds	r0, #1
 8002530:	f000 80aa 	beq.w	8002688 <_svfiprintf_r+0x1c8>
 8002534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002536:	445a      	add	r2, fp
 8002538:	9209      	str	r2, [sp, #36]	; 0x24
 800253a:	f89a 3000 	ldrb.w	r3, [sl]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80a2 	beq.w	8002688 <_svfiprintf_r+0x1c8>
 8002544:	2300      	movs	r3, #0
 8002546:	f04f 32ff 	mov.w	r2, #4294967295
 800254a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800254e:	f10a 0a01 	add.w	sl, sl, #1
 8002552:	9304      	str	r3, [sp, #16]
 8002554:	9307      	str	r3, [sp, #28]
 8002556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800255a:	931a      	str	r3, [sp, #104]	; 0x68
 800255c:	4654      	mov	r4, sl
 800255e:	2205      	movs	r2, #5
 8002560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002564:	4851      	ldr	r0, [pc, #324]	; (80026ac <_svfiprintf_r+0x1ec>)
 8002566:	f7fd fe73 	bl	8000250 <memchr>
 800256a:	9a04      	ldr	r2, [sp, #16]
 800256c:	b9d8      	cbnz	r0, 80025a6 <_svfiprintf_r+0xe6>
 800256e:	06d0      	lsls	r0, r2, #27
 8002570:	bf44      	itt	mi
 8002572:	2320      	movmi	r3, #32
 8002574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002578:	0711      	lsls	r1, r2, #28
 800257a:	bf44      	itt	mi
 800257c:	232b      	movmi	r3, #43	; 0x2b
 800257e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002582:	f89a 3000 	ldrb.w	r3, [sl]
 8002586:	2b2a      	cmp	r3, #42	; 0x2a
 8002588:	d015      	beq.n	80025b6 <_svfiprintf_r+0xf6>
 800258a:	9a07      	ldr	r2, [sp, #28]
 800258c:	4654      	mov	r4, sl
 800258e:	2000      	movs	r0, #0
 8002590:	f04f 0c0a 	mov.w	ip, #10
 8002594:	4621      	mov	r1, r4
 8002596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800259a:	3b30      	subs	r3, #48	; 0x30
 800259c:	2b09      	cmp	r3, #9
 800259e:	d94e      	bls.n	800263e <_svfiprintf_r+0x17e>
 80025a0:	b1b0      	cbz	r0, 80025d0 <_svfiprintf_r+0x110>
 80025a2:	9207      	str	r2, [sp, #28]
 80025a4:	e014      	b.n	80025d0 <_svfiprintf_r+0x110>
 80025a6:	eba0 0308 	sub.w	r3, r0, r8
 80025aa:	fa09 f303 	lsl.w	r3, r9, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	9304      	str	r3, [sp, #16]
 80025b2:	46a2      	mov	sl, r4
 80025b4:	e7d2      	b.n	800255c <_svfiprintf_r+0x9c>
 80025b6:	9b03      	ldr	r3, [sp, #12]
 80025b8:	1d19      	adds	r1, r3, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	9103      	str	r1, [sp, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bfbb      	ittet	lt
 80025c2:	425b      	neglt	r3, r3
 80025c4:	f042 0202 	orrlt.w	r2, r2, #2
 80025c8:	9307      	strge	r3, [sp, #28]
 80025ca:	9307      	strlt	r3, [sp, #28]
 80025cc:	bfb8      	it	lt
 80025ce:	9204      	strlt	r2, [sp, #16]
 80025d0:	7823      	ldrb	r3, [r4, #0]
 80025d2:	2b2e      	cmp	r3, #46	; 0x2e
 80025d4:	d10c      	bne.n	80025f0 <_svfiprintf_r+0x130>
 80025d6:	7863      	ldrb	r3, [r4, #1]
 80025d8:	2b2a      	cmp	r3, #42	; 0x2a
 80025da:	d135      	bne.n	8002648 <_svfiprintf_r+0x188>
 80025dc:	9b03      	ldr	r3, [sp, #12]
 80025de:	1d1a      	adds	r2, r3, #4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	9203      	str	r2, [sp, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bfb8      	it	lt
 80025e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80025ec:	3402      	adds	r4, #2
 80025ee:	9305      	str	r3, [sp, #20]
 80025f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80026bc <_svfiprintf_r+0x1fc>
 80025f4:	7821      	ldrb	r1, [r4, #0]
 80025f6:	2203      	movs	r2, #3
 80025f8:	4650      	mov	r0, sl
 80025fa:	f7fd fe29 	bl	8000250 <memchr>
 80025fe:	b140      	cbz	r0, 8002612 <_svfiprintf_r+0x152>
 8002600:	2340      	movs	r3, #64	; 0x40
 8002602:	eba0 000a 	sub.w	r0, r0, sl
 8002606:	fa03 f000 	lsl.w	r0, r3, r0
 800260a:	9b04      	ldr	r3, [sp, #16]
 800260c:	4303      	orrs	r3, r0
 800260e:	3401      	adds	r4, #1
 8002610:	9304      	str	r3, [sp, #16]
 8002612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002616:	4826      	ldr	r0, [pc, #152]	; (80026b0 <_svfiprintf_r+0x1f0>)
 8002618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800261c:	2206      	movs	r2, #6
 800261e:	f7fd fe17 	bl	8000250 <memchr>
 8002622:	2800      	cmp	r0, #0
 8002624:	d038      	beq.n	8002698 <_svfiprintf_r+0x1d8>
 8002626:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <_svfiprintf_r+0x1f4>)
 8002628:	bb1b      	cbnz	r3, 8002672 <_svfiprintf_r+0x1b2>
 800262a:	9b03      	ldr	r3, [sp, #12]
 800262c:	3307      	adds	r3, #7
 800262e:	f023 0307 	bic.w	r3, r3, #7
 8002632:	3308      	adds	r3, #8
 8002634:	9303      	str	r3, [sp, #12]
 8002636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002638:	4433      	add	r3, r6
 800263a:	9309      	str	r3, [sp, #36]	; 0x24
 800263c:	e767      	b.n	800250e <_svfiprintf_r+0x4e>
 800263e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002642:	460c      	mov	r4, r1
 8002644:	2001      	movs	r0, #1
 8002646:	e7a5      	b.n	8002594 <_svfiprintf_r+0xd4>
 8002648:	2300      	movs	r3, #0
 800264a:	3401      	adds	r4, #1
 800264c:	9305      	str	r3, [sp, #20]
 800264e:	4619      	mov	r1, r3
 8002650:	f04f 0c0a 	mov.w	ip, #10
 8002654:	4620      	mov	r0, r4
 8002656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800265a:	3a30      	subs	r2, #48	; 0x30
 800265c:	2a09      	cmp	r2, #9
 800265e:	d903      	bls.n	8002668 <_svfiprintf_r+0x1a8>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0c5      	beq.n	80025f0 <_svfiprintf_r+0x130>
 8002664:	9105      	str	r1, [sp, #20]
 8002666:	e7c3      	b.n	80025f0 <_svfiprintf_r+0x130>
 8002668:	fb0c 2101 	mla	r1, ip, r1, r2
 800266c:	4604      	mov	r4, r0
 800266e:	2301      	movs	r3, #1
 8002670:	e7f0      	b.n	8002654 <_svfiprintf_r+0x194>
 8002672:	ab03      	add	r3, sp, #12
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	462a      	mov	r2, r5
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <_svfiprintf_r+0x1f8>)
 800267a:	a904      	add	r1, sp, #16
 800267c:	4638      	mov	r0, r7
 800267e:	f3af 8000 	nop.w
 8002682:	1c42      	adds	r2, r0, #1
 8002684:	4606      	mov	r6, r0
 8002686:	d1d6      	bne.n	8002636 <_svfiprintf_r+0x176>
 8002688:	89ab      	ldrh	r3, [r5, #12]
 800268a:	065b      	lsls	r3, r3, #25
 800268c:	f53f af2c 	bmi.w	80024e8 <_svfiprintf_r+0x28>
 8002690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002692:	b01d      	add	sp, #116	; 0x74
 8002694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002698:	ab03      	add	r3, sp, #12
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	462a      	mov	r2, r5
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <_svfiprintf_r+0x1f8>)
 80026a0:	a904      	add	r1, sp, #16
 80026a2:	4638      	mov	r0, r7
 80026a4:	f000 f87a 	bl	800279c <_printf_i>
 80026a8:	e7eb      	b.n	8002682 <_svfiprintf_r+0x1c2>
 80026aa:	bf00      	nop
 80026ac:	08002cb0 	.word	0x08002cb0
 80026b0:	08002cba 	.word	0x08002cba
 80026b4:	00000000 	.word	0x00000000
 80026b8:	08002409 	.word	0x08002409
 80026bc:	08002cb6 	.word	0x08002cb6

080026c0 <_printf_common>:
 80026c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026c4:	4616      	mov	r6, r2
 80026c6:	4699      	mov	r9, r3
 80026c8:	688a      	ldr	r2, [r1, #8]
 80026ca:	690b      	ldr	r3, [r1, #16]
 80026cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	bfb8      	it	lt
 80026d4:	4613      	movlt	r3, r2
 80026d6:	6033      	str	r3, [r6, #0]
 80026d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026dc:	4607      	mov	r7, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	b10a      	cbz	r2, 80026e6 <_printf_common+0x26>
 80026e2:	3301      	adds	r3, #1
 80026e4:	6033      	str	r3, [r6, #0]
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	0699      	lsls	r1, r3, #26
 80026ea:	bf42      	ittt	mi
 80026ec:	6833      	ldrmi	r3, [r6, #0]
 80026ee:	3302      	addmi	r3, #2
 80026f0:	6033      	strmi	r3, [r6, #0]
 80026f2:	6825      	ldr	r5, [r4, #0]
 80026f4:	f015 0506 	ands.w	r5, r5, #6
 80026f8:	d106      	bne.n	8002708 <_printf_common+0x48>
 80026fa:	f104 0a19 	add.w	sl, r4, #25
 80026fe:	68e3      	ldr	r3, [r4, #12]
 8002700:	6832      	ldr	r2, [r6, #0]
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	42ab      	cmp	r3, r5
 8002706:	dc26      	bgt.n	8002756 <_printf_common+0x96>
 8002708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800270c:	1e13      	subs	r3, r2, #0
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	bf18      	it	ne
 8002712:	2301      	movne	r3, #1
 8002714:	0692      	lsls	r2, r2, #26
 8002716:	d42b      	bmi.n	8002770 <_printf_common+0xb0>
 8002718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800271c:	4649      	mov	r1, r9
 800271e:	4638      	mov	r0, r7
 8002720:	47c0      	blx	r8
 8002722:	3001      	adds	r0, #1
 8002724:	d01e      	beq.n	8002764 <_printf_common+0xa4>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	68e5      	ldr	r5, [r4, #12]
 800272a:	6832      	ldr	r2, [r6, #0]
 800272c:	f003 0306 	and.w	r3, r3, #6
 8002730:	2b04      	cmp	r3, #4
 8002732:	bf08      	it	eq
 8002734:	1aad      	subeq	r5, r5, r2
 8002736:	68a3      	ldr	r3, [r4, #8]
 8002738:	6922      	ldr	r2, [r4, #16]
 800273a:	bf0c      	ite	eq
 800273c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002740:	2500      	movne	r5, #0
 8002742:	4293      	cmp	r3, r2
 8002744:	bfc4      	itt	gt
 8002746:	1a9b      	subgt	r3, r3, r2
 8002748:	18ed      	addgt	r5, r5, r3
 800274a:	2600      	movs	r6, #0
 800274c:	341a      	adds	r4, #26
 800274e:	42b5      	cmp	r5, r6
 8002750:	d11a      	bne.n	8002788 <_printf_common+0xc8>
 8002752:	2000      	movs	r0, #0
 8002754:	e008      	b.n	8002768 <_printf_common+0xa8>
 8002756:	2301      	movs	r3, #1
 8002758:	4652      	mov	r2, sl
 800275a:	4649      	mov	r1, r9
 800275c:	4638      	mov	r0, r7
 800275e:	47c0      	blx	r8
 8002760:	3001      	adds	r0, #1
 8002762:	d103      	bne.n	800276c <_printf_common+0xac>
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800276c:	3501      	adds	r5, #1
 800276e:	e7c6      	b.n	80026fe <_printf_common+0x3e>
 8002770:	18e1      	adds	r1, r4, r3
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	2030      	movs	r0, #48	; 0x30
 8002776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800277a:	4422      	add	r2, r4
 800277c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002784:	3302      	adds	r3, #2
 8002786:	e7c7      	b.n	8002718 <_printf_common+0x58>
 8002788:	2301      	movs	r3, #1
 800278a:	4622      	mov	r2, r4
 800278c:	4649      	mov	r1, r9
 800278e:	4638      	mov	r0, r7
 8002790:	47c0      	blx	r8
 8002792:	3001      	adds	r0, #1
 8002794:	d0e6      	beq.n	8002764 <_printf_common+0xa4>
 8002796:	3601      	adds	r6, #1
 8002798:	e7d9      	b.n	800274e <_printf_common+0x8e>
	...

0800279c <_printf_i>:
 800279c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027a0:	460c      	mov	r4, r1
 80027a2:	4691      	mov	r9, r2
 80027a4:	7e27      	ldrb	r7, [r4, #24]
 80027a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80027a8:	2f78      	cmp	r7, #120	; 0x78
 80027aa:	4680      	mov	r8, r0
 80027ac:	469a      	mov	sl, r3
 80027ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027b2:	d807      	bhi.n	80027c4 <_printf_i+0x28>
 80027b4:	2f62      	cmp	r7, #98	; 0x62
 80027b6:	d80a      	bhi.n	80027ce <_printf_i+0x32>
 80027b8:	2f00      	cmp	r7, #0
 80027ba:	f000 80d8 	beq.w	800296e <_printf_i+0x1d2>
 80027be:	2f58      	cmp	r7, #88	; 0x58
 80027c0:	f000 80a3 	beq.w	800290a <_printf_i+0x16e>
 80027c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80027c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027cc:	e03a      	b.n	8002844 <_printf_i+0xa8>
 80027ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027d2:	2b15      	cmp	r3, #21
 80027d4:	d8f6      	bhi.n	80027c4 <_printf_i+0x28>
 80027d6:	a001      	add	r0, pc, #4	; (adr r0, 80027dc <_printf_i+0x40>)
 80027d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80027dc:	08002835 	.word	0x08002835
 80027e0:	08002849 	.word	0x08002849
 80027e4:	080027c5 	.word	0x080027c5
 80027e8:	080027c5 	.word	0x080027c5
 80027ec:	080027c5 	.word	0x080027c5
 80027f0:	080027c5 	.word	0x080027c5
 80027f4:	08002849 	.word	0x08002849
 80027f8:	080027c5 	.word	0x080027c5
 80027fc:	080027c5 	.word	0x080027c5
 8002800:	080027c5 	.word	0x080027c5
 8002804:	080027c5 	.word	0x080027c5
 8002808:	08002955 	.word	0x08002955
 800280c:	08002879 	.word	0x08002879
 8002810:	08002937 	.word	0x08002937
 8002814:	080027c5 	.word	0x080027c5
 8002818:	080027c5 	.word	0x080027c5
 800281c:	08002977 	.word	0x08002977
 8002820:	080027c5 	.word	0x080027c5
 8002824:	08002879 	.word	0x08002879
 8002828:	080027c5 	.word	0x080027c5
 800282c:	080027c5 	.word	0x080027c5
 8002830:	0800293f 	.word	0x0800293f
 8002834:	680b      	ldr	r3, [r1, #0]
 8002836:	1d1a      	adds	r2, r3, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	600a      	str	r2, [r1, #0]
 800283c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002844:	2301      	movs	r3, #1
 8002846:	e0a3      	b.n	8002990 <_printf_i+0x1f4>
 8002848:	6825      	ldr	r5, [r4, #0]
 800284a:	6808      	ldr	r0, [r1, #0]
 800284c:	062e      	lsls	r6, r5, #24
 800284e:	f100 0304 	add.w	r3, r0, #4
 8002852:	d50a      	bpl.n	800286a <_printf_i+0xce>
 8002854:	6805      	ldr	r5, [r0, #0]
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	2d00      	cmp	r5, #0
 800285a:	da03      	bge.n	8002864 <_printf_i+0xc8>
 800285c:	232d      	movs	r3, #45	; 0x2d
 800285e:	426d      	negs	r5, r5
 8002860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002864:	485e      	ldr	r0, [pc, #376]	; (80029e0 <_printf_i+0x244>)
 8002866:	230a      	movs	r3, #10
 8002868:	e019      	b.n	800289e <_printf_i+0x102>
 800286a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800286e:	6805      	ldr	r5, [r0, #0]
 8002870:	600b      	str	r3, [r1, #0]
 8002872:	bf18      	it	ne
 8002874:	b22d      	sxthne	r5, r5
 8002876:	e7ef      	b.n	8002858 <_printf_i+0xbc>
 8002878:	680b      	ldr	r3, [r1, #0]
 800287a:	6825      	ldr	r5, [r4, #0]
 800287c:	1d18      	adds	r0, r3, #4
 800287e:	6008      	str	r0, [r1, #0]
 8002880:	0628      	lsls	r0, r5, #24
 8002882:	d501      	bpl.n	8002888 <_printf_i+0xec>
 8002884:	681d      	ldr	r5, [r3, #0]
 8002886:	e002      	b.n	800288e <_printf_i+0xf2>
 8002888:	0669      	lsls	r1, r5, #25
 800288a:	d5fb      	bpl.n	8002884 <_printf_i+0xe8>
 800288c:	881d      	ldrh	r5, [r3, #0]
 800288e:	4854      	ldr	r0, [pc, #336]	; (80029e0 <_printf_i+0x244>)
 8002890:	2f6f      	cmp	r7, #111	; 0x6f
 8002892:	bf0c      	ite	eq
 8002894:	2308      	moveq	r3, #8
 8002896:	230a      	movne	r3, #10
 8002898:	2100      	movs	r1, #0
 800289a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800289e:	6866      	ldr	r6, [r4, #4]
 80028a0:	60a6      	str	r6, [r4, #8]
 80028a2:	2e00      	cmp	r6, #0
 80028a4:	bfa2      	ittt	ge
 80028a6:	6821      	ldrge	r1, [r4, #0]
 80028a8:	f021 0104 	bicge.w	r1, r1, #4
 80028ac:	6021      	strge	r1, [r4, #0]
 80028ae:	b90d      	cbnz	r5, 80028b4 <_printf_i+0x118>
 80028b0:	2e00      	cmp	r6, #0
 80028b2:	d04d      	beq.n	8002950 <_printf_i+0x1b4>
 80028b4:	4616      	mov	r6, r2
 80028b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80028ba:	fb03 5711 	mls	r7, r3, r1, r5
 80028be:	5dc7      	ldrb	r7, [r0, r7]
 80028c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028c4:	462f      	mov	r7, r5
 80028c6:	42bb      	cmp	r3, r7
 80028c8:	460d      	mov	r5, r1
 80028ca:	d9f4      	bls.n	80028b6 <_printf_i+0x11a>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d10b      	bne.n	80028e8 <_printf_i+0x14c>
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	07df      	lsls	r7, r3, #31
 80028d4:	d508      	bpl.n	80028e8 <_printf_i+0x14c>
 80028d6:	6923      	ldr	r3, [r4, #16]
 80028d8:	6861      	ldr	r1, [r4, #4]
 80028da:	4299      	cmp	r1, r3
 80028dc:	bfde      	ittt	le
 80028de:	2330      	movle	r3, #48	; 0x30
 80028e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028e8:	1b92      	subs	r2, r2, r6
 80028ea:	6122      	str	r2, [r4, #16]
 80028ec:	f8cd a000 	str.w	sl, [sp]
 80028f0:	464b      	mov	r3, r9
 80028f2:	aa03      	add	r2, sp, #12
 80028f4:	4621      	mov	r1, r4
 80028f6:	4640      	mov	r0, r8
 80028f8:	f7ff fee2 	bl	80026c0 <_printf_common>
 80028fc:	3001      	adds	r0, #1
 80028fe:	d14c      	bne.n	800299a <_printf_i+0x1fe>
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	b004      	add	sp, #16
 8002906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800290a:	4835      	ldr	r0, [pc, #212]	; (80029e0 <_printf_i+0x244>)
 800290c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	680e      	ldr	r6, [r1, #0]
 8002914:	061f      	lsls	r7, r3, #24
 8002916:	f856 5b04 	ldr.w	r5, [r6], #4
 800291a:	600e      	str	r6, [r1, #0]
 800291c:	d514      	bpl.n	8002948 <_printf_i+0x1ac>
 800291e:	07d9      	lsls	r1, r3, #31
 8002920:	bf44      	itt	mi
 8002922:	f043 0320 	orrmi.w	r3, r3, #32
 8002926:	6023      	strmi	r3, [r4, #0]
 8002928:	b91d      	cbnz	r5, 8002932 <_printf_i+0x196>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	f023 0320 	bic.w	r3, r3, #32
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	2310      	movs	r3, #16
 8002934:	e7b0      	b.n	8002898 <_printf_i+0xfc>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	f043 0320 	orr.w	r3, r3, #32
 800293c:	6023      	str	r3, [r4, #0]
 800293e:	2378      	movs	r3, #120	; 0x78
 8002940:	4828      	ldr	r0, [pc, #160]	; (80029e4 <_printf_i+0x248>)
 8002942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002946:	e7e3      	b.n	8002910 <_printf_i+0x174>
 8002948:	065e      	lsls	r6, r3, #25
 800294a:	bf48      	it	mi
 800294c:	b2ad      	uxthmi	r5, r5
 800294e:	e7e6      	b.n	800291e <_printf_i+0x182>
 8002950:	4616      	mov	r6, r2
 8002952:	e7bb      	b.n	80028cc <_printf_i+0x130>
 8002954:	680b      	ldr	r3, [r1, #0]
 8002956:	6826      	ldr	r6, [r4, #0]
 8002958:	6960      	ldr	r0, [r4, #20]
 800295a:	1d1d      	adds	r5, r3, #4
 800295c:	600d      	str	r5, [r1, #0]
 800295e:	0635      	lsls	r5, r6, #24
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	d501      	bpl.n	8002968 <_printf_i+0x1cc>
 8002964:	6018      	str	r0, [r3, #0]
 8002966:	e002      	b.n	800296e <_printf_i+0x1d2>
 8002968:	0671      	lsls	r1, r6, #25
 800296a:	d5fb      	bpl.n	8002964 <_printf_i+0x1c8>
 800296c:	8018      	strh	r0, [r3, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	6123      	str	r3, [r4, #16]
 8002972:	4616      	mov	r6, r2
 8002974:	e7ba      	b.n	80028ec <_printf_i+0x150>
 8002976:	680b      	ldr	r3, [r1, #0]
 8002978:	1d1a      	adds	r2, r3, #4
 800297a:	600a      	str	r2, [r1, #0]
 800297c:	681e      	ldr	r6, [r3, #0]
 800297e:	6862      	ldr	r2, [r4, #4]
 8002980:	2100      	movs	r1, #0
 8002982:	4630      	mov	r0, r6
 8002984:	f7fd fc64 	bl	8000250 <memchr>
 8002988:	b108      	cbz	r0, 800298e <_printf_i+0x1f2>
 800298a:	1b80      	subs	r0, r0, r6
 800298c:	6060      	str	r0, [r4, #4]
 800298e:	6863      	ldr	r3, [r4, #4]
 8002990:	6123      	str	r3, [r4, #16]
 8002992:	2300      	movs	r3, #0
 8002994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002998:	e7a8      	b.n	80028ec <_printf_i+0x150>
 800299a:	6923      	ldr	r3, [r4, #16]
 800299c:	4632      	mov	r2, r6
 800299e:	4649      	mov	r1, r9
 80029a0:	4640      	mov	r0, r8
 80029a2:	47d0      	blx	sl
 80029a4:	3001      	adds	r0, #1
 80029a6:	d0ab      	beq.n	8002900 <_printf_i+0x164>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	079b      	lsls	r3, r3, #30
 80029ac:	d413      	bmi.n	80029d6 <_printf_i+0x23a>
 80029ae:	68e0      	ldr	r0, [r4, #12]
 80029b0:	9b03      	ldr	r3, [sp, #12]
 80029b2:	4298      	cmp	r0, r3
 80029b4:	bfb8      	it	lt
 80029b6:	4618      	movlt	r0, r3
 80029b8:	e7a4      	b.n	8002904 <_printf_i+0x168>
 80029ba:	2301      	movs	r3, #1
 80029bc:	4632      	mov	r2, r6
 80029be:	4649      	mov	r1, r9
 80029c0:	4640      	mov	r0, r8
 80029c2:	47d0      	blx	sl
 80029c4:	3001      	adds	r0, #1
 80029c6:	d09b      	beq.n	8002900 <_printf_i+0x164>
 80029c8:	3501      	adds	r5, #1
 80029ca:	68e3      	ldr	r3, [r4, #12]
 80029cc:	9903      	ldr	r1, [sp, #12]
 80029ce:	1a5b      	subs	r3, r3, r1
 80029d0:	42ab      	cmp	r3, r5
 80029d2:	dcf2      	bgt.n	80029ba <_printf_i+0x21e>
 80029d4:	e7eb      	b.n	80029ae <_printf_i+0x212>
 80029d6:	2500      	movs	r5, #0
 80029d8:	f104 0619 	add.w	r6, r4, #25
 80029dc:	e7f5      	b.n	80029ca <_printf_i+0x22e>
 80029de:	bf00      	nop
 80029e0:	08002cc1 	.word	0x08002cc1
 80029e4:	08002cd2 	.word	0x08002cd2

080029e8 <memcpy>:
 80029e8:	440a      	add	r2, r1
 80029ea:	4291      	cmp	r1, r2
 80029ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80029f0:	d100      	bne.n	80029f4 <memcpy+0xc>
 80029f2:	4770      	bx	lr
 80029f4:	b510      	push	{r4, lr}
 80029f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029fe:	4291      	cmp	r1, r2
 8002a00:	d1f9      	bne.n	80029f6 <memcpy+0xe>
 8002a02:	bd10      	pop	{r4, pc}

08002a04 <memmove>:
 8002a04:	4288      	cmp	r0, r1
 8002a06:	b510      	push	{r4, lr}
 8002a08:	eb01 0402 	add.w	r4, r1, r2
 8002a0c:	d902      	bls.n	8002a14 <memmove+0x10>
 8002a0e:	4284      	cmp	r4, r0
 8002a10:	4623      	mov	r3, r4
 8002a12:	d807      	bhi.n	8002a24 <memmove+0x20>
 8002a14:	1e43      	subs	r3, r0, #1
 8002a16:	42a1      	cmp	r1, r4
 8002a18:	d008      	beq.n	8002a2c <memmove+0x28>
 8002a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a22:	e7f8      	b.n	8002a16 <memmove+0x12>
 8002a24:	4402      	add	r2, r0
 8002a26:	4601      	mov	r1, r0
 8002a28:	428a      	cmp	r2, r1
 8002a2a:	d100      	bne.n	8002a2e <memmove+0x2a>
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a36:	e7f7      	b.n	8002a28 <memmove+0x24>

08002a38 <_free_r>:
 8002a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a3a:	2900      	cmp	r1, #0
 8002a3c:	d048      	beq.n	8002ad0 <_free_r+0x98>
 8002a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a42:	9001      	str	r0, [sp, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f1a1 0404 	sub.w	r4, r1, #4
 8002a4a:	bfb8      	it	lt
 8002a4c:	18e4      	addlt	r4, r4, r3
 8002a4e:	f000 f8d3 	bl	8002bf8 <__malloc_lock>
 8002a52:	4a20      	ldr	r2, [pc, #128]	; (8002ad4 <_free_r+0x9c>)
 8002a54:	9801      	ldr	r0, [sp, #4]
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	4615      	mov	r5, r2
 8002a5a:	b933      	cbnz	r3, 8002a6a <_free_r+0x32>
 8002a5c:	6063      	str	r3, [r4, #4]
 8002a5e:	6014      	str	r4, [r2, #0]
 8002a60:	b003      	add	sp, #12
 8002a62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a66:	f000 b8cd 	b.w	8002c04 <__malloc_unlock>
 8002a6a:	42a3      	cmp	r3, r4
 8002a6c:	d90b      	bls.n	8002a86 <_free_r+0x4e>
 8002a6e:	6821      	ldr	r1, [r4, #0]
 8002a70:	1862      	adds	r2, r4, r1
 8002a72:	4293      	cmp	r3, r2
 8002a74:	bf04      	itt	eq
 8002a76:	681a      	ldreq	r2, [r3, #0]
 8002a78:	685b      	ldreq	r3, [r3, #4]
 8002a7a:	6063      	str	r3, [r4, #4]
 8002a7c:	bf04      	itt	eq
 8002a7e:	1852      	addeq	r2, r2, r1
 8002a80:	6022      	streq	r2, [r4, #0]
 8002a82:	602c      	str	r4, [r5, #0]
 8002a84:	e7ec      	b.n	8002a60 <_free_r+0x28>
 8002a86:	461a      	mov	r2, r3
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	b10b      	cbz	r3, 8002a90 <_free_r+0x58>
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	d9fa      	bls.n	8002a86 <_free_r+0x4e>
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	1855      	adds	r5, r2, r1
 8002a94:	42a5      	cmp	r5, r4
 8002a96:	d10b      	bne.n	8002ab0 <_free_r+0x78>
 8002a98:	6824      	ldr	r4, [r4, #0]
 8002a9a:	4421      	add	r1, r4
 8002a9c:	1854      	adds	r4, r2, r1
 8002a9e:	42a3      	cmp	r3, r4
 8002aa0:	6011      	str	r1, [r2, #0]
 8002aa2:	d1dd      	bne.n	8002a60 <_free_r+0x28>
 8002aa4:	681c      	ldr	r4, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	6053      	str	r3, [r2, #4]
 8002aaa:	4421      	add	r1, r4
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	e7d7      	b.n	8002a60 <_free_r+0x28>
 8002ab0:	d902      	bls.n	8002ab8 <_free_r+0x80>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	6003      	str	r3, [r0, #0]
 8002ab6:	e7d3      	b.n	8002a60 <_free_r+0x28>
 8002ab8:	6825      	ldr	r5, [r4, #0]
 8002aba:	1961      	adds	r1, r4, r5
 8002abc:	428b      	cmp	r3, r1
 8002abe:	bf04      	itt	eq
 8002ac0:	6819      	ldreq	r1, [r3, #0]
 8002ac2:	685b      	ldreq	r3, [r3, #4]
 8002ac4:	6063      	str	r3, [r4, #4]
 8002ac6:	bf04      	itt	eq
 8002ac8:	1949      	addeq	r1, r1, r5
 8002aca:	6021      	streq	r1, [r4, #0]
 8002acc:	6054      	str	r4, [r2, #4]
 8002ace:	e7c7      	b.n	8002a60 <_free_r+0x28>
 8002ad0:	b003      	add	sp, #12
 8002ad2:	bd30      	pop	{r4, r5, pc}
 8002ad4:	20000110 	.word	0x20000110

08002ad8 <_malloc_r>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	1ccd      	adds	r5, r1, #3
 8002adc:	f025 0503 	bic.w	r5, r5, #3
 8002ae0:	3508      	adds	r5, #8
 8002ae2:	2d0c      	cmp	r5, #12
 8002ae4:	bf38      	it	cc
 8002ae6:	250c      	movcc	r5, #12
 8002ae8:	2d00      	cmp	r5, #0
 8002aea:	4606      	mov	r6, r0
 8002aec:	db01      	blt.n	8002af2 <_malloc_r+0x1a>
 8002aee:	42a9      	cmp	r1, r5
 8002af0:	d903      	bls.n	8002afa <_malloc_r+0x22>
 8002af2:	230c      	movs	r3, #12
 8002af4:	6033      	str	r3, [r6, #0]
 8002af6:	2000      	movs	r0, #0
 8002af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afa:	f000 f87d 	bl	8002bf8 <__malloc_lock>
 8002afe:	4921      	ldr	r1, [pc, #132]	; (8002b84 <_malloc_r+0xac>)
 8002b00:	680a      	ldr	r2, [r1, #0]
 8002b02:	4614      	mov	r4, r2
 8002b04:	b99c      	cbnz	r4, 8002b2e <_malloc_r+0x56>
 8002b06:	4f20      	ldr	r7, [pc, #128]	; (8002b88 <_malloc_r+0xb0>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b923      	cbnz	r3, 8002b16 <_malloc_r+0x3e>
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f000 f862 	bl	8002bd8 <_sbrk_r>
 8002b14:	6038      	str	r0, [r7, #0]
 8002b16:	4629      	mov	r1, r5
 8002b18:	4630      	mov	r0, r6
 8002b1a:	f000 f85d 	bl	8002bd8 <_sbrk_r>
 8002b1e:	1c43      	adds	r3, r0, #1
 8002b20:	d123      	bne.n	8002b6a <_malloc_r+0x92>
 8002b22:	230c      	movs	r3, #12
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	4630      	mov	r0, r6
 8002b28:	f000 f86c 	bl	8002c04 <__malloc_unlock>
 8002b2c:	e7e3      	b.n	8002af6 <_malloc_r+0x1e>
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	1b5b      	subs	r3, r3, r5
 8002b32:	d417      	bmi.n	8002b64 <_malloc_r+0x8c>
 8002b34:	2b0b      	cmp	r3, #11
 8002b36:	d903      	bls.n	8002b40 <_malloc_r+0x68>
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	441c      	add	r4, r3
 8002b3c:	6025      	str	r5, [r4, #0]
 8002b3e:	e004      	b.n	8002b4a <_malloc_r+0x72>
 8002b40:	6863      	ldr	r3, [r4, #4]
 8002b42:	42a2      	cmp	r2, r4
 8002b44:	bf0c      	ite	eq
 8002b46:	600b      	streq	r3, [r1, #0]
 8002b48:	6053      	strne	r3, [r2, #4]
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f000 f85a 	bl	8002c04 <__malloc_unlock>
 8002b50:	f104 000b 	add.w	r0, r4, #11
 8002b54:	1d23      	adds	r3, r4, #4
 8002b56:	f020 0007 	bic.w	r0, r0, #7
 8002b5a:	1ac2      	subs	r2, r0, r3
 8002b5c:	d0cc      	beq.n	8002af8 <_malloc_r+0x20>
 8002b5e:	1a1b      	subs	r3, r3, r0
 8002b60:	50a3      	str	r3, [r4, r2]
 8002b62:	e7c9      	b.n	8002af8 <_malloc_r+0x20>
 8002b64:	4622      	mov	r2, r4
 8002b66:	6864      	ldr	r4, [r4, #4]
 8002b68:	e7cc      	b.n	8002b04 <_malloc_r+0x2c>
 8002b6a:	1cc4      	adds	r4, r0, #3
 8002b6c:	f024 0403 	bic.w	r4, r4, #3
 8002b70:	42a0      	cmp	r0, r4
 8002b72:	d0e3      	beq.n	8002b3c <_malloc_r+0x64>
 8002b74:	1a21      	subs	r1, r4, r0
 8002b76:	4630      	mov	r0, r6
 8002b78:	f000 f82e 	bl	8002bd8 <_sbrk_r>
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	d1dd      	bne.n	8002b3c <_malloc_r+0x64>
 8002b80:	e7cf      	b.n	8002b22 <_malloc_r+0x4a>
 8002b82:	bf00      	nop
 8002b84:	20000110 	.word	0x20000110
 8002b88:	20000114 	.word	0x20000114

08002b8c <_realloc_r>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	4607      	mov	r7, r0
 8002b90:	4614      	mov	r4, r2
 8002b92:	460e      	mov	r6, r1
 8002b94:	b921      	cbnz	r1, 8002ba0 <_realloc_r+0x14>
 8002b96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	f7ff bf9c 	b.w	8002ad8 <_malloc_r>
 8002ba0:	b922      	cbnz	r2, 8002bac <_realloc_r+0x20>
 8002ba2:	f7ff ff49 	bl	8002a38 <_free_r>
 8002ba6:	4625      	mov	r5, r4
 8002ba8:	4628      	mov	r0, r5
 8002baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bac:	f000 f830 	bl	8002c10 <_malloc_usable_size_r>
 8002bb0:	42a0      	cmp	r0, r4
 8002bb2:	d20f      	bcs.n	8002bd4 <_realloc_r+0x48>
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	f7ff ff8e 	bl	8002ad8 <_malloc_r>
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d0f2      	beq.n	8002ba8 <_realloc_r+0x1c>
 8002bc2:	4631      	mov	r1, r6
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	f7ff ff0f 	bl	80029e8 <memcpy>
 8002bca:	4631      	mov	r1, r6
 8002bcc:	4638      	mov	r0, r7
 8002bce:	f7ff ff33 	bl	8002a38 <_free_r>
 8002bd2:	e7e9      	b.n	8002ba8 <_realloc_r+0x1c>
 8002bd4:	4635      	mov	r5, r6
 8002bd6:	e7e7      	b.n	8002ba8 <_realloc_r+0x1c>

08002bd8 <_sbrk_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4d06      	ldr	r5, [pc, #24]	; (8002bf4 <_sbrk_r+0x1c>)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4604      	mov	r4, r0
 8002be0:	4608      	mov	r0, r1
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	f000 f81e 	bl	8002c24 <_sbrk>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_sbrk_r+0x1a>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_sbrk_r+0x1a>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	20000120 	.word	0x20000120

08002bf8 <__malloc_lock>:
 8002bf8:	4801      	ldr	r0, [pc, #4]	; (8002c00 <__malloc_lock+0x8>)
 8002bfa:	f000 b811 	b.w	8002c20 <__retarget_lock_acquire_recursive>
 8002bfe:	bf00      	nop
 8002c00:	20000128 	.word	0x20000128

08002c04 <__malloc_unlock>:
 8002c04:	4801      	ldr	r0, [pc, #4]	; (8002c0c <__malloc_unlock+0x8>)
 8002c06:	f000 b80c 	b.w	8002c22 <__retarget_lock_release_recursive>
 8002c0a:	bf00      	nop
 8002c0c:	20000128 	.word	0x20000128

08002c10 <_malloc_usable_size_r>:
 8002c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c14:	1f18      	subs	r0, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bfbc      	itt	lt
 8002c1a:	580b      	ldrlt	r3, [r1, r0]
 8002c1c:	18c0      	addlt	r0, r0, r3
 8002c1e:	4770      	bx	lr

08002c20 <__retarget_lock_acquire_recursive>:
 8002c20:	4770      	bx	lr

08002c22 <__retarget_lock_release_recursive>:
 8002c22:	4770      	bx	lr

08002c24 <_sbrk>:
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <_sbrk+0x14>)
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	4602      	mov	r2, r0
 8002c2a:	b909      	cbnz	r1, 8002c30 <_sbrk+0xc>
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <_sbrk+0x18>)
 8002c2e:	6019      	str	r1, [r3, #0]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	4402      	add	r2, r0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	4770      	bx	lr
 8002c38:	20000118 	.word	0x20000118
 8002c3c:	20000130 	.word	0x20000130

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
