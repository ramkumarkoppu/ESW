
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001ccc  08001ccc  00011ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cec  08001cec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cf4  08001cf4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08001d08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001d08  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a198  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013d2  00000000  00000000  0002a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289a5  00000000  00000000  0002c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000870e  00000000  00000000  00054b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a57  00000000  00000000  0005d213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ec6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001808  00000000  00000000  0014ecc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001cb4 	.word	0x08001cb4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001cb4 	.word	0x08001cb4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000544:	f000 f9c6 	bl	80008d4 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 8000548:	f000 faf5 	bl	8000b36 <HAL_SYSTICK_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <main>:
static void Error_Handler( void );

static inline char convert_to_Upper(char c);

int main( void )
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b093      	sub	sp, #76	; 0x4c
 8000554:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000556:	f000 f980 	bl	800085a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800055a:	f000 f885 	bl	8000668 <_ZL18SystemClock_Configv>

	/* Configure the UART for debug console */
	UART3_Init();
 800055e:	f000 f88b 	bl	8000678 <_ZL10UART3_Initv>

	const char *pMsg = "Hello, how are you?\r";
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <main+0x110>)
 8000564:	643b      	str	r3, [r7, #64]	; 0x40
	if ( HAL_UART_Transmit( &huart3, (const std::uint8_t *)pMsg, std::strlen(pMsg), HAL_MAX_DELAY ) != HAL_OK )
 8000566:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000568:	f7ff fe66 	bl	8000238 <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000576:	483b      	ldr	r0, [pc, #236]	; (8000664 <main+0x114>)
 8000578:	f000 fdfa 	bl	8001170 <HAL_UART_Transmit>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf14      	ite	ne
 8000582:	2301      	movne	r3, #1
 8000584:	2300      	moveq	r3, #0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <main+0x40>
	{
		// Error in Transmission.
		Error_Handler();
 800058c:	f000 f8bf 	bl	800070e <_ZL13Error_Handlerv>
	}

	char recv_data[64]{0};
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	223c      	movs	r2, #60	; 0x3c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fb82 	bl	8001ca4 <memset>
	std::uint8_t cnt{0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	for ( ; cnt < ( sizeof(recv_data) / sizeof(recv_data[0]) ); cnt++)
 80005a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005aa:	2b3f      	cmp	r3, #63	; 0x3f
 80005ac:	d837      	bhi.n	800061e <main+0xce>
	{
		if ( HAL_UART_Receive(&huart3, (std::uint8_t *)&recv_data[cnt], 1, HAL_MAX_DELAY) != HAL_OK )
 80005ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005b2:	463a      	mov	r2, r7
 80005b4:	18d1      	adds	r1, r2, r3
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2201      	movs	r2, #1
 80005bc:	4829      	ldr	r0, [pc, #164]	; (8000664 <main+0x114>)
 80005be:	f000 fe6a 	bl	8001296 <HAL_UART_Receive>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf14      	ite	ne
 80005c8:	2301      	movne	r3, #1
 80005ca:	2300      	moveq	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <main+0x88>
		{
			// Error in Reception.
			Error_Handler();
 80005d2:	f000 f89c 	bl	800070e <_ZL13Error_Handlerv>
 80005d6:	e012      	b.n	80005fe <main+0xae>
		}
		else
		{
			recv_data[cnt] = convert_to_Upper( recv_data[cnt] );
 80005d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80005e0:	4413      	add	r3, r2
 80005e2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80005e6:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f878 	bl	80006e0 <_ZL16convert_to_Upperc>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005f8:	4423      	add	r3, r4
 80005fa:	f803 2c48 	strb.w	r2, [r3, #-72]
		}

		if (recv_data[cnt] == '\r')
 80005fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000602:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000606:	4413      	add	r3, r2
 8000608:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800060c:	2b0d      	cmp	r3, #13
 800060e:	d005      	beq.n	800061c <main+0xcc>
	for ( ; cnt < ( sizeof(recv_data) / sizeof(recv_data[0]) ); cnt++)
 8000610:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000614:	3301      	adds	r3, #1
 8000616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800061a:	e7c4      	b.n	80005a6 <main+0x56>
		{
			break;
 800061c:	bf00      	nop
		}
	}
	cnt++;
 800061e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000622:	3301      	adds	r3, #1
 8000624:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	recv_data[cnt] = '\n';
 8000628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800062c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000630:	4413      	add	r3, r2
 8000632:	220a      	movs	r2, #10
 8000634:	f803 2c48 	strb.w	r2, [r3, #-72]

	if ( HAL_UART_Transmit( &huart3, (const std::uint8_t *)recv_data, cnt, HAL_MAX_DELAY ) != HAL_OK )
 8000638:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800063c:	b29a      	uxth	r2, r3
 800063e:	4639      	mov	r1, r7
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <main+0x114>)
 8000646:	f000 fd93 	bl	8001170 <HAL_UART_Transmit>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0x10e>
	{
		// Error in Transmission.
		Error_Handler();
 800065a:	f000 f858 	bl	800070e <_ZL13Error_Handlerv>
	}

	while(true)
 800065e:	e7fe      	b.n	800065e <main+0x10e>
 8000660:	08001ccc 	.word	0x08001ccc
 8000664:	20000028 	.word	0x20000028

08000668 <_ZL18SystemClock_Configv>:

	return 0;
}

static void SystemClock_Config( void )
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	/* UART High level initilization */
	huart3.Instance = USART3;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <_ZL10UART3_Initv+0x64>)
 8000680:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4807      	ldr	r0, [pc, #28]	; (80006d8 <_ZL10UART3_Initv+0x60>)
 80006bc:	f000 fd0a 	bl	80010d4 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf14      	ite	ne
 80006c6:	2301      	movne	r3, #1
 80006c8:	2300      	moveq	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <_ZL10UART3_Initv+0x5c>
	{
		// Initialization Error.
		Error_Handler();
 80006d0:	f000 f81d 	bl	800070e <_ZL13Error_Handlerv>
	}
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000028 	.word	0x20000028
 80006dc:	40004800 	.word	0x40004800

080006e0 <_ZL16convert_to_Upperc>:

static inline char convert_to_Upper(char c)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	char retVal{c};
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	73fb      	strb	r3, [r7, #15]

	if ( (c >= 'a') && (c <= 'z') )
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b60      	cmp	r3, #96	; 0x60
 80006f2:	d905      	bls.n	8000700 <_ZL16convert_to_Upperc+0x20>
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b7a      	cmp	r3, #122	; 0x7a
 80006f8:	d802      	bhi.n	8000700 <_ZL16convert_to_Upperc+0x20>
	{
		retVal -= ('a' - 'A');
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	3b20      	subs	r3, #32
 80006fe:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <_ZL13Error_Handlerv>:

static void Error_Handler( void )
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
	for (;;);
 8000712:	e7fe      	b.n	8000712 <_ZL13Error_Handlerv+0x4>

08000714 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f9cb 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x40>)
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <HAL_MspInit+0x40>)
 8000724:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000728:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	f06f 0009 	mvn.w	r0, #9
 8000732:	f000 f9ca 	bl	8000aca <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	f06f 000a 	mvn.w	r0, #10
 800073e:	f000 f9c4 	bl	8000aca <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	f06f 000b 	mvn.w	r0, #11
 800074a:	f000 f9be 	bl	8000aca <HAL_NVIC_SetPriority>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_UART_MspInit+0x84>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_UART_MspInit+0x84>)
 8000776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_UART_MspInit+0x84>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_UART_MspInit+0x84>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <HAL_UART_MspInit+0x84>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_UART_MspInit+0x84>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80007a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007a4:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 80007b2:	2307      	movs	r3, #7
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &USART3_gpio_config);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <HAL_UART_MspInit+0x88>)
 80007be:	f000 f9c7 	bl	8000b50 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority(USART3_IRQn, 0x0F, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	2027      	movs	r0, #39	; 0x27
 80007c8:	f000 f97f 	bl	8000aca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 80007cc:	2027      	movs	r0, #39	; 0x27
 80007ce:	f000 f998 	bl	8000b02 <HAL_NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000832:	f7ff ffd7 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000836:	f001 fa11 	bl	8001c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083a:	f7ff fe89 	bl	8000550 <main>
  bx  lr    
 800083e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000840:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800084c:	08001cfc 	.word	0x08001cfc
  ldr r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000854:	200000b0 	.word	0x200000b0

08000858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC_IRQHandler>

0800085a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085e:	2003      	movs	r0, #3
 8000860:	f000 f928 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 f805 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086a:	f7ff ff53 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	bd80      	pop	{r7, pc}

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f943 	bl	8000b1e <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f90b 	bl	8000aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008
 80008f8:	200000ac 	.word	0x200000ac

080008fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <HAL_GetTick+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200000ac 	.word	0x200000ac

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <__NVIC_SetPriorityGrouping+0x40>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	4313      	orrs	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x40>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00
 8000958:	05fa0000 	.word	0x05fa0000

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0b      	blt.n	80009a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_EnableIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a80:	d301      	bcc.n	8000a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00f      	b.n	8000aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <SysTick_Config+0x40>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f7ff ff8e 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SysTick_Config+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SysTick_Config+0x40>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff29 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff3e 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff8e 	bl	8000a08 <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5d 	bl	80009b4 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff31 	bl	8000978 <__NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffa2 	bl	8000a70 <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b3a:	f000 f802 	bl	8000b42 <HAL_SYSTICK_Callback>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	e175      	b.n	8000e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b70:	2201      	movs	r2, #1
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	f040 8164 	bne.w	8000e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d005      	beq.n	8000ba6 <HAL_GPIO_Init+0x56>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d130      	bne.n	8000c08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	091b      	lsrs	r3, r3, #4
 8000bf2:	f003 0201 	and.w	r2, r3, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d017      	beq.n	8000c44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d123      	bne.n	8000c98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	08da      	lsrs	r2, r3, #3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3208      	adds	r2, #8
 8000c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	691a      	ldr	r2, [r3, #16]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3208      	adds	r2, #8
 8000c92:	69b9      	ldr	r1, [r7, #24]
 8000c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0203 	and.w	r2, r3, #3
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80be 	beq.w	8000e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b66      	ldr	r3, [pc, #408]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a65      	ldr	r2, [pc, #404]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b63      	ldr	r3, [pc, #396]	; (8000e74 <HAL_GPIO_Init+0x324>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cf2:	4a61      	ldr	r2, [pc, #388]	; (8000e78 <HAL_GPIO_Init+0x328>)
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <HAL_GPIO_Init+0x32c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d037      	beq.n	8000d8e <HAL_GPIO_Init+0x23e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a57      	ldr	r2, [pc, #348]	; (8000e80 <HAL_GPIO_Init+0x330>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d031      	beq.n	8000d8a <HAL_GPIO_Init+0x23a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a56      	ldr	r2, [pc, #344]	; (8000e84 <HAL_GPIO_Init+0x334>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d02b      	beq.n	8000d86 <HAL_GPIO_Init+0x236>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a55      	ldr	r2, [pc, #340]	; (8000e88 <HAL_GPIO_Init+0x338>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d025      	beq.n	8000d82 <HAL_GPIO_Init+0x232>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a54      	ldr	r2, [pc, #336]	; (8000e8c <HAL_GPIO_Init+0x33c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01f      	beq.n	8000d7e <HAL_GPIO_Init+0x22e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a53      	ldr	r2, [pc, #332]	; (8000e90 <HAL_GPIO_Init+0x340>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0x22a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_GPIO_Init+0x344>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a51      	ldr	r2, [pc, #324]	; (8000e98 <HAL_GPIO_Init+0x348>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x222>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a50      	ldr	r2, [pc, #320]	; (8000e9c <HAL_GPIO_Init+0x34c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x21e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4f      	ldr	r2, [pc, #316]	; (8000ea0 <HAL_GPIO_Init+0x350>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x21a>
 8000d66:	2309      	movs	r3, #9
 8000d68:	e012      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	e010      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d6e:	2308      	movs	r3, #8
 8000d70:	e00e      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e00c      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000da0:	4935      	ldr	r1, [pc, #212]	; (8000e78 <HAL_GPIO_Init+0x328>)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dd2:	4a34      	ldr	r2, [pc, #208]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dfc:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	f67f ae86 	bls.w	8000b70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	40022400 	.word	0x40022400
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ec0:	4b67      	ldr	r3, [pc, #412]	; (8001060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d00d      	beq.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	f200 80bd 	bhi.w	800104c <HAL_RCC_GetSysClockFreq+0x1a4>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <HAL_RCC_GetSysClockFreq+0x34>
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d003      	beq.n	8000ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8000eda:	e0b7      	b.n	800104c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000edc:	4b61      	ldr	r3, [pc, #388]	; (8001064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8000ede:	60bb      	str	r3, [r7, #8]
      break;
 8000ee0:	e0b7      	b.n	8001052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000ee2:	4b61      	ldr	r3, [pc, #388]	; (8001068 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8000ee4:	60bb      	str	r3, [r7, #8]
      break;
 8000ee6:	e0b4      	b.n	8001052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ee8:	4b5d      	ldr	r3, [pc, #372]	; (8001060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ef0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d04d      	beq.n	8000f9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efe:	4b58      	ldr	r3, [pc, #352]	; (8001060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	099b      	lsrs	r3, r3, #6
 8000f04:	461a      	mov	r2, r3
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f0e:	f04f 0100 	mov.w	r1, #0
 8000f12:	ea02 0800 	and.w	r8, r2, r0
 8000f16:	ea03 0901 	and.w	r9, r3, r1
 8000f1a:	4640      	mov	r0, r8
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	014b      	lsls	r3, r1, #5
 8000f28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f2c:	0142      	lsls	r2, r0, #5
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	ebb0 0008 	subs.w	r0, r0, r8
 8000f36:	eb61 0109 	sbc.w	r1, r1, r9
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	018b      	lsls	r3, r1, #6
 8000f44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000f48:	0182      	lsls	r2, r0, #6
 8000f4a:	1a12      	subs	r2, r2, r0
 8000f4c:	eb63 0301 	sbc.w	r3, r3, r1
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	f04f 0100 	mov.w	r1, #0
 8000f58:	00d9      	lsls	r1, r3, #3
 8000f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000f5e:	00d0      	lsls	r0, r2, #3
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	eb12 0208 	adds.w	r2, r2, r8
 8000f68:	eb43 0309 	adc.w	r3, r3, r9
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	f04f 0100 	mov.w	r1, #0
 8000f74:	0259      	lsls	r1, r3, #9
 8000f76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8000f7a:	0250      	lsls	r0, r2, #9
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	f7ff f95c 	bl	8000248 <__aeabi_uldivmod>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4613      	mov	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e04a      	b.n	8001030 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	099b      	lsrs	r3, r3, #6
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000faa:	f04f 0100 	mov.w	r1, #0
 8000fae:	ea02 0400 	and.w	r4, r2, r0
 8000fb2:	ea03 0501 	and.w	r5, r3, r1
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4629      	mov	r1, r5
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	014b      	lsls	r3, r1, #5
 8000fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000fc8:	0142      	lsls	r2, r0, #5
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	1b00      	subs	r0, r0, r4
 8000fd0:	eb61 0105 	sbc.w	r1, r1, r5
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	018b      	lsls	r3, r1, #6
 8000fde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000fe2:	0182      	lsls	r2, r0, #6
 8000fe4:	1a12      	subs	r2, r2, r0
 8000fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	f04f 0100 	mov.w	r1, #0
 8000ff2:	00d9      	lsls	r1, r3, #3
 8000ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000ff8:	00d0      	lsls	r0, r2, #3
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	1912      	adds	r2, r2, r4
 8001000:	eb45 0303 	adc.w	r3, r5, r3
 8001004:	f04f 0000 	mov.w	r0, #0
 8001008:	f04f 0100 	mov.w	r1, #0
 800100c:	0299      	lsls	r1, r3, #10
 800100e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001012:	0290      	lsls	r0, r2, #10
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	461a      	mov	r2, r3
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	f7ff f910 	bl	8000248 <__aeabi_uldivmod>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4613      	mov	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	0c1b      	lsrs	r3, r3, #16
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	3301      	adds	r3, #1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	60bb      	str	r3, [r7, #8]
      break;
 800104a:	e002      	b.n	8001052 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800104e:	60bb      	str	r3, [r7, #8]
      break;
 8001050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001052:	68bb      	ldr	r3, [r7, #8]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	00f42400 	.word	0x00f42400
 8001068:	007a1200 	.word	0x007a1200

0800106c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_RCC_GetHCLKFreq+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000

08001084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001088:	f7ff fff0 	bl	800106c <HAL_RCC_GetHCLKFreq>
 800108c:	4602      	mov	r2, r0
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	0a9b      	lsrs	r3, r3, #10
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800109a:	5ccb      	ldrb	r3, [r1, r3]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	08001ce4 	.word	0x08001ce4

080010ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010b0:	f7ff ffdc 	bl	800106c <HAL_RCC_GetHCLKFreq>
 80010b4:	4602      	mov	r2, r0
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	0b5b      	lsrs	r3, r3, #13
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	4903      	ldr	r1, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010c2:	5ccb      	ldrb	r3, [r1, r3]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	08001ce4 	.word	0x08001ce4

080010d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e040      	b.n	8001168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fb2e 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f990 	bl	8001438 <UART_SetConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e022      	b.n	8001168 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fbe6 	bl	80018fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800113e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800114e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fc6d 	bl	8001a40 <UART_CheckIdleState>
 8001166:	4603      	mov	r3, r0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001184:	2b20      	cmp	r3, #32
 8001186:	f040 8081 	bne.w	800128c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_UART_Transmit+0x26>
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e079      	b.n	800128e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_UART_Transmit+0x38>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e072      	b.n	800128e <HAL_UART_Transmit+0x11e>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2221      	movs	r2, #33	; 0x21
 80011bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80011be:	f7ff fb9d 	bl	80008fc <HAL_GetTick>
 80011c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011dc:	d108      	bne.n	80011f0 <HAL_UART_Transmit+0x80>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d104      	bne.n	80011f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	e003      	b.n	80011f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8001200:	e02c      	b.n	800125c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fc60 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e038      	b.n	800128e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10b      	bne.n	800123a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	3302      	adds	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	e007      	b.n	800124a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001250:	b29b      	uxth	r3, r3
 8001252:	3b01      	subs	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001262:	b29b      	uxth	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1cc      	bne.n	8001202 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2200      	movs	r2, #0
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 fc2d 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e005      	b.n	800128e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2220      	movs	r2, #32
 8001286:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800128c:	2302      	movs	r3, #2
  }
}
 800128e:	4618      	mov	r0, r3
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b08a      	sub	sp, #40	; 0x28
 800129a:	af02      	add	r7, sp, #8
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4613      	mov	r3, r2
 80012a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80012aa:	2b20      	cmp	r3, #32
 80012ac:	f040 80be 	bne.w	800142c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_UART_Receive+0x26>
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b6      	b.n	800142e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_UART_Receive+0x38>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e0af      	b.n	800142e <HAL_UART_Receive+0x198>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2222      	movs	r2, #34	; 0x22
 80012e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80012ea:	f7ff fb07 	bl	80008fc <HAL_GetTick>
 80012ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	88fa      	ldrh	r2, [r7, #6]
 80012fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001308:	d10e      	bne.n	8001328 <HAL_UART_Receive+0x92>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d105      	bne.n	800131e <HAL_UART_Receive+0x88>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800131c:	e02d      	b.n	800137a <HAL_UART_Receive+0xe4>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001326:	e028      	b.n	800137a <HAL_UART_Receive+0xe4>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10d      	bne.n	800134c <HAL_UART_Receive+0xb6>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d104      	bne.n	8001342 <HAL_UART_Receive+0xac>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001340:	e01b      	b.n	800137a <HAL_UART_Receive+0xe4>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	227f      	movs	r2, #127	; 0x7f
 8001346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800134a:	e016      	b.n	800137a <HAL_UART_Receive+0xe4>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001354:	d10d      	bne.n	8001372 <HAL_UART_Receive+0xdc>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d104      	bne.n	8001368 <HAL_UART_Receive+0xd2>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	227f      	movs	r2, #127	; 0x7f
 8001362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001366:	e008      	b.n	800137a <HAL_UART_Receive+0xe4>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	223f      	movs	r2, #63	; 0x3f
 800136c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001370:	e003      	b.n	800137a <HAL_UART_Receive+0xe4>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001380:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138a:	d108      	bne.n	800139e <HAL_UART_Receive+0x108>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d104      	bne.n	800139e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	e003      	b.n	80013a6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80013ae:	e032      	b.n	8001416 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2200      	movs	r2, #0
 80013b8:	2120      	movs	r1, #32
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 fb89 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e031      	b.n	800142e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10c      	bne.n	80013ea <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	8a7b      	ldrh	r3, [r7, #18]
 80013da:	4013      	ands	r3, r2
 80013dc:	b29a      	uxth	r2, r3
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3302      	adds	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e00c      	b.n	8001404 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	8a7b      	ldrh	r3, [r7, #18]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1c6      	bne.n	80013b0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2220      	movs	r2, #32
 8001426:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e000      	b.n	800142e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800142c:	2302      	movs	r3, #2
  }
}
 800142e:	4618      	mov	r0, r3
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4ba7      	ldr	r3, [pc, #668]	; (8001700 <UART_SetConfig+0x2c8>)
 8001464:	4013      	ands	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	6979      	ldr	r1, [r7, #20]
 800146c:	430b      	orrs	r3, r1
 800146e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4313      	orrs	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a95      	ldr	r2, [pc, #596]	; (8001704 <UART_SetConfig+0x2cc>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d120      	bne.n	80014f6 <UART_SetConfig+0xbe>
 80014b4:	4b94      	ldr	r3, [pc, #592]	; (8001708 <UART_SetConfig+0x2d0>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d816      	bhi.n	80014f0 <UART_SetConfig+0xb8>
 80014c2:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <UART_SetConfig+0x90>)
 80014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014df 	.word	0x080014df
 80014d4:	080014eb 	.word	0x080014eb
 80014d8:	2301      	movs	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
 80014dc:	e14f      	b.n	800177e <UART_SetConfig+0x346>
 80014de:	2302      	movs	r3, #2
 80014e0:	77fb      	strb	r3, [r7, #31]
 80014e2:	e14c      	b.n	800177e <UART_SetConfig+0x346>
 80014e4:	2304      	movs	r3, #4
 80014e6:	77fb      	strb	r3, [r7, #31]
 80014e8:	e149      	b.n	800177e <UART_SetConfig+0x346>
 80014ea:	2308      	movs	r3, #8
 80014ec:	77fb      	strb	r3, [r7, #31]
 80014ee:	e146      	b.n	800177e <UART_SetConfig+0x346>
 80014f0:	2310      	movs	r3, #16
 80014f2:	77fb      	strb	r3, [r7, #31]
 80014f4:	e143      	b.n	800177e <UART_SetConfig+0x346>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a84      	ldr	r2, [pc, #528]	; (800170c <UART_SetConfig+0x2d4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d132      	bne.n	8001566 <UART_SetConfig+0x12e>
 8001500:	4b81      	ldr	r3, [pc, #516]	; (8001708 <UART_SetConfig+0x2d0>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d828      	bhi.n	8001560 <UART_SetConfig+0x128>
 800150e:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <UART_SetConfig+0xdc>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	08001549 	.word	0x08001549
 8001518:	08001561 	.word	0x08001561
 800151c:	08001561 	.word	0x08001561
 8001520:	08001561 	.word	0x08001561
 8001524:	08001555 	.word	0x08001555
 8001528:	08001561 	.word	0x08001561
 800152c:	08001561 	.word	0x08001561
 8001530:	08001561 	.word	0x08001561
 8001534:	0800154f 	.word	0x0800154f
 8001538:	08001561 	.word	0x08001561
 800153c:	08001561 	.word	0x08001561
 8001540:	08001561 	.word	0x08001561
 8001544:	0800155b 	.word	0x0800155b
 8001548:	2300      	movs	r3, #0
 800154a:	77fb      	strb	r3, [r7, #31]
 800154c:	e117      	b.n	800177e <UART_SetConfig+0x346>
 800154e:	2302      	movs	r3, #2
 8001550:	77fb      	strb	r3, [r7, #31]
 8001552:	e114      	b.n	800177e <UART_SetConfig+0x346>
 8001554:	2304      	movs	r3, #4
 8001556:	77fb      	strb	r3, [r7, #31]
 8001558:	e111      	b.n	800177e <UART_SetConfig+0x346>
 800155a:	2308      	movs	r3, #8
 800155c:	77fb      	strb	r3, [r7, #31]
 800155e:	e10e      	b.n	800177e <UART_SetConfig+0x346>
 8001560:	2310      	movs	r3, #16
 8001562:	77fb      	strb	r3, [r7, #31]
 8001564:	e10b      	b.n	800177e <UART_SetConfig+0x346>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a69      	ldr	r2, [pc, #420]	; (8001710 <UART_SetConfig+0x2d8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d120      	bne.n	80015b2 <UART_SetConfig+0x17a>
 8001570:	4b65      	ldr	r3, [pc, #404]	; (8001708 <UART_SetConfig+0x2d0>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800157a:	2b30      	cmp	r3, #48	; 0x30
 800157c:	d013      	beq.n	80015a6 <UART_SetConfig+0x16e>
 800157e:	2b30      	cmp	r3, #48	; 0x30
 8001580:	d814      	bhi.n	80015ac <UART_SetConfig+0x174>
 8001582:	2b20      	cmp	r3, #32
 8001584:	d009      	beq.n	800159a <UART_SetConfig+0x162>
 8001586:	2b20      	cmp	r3, #32
 8001588:	d810      	bhi.n	80015ac <UART_SetConfig+0x174>
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <UART_SetConfig+0x15c>
 800158e:	2b10      	cmp	r3, #16
 8001590:	d006      	beq.n	80015a0 <UART_SetConfig+0x168>
 8001592:	e00b      	b.n	80015ac <UART_SetConfig+0x174>
 8001594:	2300      	movs	r3, #0
 8001596:	77fb      	strb	r3, [r7, #31]
 8001598:	e0f1      	b.n	800177e <UART_SetConfig+0x346>
 800159a:	2302      	movs	r3, #2
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	e0ee      	b.n	800177e <UART_SetConfig+0x346>
 80015a0:	2304      	movs	r3, #4
 80015a2:	77fb      	strb	r3, [r7, #31]
 80015a4:	e0eb      	b.n	800177e <UART_SetConfig+0x346>
 80015a6:	2308      	movs	r3, #8
 80015a8:	77fb      	strb	r3, [r7, #31]
 80015aa:	e0e8      	b.n	800177e <UART_SetConfig+0x346>
 80015ac:	2310      	movs	r3, #16
 80015ae:	77fb      	strb	r3, [r7, #31]
 80015b0:	e0e5      	b.n	800177e <UART_SetConfig+0x346>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a57      	ldr	r2, [pc, #348]	; (8001714 <UART_SetConfig+0x2dc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d120      	bne.n	80015fe <UART_SetConfig+0x1c6>
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <UART_SetConfig+0x2d0>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015c6:	2bc0      	cmp	r3, #192	; 0xc0
 80015c8:	d013      	beq.n	80015f2 <UART_SetConfig+0x1ba>
 80015ca:	2bc0      	cmp	r3, #192	; 0xc0
 80015cc:	d814      	bhi.n	80015f8 <UART_SetConfig+0x1c0>
 80015ce:	2b80      	cmp	r3, #128	; 0x80
 80015d0:	d009      	beq.n	80015e6 <UART_SetConfig+0x1ae>
 80015d2:	2b80      	cmp	r3, #128	; 0x80
 80015d4:	d810      	bhi.n	80015f8 <UART_SetConfig+0x1c0>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <UART_SetConfig+0x1a8>
 80015da:	2b40      	cmp	r3, #64	; 0x40
 80015dc:	d006      	beq.n	80015ec <UART_SetConfig+0x1b4>
 80015de:	e00b      	b.n	80015f8 <UART_SetConfig+0x1c0>
 80015e0:	2300      	movs	r3, #0
 80015e2:	77fb      	strb	r3, [r7, #31]
 80015e4:	e0cb      	b.n	800177e <UART_SetConfig+0x346>
 80015e6:	2302      	movs	r3, #2
 80015e8:	77fb      	strb	r3, [r7, #31]
 80015ea:	e0c8      	b.n	800177e <UART_SetConfig+0x346>
 80015ec:	2304      	movs	r3, #4
 80015ee:	77fb      	strb	r3, [r7, #31]
 80015f0:	e0c5      	b.n	800177e <UART_SetConfig+0x346>
 80015f2:	2308      	movs	r3, #8
 80015f4:	77fb      	strb	r3, [r7, #31]
 80015f6:	e0c2      	b.n	800177e <UART_SetConfig+0x346>
 80015f8:	2310      	movs	r3, #16
 80015fa:	77fb      	strb	r3, [r7, #31]
 80015fc:	e0bf      	b.n	800177e <UART_SetConfig+0x346>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a45      	ldr	r2, [pc, #276]	; (8001718 <UART_SetConfig+0x2e0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d125      	bne.n	8001654 <UART_SetConfig+0x21c>
 8001608:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <UART_SetConfig+0x2d0>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001616:	d017      	beq.n	8001648 <UART_SetConfig+0x210>
 8001618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800161c:	d817      	bhi.n	800164e <UART_SetConfig+0x216>
 800161e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001622:	d00b      	beq.n	800163c <UART_SetConfig+0x204>
 8001624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001628:	d811      	bhi.n	800164e <UART_SetConfig+0x216>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <UART_SetConfig+0x1fe>
 800162e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001632:	d006      	beq.n	8001642 <UART_SetConfig+0x20a>
 8001634:	e00b      	b.n	800164e <UART_SetConfig+0x216>
 8001636:	2300      	movs	r3, #0
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	e0a0      	b.n	800177e <UART_SetConfig+0x346>
 800163c:	2302      	movs	r3, #2
 800163e:	77fb      	strb	r3, [r7, #31]
 8001640:	e09d      	b.n	800177e <UART_SetConfig+0x346>
 8001642:	2304      	movs	r3, #4
 8001644:	77fb      	strb	r3, [r7, #31]
 8001646:	e09a      	b.n	800177e <UART_SetConfig+0x346>
 8001648:	2308      	movs	r3, #8
 800164a:	77fb      	strb	r3, [r7, #31]
 800164c:	e097      	b.n	800177e <UART_SetConfig+0x346>
 800164e:	2310      	movs	r3, #16
 8001650:	77fb      	strb	r3, [r7, #31]
 8001652:	e094      	b.n	800177e <UART_SetConfig+0x346>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a30      	ldr	r2, [pc, #192]	; (800171c <UART_SetConfig+0x2e4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d125      	bne.n	80016aa <UART_SetConfig+0x272>
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <UART_SetConfig+0x2d0>)
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800166c:	d017      	beq.n	800169e <UART_SetConfig+0x266>
 800166e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001672:	d817      	bhi.n	80016a4 <UART_SetConfig+0x26c>
 8001674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001678:	d00b      	beq.n	8001692 <UART_SetConfig+0x25a>
 800167a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800167e:	d811      	bhi.n	80016a4 <UART_SetConfig+0x26c>
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <UART_SetConfig+0x254>
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d006      	beq.n	8001698 <UART_SetConfig+0x260>
 800168a:	e00b      	b.n	80016a4 <UART_SetConfig+0x26c>
 800168c:	2301      	movs	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	e075      	b.n	800177e <UART_SetConfig+0x346>
 8001692:	2302      	movs	r3, #2
 8001694:	77fb      	strb	r3, [r7, #31]
 8001696:	e072      	b.n	800177e <UART_SetConfig+0x346>
 8001698:	2304      	movs	r3, #4
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	e06f      	b.n	800177e <UART_SetConfig+0x346>
 800169e:	2308      	movs	r3, #8
 80016a0:	77fb      	strb	r3, [r7, #31]
 80016a2:	e06c      	b.n	800177e <UART_SetConfig+0x346>
 80016a4:	2310      	movs	r3, #16
 80016a6:	77fb      	strb	r3, [r7, #31]
 80016a8:	e069      	b.n	800177e <UART_SetConfig+0x346>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <UART_SetConfig+0x2e8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d137      	bne.n	8001724 <UART_SetConfig+0x2ec>
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <UART_SetConfig+0x2d0>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016c2:	d017      	beq.n	80016f4 <UART_SetConfig+0x2bc>
 80016c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016c8:	d817      	bhi.n	80016fa <UART_SetConfig+0x2c2>
 80016ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ce:	d00b      	beq.n	80016e8 <UART_SetConfig+0x2b0>
 80016d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016d4:	d811      	bhi.n	80016fa <UART_SetConfig+0x2c2>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <UART_SetConfig+0x2aa>
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	d006      	beq.n	80016ee <UART_SetConfig+0x2b6>
 80016e0:	e00b      	b.n	80016fa <UART_SetConfig+0x2c2>
 80016e2:	2300      	movs	r3, #0
 80016e4:	77fb      	strb	r3, [r7, #31]
 80016e6:	e04a      	b.n	800177e <UART_SetConfig+0x346>
 80016e8:	2302      	movs	r3, #2
 80016ea:	77fb      	strb	r3, [r7, #31]
 80016ec:	e047      	b.n	800177e <UART_SetConfig+0x346>
 80016ee:	2304      	movs	r3, #4
 80016f0:	77fb      	strb	r3, [r7, #31]
 80016f2:	e044      	b.n	800177e <UART_SetConfig+0x346>
 80016f4:	2308      	movs	r3, #8
 80016f6:	77fb      	strb	r3, [r7, #31]
 80016f8:	e041      	b.n	800177e <UART_SetConfig+0x346>
 80016fa:	2310      	movs	r3, #16
 80016fc:	77fb      	strb	r3, [r7, #31]
 80016fe:	e03e      	b.n	800177e <UART_SetConfig+0x346>
 8001700:	efff69f3 	.word	0xefff69f3
 8001704:	40011000 	.word	0x40011000
 8001708:	40023800 	.word	0x40023800
 800170c:	40004400 	.word	0x40004400
 8001710:	40004800 	.word	0x40004800
 8001714:	40004c00 	.word	0x40004c00
 8001718:	40005000 	.word	0x40005000
 800171c:	40011400 	.word	0x40011400
 8001720:	40007800 	.word	0x40007800
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <UART_SetConfig+0x4b8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d125      	bne.n	800177a <UART_SetConfig+0x342>
 800172e:	4b71      	ldr	r3, [pc, #452]	; (80018f4 <UART_SetConfig+0x4bc>)
 8001730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001738:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800173c:	d017      	beq.n	800176e <UART_SetConfig+0x336>
 800173e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001742:	d817      	bhi.n	8001774 <UART_SetConfig+0x33c>
 8001744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001748:	d00b      	beq.n	8001762 <UART_SetConfig+0x32a>
 800174a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800174e:	d811      	bhi.n	8001774 <UART_SetConfig+0x33c>
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <UART_SetConfig+0x324>
 8001754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001758:	d006      	beq.n	8001768 <UART_SetConfig+0x330>
 800175a:	e00b      	b.n	8001774 <UART_SetConfig+0x33c>
 800175c:	2300      	movs	r3, #0
 800175e:	77fb      	strb	r3, [r7, #31]
 8001760:	e00d      	b.n	800177e <UART_SetConfig+0x346>
 8001762:	2302      	movs	r3, #2
 8001764:	77fb      	strb	r3, [r7, #31]
 8001766:	e00a      	b.n	800177e <UART_SetConfig+0x346>
 8001768:	2304      	movs	r3, #4
 800176a:	77fb      	strb	r3, [r7, #31]
 800176c:	e007      	b.n	800177e <UART_SetConfig+0x346>
 800176e:	2308      	movs	r3, #8
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	e004      	b.n	800177e <UART_SetConfig+0x346>
 8001774:	2310      	movs	r3, #16
 8001776:	77fb      	strb	r3, [r7, #31]
 8001778:	e001      	b.n	800177e <UART_SetConfig+0x346>
 800177a:	2310      	movs	r3, #16
 800177c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001786:	d15a      	bne.n	800183e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8001788:	7ffb      	ldrb	r3, [r7, #31]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d827      	bhi.n	80017de <UART_SetConfig+0x3a6>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <UART_SetConfig+0x35c>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017b9 	.word	0x080017b9
 8001798:	080017c1 	.word	0x080017c1
 800179c:	080017c9 	.word	0x080017c9
 80017a0:	080017df 	.word	0x080017df
 80017a4:	080017cf 	.word	0x080017cf
 80017a8:	080017df 	.word	0x080017df
 80017ac:	080017df 	.word	0x080017df
 80017b0:	080017df 	.word	0x080017df
 80017b4:	080017d7 	.word	0x080017d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017b8:	f7ff fc64 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 80017bc:	61b8      	str	r0, [r7, #24]
        break;
 80017be:	e013      	b.n	80017e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80017c0:	f7ff fc74 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 80017c4:	61b8      	str	r0, [r7, #24]
        break;
 80017c6:	e00f      	b.n	80017e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <UART_SetConfig+0x4c0>)
 80017ca:	61bb      	str	r3, [r7, #24]
        break;
 80017cc:	e00c      	b.n	80017e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017ce:	f7ff fb6b 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 80017d2:	61b8      	str	r0, [r7, #24]
        break;
 80017d4:	e008      	b.n	80017e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017da:	61bb      	str	r3, [r7, #24]
        break;
 80017dc:	e004      	b.n	80017e8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	77bb      	strb	r3, [r7, #30]
        break;
 80017e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d074      	beq.n	80018d8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	441a      	add	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d916      	bls.n	8001838 <UART_SetConfig+0x400>
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001810:	d212      	bcs.n	8001838 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	b29b      	uxth	r3, r3
 8001816:	f023 030f 	bic.w	r3, r3, #15
 800181a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	b29a      	uxth	r2, r3
 8001828:	89fb      	ldrh	r3, [r7, #14]
 800182a:	4313      	orrs	r3, r2
 800182c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	89fa      	ldrh	r2, [r7, #14]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	e04f      	b.n	80018d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	77bb      	strb	r3, [r7, #30]
 800183c:	e04c      	b.n	80018d8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800183e:	7ffb      	ldrb	r3, [r7, #31]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d828      	bhi.n	8001896 <UART_SetConfig+0x45e>
 8001844:	a201      	add	r2, pc, #4	; (adr r2, 800184c <UART_SetConfig+0x414>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	08001871 	.word	0x08001871
 8001850:	08001879 	.word	0x08001879
 8001854:	08001881 	.word	0x08001881
 8001858:	08001897 	.word	0x08001897
 800185c:	08001887 	.word	0x08001887
 8001860:	08001897 	.word	0x08001897
 8001864:	08001897 	.word	0x08001897
 8001868:	08001897 	.word	0x08001897
 800186c:	0800188f 	.word	0x0800188f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001870:	f7ff fc08 	bl	8001084 <HAL_RCC_GetPCLK1Freq>
 8001874:	61b8      	str	r0, [r7, #24]
        break;
 8001876:	e013      	b.n	80018a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001878:	f7ff fc18 	bl	80010ac <HAL_RCC_GetPCLK2Freq>
 800187c:	61b8      	str	r0, [r7, #24]
        break;
 800187e:	e00f      	b.n	80018a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <UART_SetConfig+0x4c0>)
 8001882:	61bb      	str	r3, [r7, #24]
        break;
 8001884:	e00c      	b.n	80018a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001886:	f7ff fb0f 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 800188a:	61b8      	str	r0, [r7, #24]
        break;
 800188c:	e008      	b.n	80018a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800188e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001892:	61bb      	str	r3, [r7, #24]
        break;
 8001894:	e004      	b.n	80018a0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	77bb      	strb	r3, [r7, #30]
        break;
 800189e:	bf00      	nop
    }

    if (pclk != 0U)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d018      	beq.n	80018d8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	085a      	lsrs	r2, r3, #1
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	441a      	add	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d909      	bls.n	80018d4 <UART_SetConfig+0x49c>
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d205      	bcs.n	80018d4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	e001      	b.n	80018d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80018e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40007c00 	.word	0x40007c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400

080018fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00a      	beq.n	8001926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01a      	beq.n	8001a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019fa:	d10a      	bne.n	8001a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00a      	beq.n	8001a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
  }
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a50:	f7fe ff54 	bl	80008fc <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d10e      	bne.n	8001a82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f82d 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e023      	b.n	8001aca <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d10e      	bne.n	8001aae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f817 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e00d      	b.n	8001aca <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b09c      	sub	sp, #112	; 0x70
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae2:	e0a5      	b.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	f000 80a1 	beq.w	8001c30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aee:	f7fe ff05 	bl	80008fc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x32>
 8001afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d13e      	bne.n	8001b82 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b0c:	e853 3f00 	ldrex	r3, [r3]
 8001b10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8001b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b18:	667b      	str	r3, [r7, #100]	; 0x64
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b2a:	e841 2300 	strex	r3, r2, [r1]
 8001b2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e6      	bne.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b40:	e853 3f00 	ldrex	r3, [r3]
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3308      	adds	r3, #8
 8001b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b56:	64ba      	str	r2, [r7, #72]	; 0x48
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b5e:	e841 2300 	strex	r3, r2, [r1]
 8001b62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8001b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e5      	bne.n	8001b36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e067      	b.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d04f      	beq.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9e:	d147      	bne.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	e853 3f00 	ldrex	r3, [r3]
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bd0:	e841 2300 	strex	r3, r2, [r1]
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e6      	bne.n	8001baa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3308      	adds	r3, #8
 8001be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	e853 3f00 	ldrex	r3, [r3]
 8001bea:	613b      	str	r3, [r7, #16]
   return(result);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3308      	adds	r3, #8
 8001bfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bfc:	623a      	str	r2, [r7, #32]
 8001bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c00:	69f9      	ldr	r1, [r7, #28]
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	e841 2300 	strex	r3, r2, [r1]
 8001c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e5      	bne.n	8001bdc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e010      	b.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	f43f af4a 	beq.w	8001ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3770      	adds	r7, #112	; 0x70
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <__libc_init_array>:
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	4d0d      	ldr	r5, [pc, #52]	; (8001c94 <__libc_init_array+0x38>)
 8001c60:	4c0d      	ldr	r4, [pc, #52]	; (8001c98 <__libc_init_array+0x3c>)
 8001c62:	1b64      	subs	r4, r4, r5
 8001c64:	10a4      	asrs	r4, r4, #2
 8001c66:	2600      	movs	r6, #0
 8001c68:	42a6      	cmp	r6, r4
 8001c6a:	d109      	bne.n	8001c80 <__libc_init_array+0x24>
 8001c6c:	4d0b      	ldr	r5, [pc, #44]	; (8001c9c <__libc_init_array+0x40>)
 8001c6e:	4c0c      	ldr	r4, [pc, #48]	; (8001ca0 <__libc_init_array+0x44>)
 8001c70:	f000 f820 	bl	8001cb4 <_init>
 8001c74:	1b64      	subs	r4, r4, r5
 8001c76:	10a4      	asrs	r4, r4, #2
 8001c78:	2600      	movs	r6, #0
 8001c7a:	42a6      	cmp	r6, r4
 8001c7c:	d105      	bne.n	8001c8a <__libc_init_array+0x2e>
 8001c7e:	bd70      	pop	{r4, r5, r6, pc}
 8001c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c84:	4798      	blx	r3
 8001c86:	3601      	adds	r6, #1
 8001c88:	e7ee      	b.n	8001c68 <__libc_init_array+0xc>
 8001c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c8e:	4798      	blx	r3
 8001c90:	3601      	adds	r6, #1
 8001c92:	e7f2      	b.n	8001c7a <__libc_init_array+0x1e>
 8001c94:	08001cf4 	.word	0x08001cf4
 8001c98:	08001cf4 	.word	0x08001cf4
 8001c9c:	08001cf4 	.word	0x08001cf4
 8001ca0:	08001cf8 	.word	0x08001cf8

08001ca4 <memset>:
 8001ca4:	4402      	add	r2, r0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d100      	bne.n	8001cae <memset+0xa>
 8001cac:	4770      	bx	lr
 8001cae:	f803 1b01 	strb.w	r1, [r3], #1
 8001cb2:	e7f9      	b.n	8001ca8 <memset+0x4>

08001cb4 <_init>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	bf00      	nop
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr

08001cc0 <_fini>:
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	bf00      	nop
 8001cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc6:	bc08      	pop	{r3}
 8001cc8:	469e      	mov	lr, r3
 8001cca:	4770      	bx	lr
