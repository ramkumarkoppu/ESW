
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b1c  08002b1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002b30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002b30  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac09  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001683  00000000  00000000  0002ac43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0002c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b7a  00000000  00000000  0002cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096fb  00000000  00000000  00055b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1d91  00000000  00000000  0005f235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa4  00000000  00000000  0015101c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002adc 	.word	0x08002adc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002adc 	.word	0x08002adc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <SysTick_Handler>:
 */
#include "main.h"

/* This function handles System tick timer. */
extern "C" void SysTick_Handler( void )
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000544:	f000 f9e0 	bl	8000908 <HAL_IncTick>
	// Invoke callback if it exists.
	HAL_SYSTICK_IRQHandler();
 8000548:	f000 fb0f 	bl	8000b6a <HAL_SYSTICK_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <USART3_IRQHandler>:

/* This function handles USART3. */
extern "C" void USART3_IRQHandler( void )
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	// Invoke callback if it exists.
	HAL_UART_IRQHandler(&huart3);
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <USART3_IRQHandler+0x10>)
 8000556:	f001 f807 	bl	8001568 <HAL_UART_IRQHandler>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <main>:
static void UART3_Init( void );
static void Error_Handler( void );
static inline char convert_to_Upper(char c);

int main( void )
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056a:	f000 f990 	bl	800088e <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800056e:	f000 f895 	bl	800069c <_ZL18SystemClock_Configv>

	/* Configure the UART for debug console */
	UART3_Init();
 8000572:	f000 f89b 	bl	80006ac <_ZL10UART3_Initv>

	const char *pMsg = "Hello, how are you?\r";
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <main+0x58>)
 8000578:	607b      	str	r3, [r7, #4]
	if ( HAL_UART_Transmit( &huart3, (const std::uint8_t *)pMsg, std::strlen(pMsg), HAL_MAX_DELAY ) != HAL_OK )
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff fe5c 	bl	8000238 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <main+0x5c>)
 800058c:	f000 fe9c 	bl	80012c8 <HAL_UART_Transmit>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf14      	ite	ne
 8000596:	2301      	movne	r3, #1
 8000598:	2300      	moveq	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <main+0x40>
	{
		// Error in Transmission.
		Error_Handler();
 80005a0:	f000 f8cf 	bl	8000742 <_ZL13Error_Handlerv>
	}

	HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <main+0x60>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <main+0x64>)
 80005ac:	4413      	add	r3, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <main+0x5c>)
 80005b4:	f000 ff8a 	bl	80014cc <HAL_UART_Receive_IT>

	while(true)
 80005b8:	e7fe      	b.n	80005b8 <main+0x54>
 80005ba:	bf00      	nop
 80005bc:	08002af4 	.word	0x08002af4
 80005c0:	20000028 	.word	0x20000028
 80005c4:	200000ec 	.word	0x200000ec
 80005c8:	200000ac 	.word	0x200000ac

080005cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if ( (recv_data[cnt] != '\r') && (cnt < ( sizeof(recv_data) / sizeof(recv_data[0]))) )
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <HAL_UART_RxCpltCallback+0xb4>)
 80005dc:	5c9b      	ldrb	r3, [r3, r2]
 80005de:	2b0d      	cmp	r3, #13
 80005e0:	d014      	beq.n	800060c <HAL_UART_RxCpltCallback+0x40>
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b3f      	cmp	r3, #63	; 0x3f
 80005e8:	d810      	bhi.n	800060c <HAL_UART_RxCpltCallback+0x40>
	{
		cnt++;
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 80005f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (std::uint8_t *)&recv_data[cnt], 1);
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <HAL_UART_RxCpltCallback+0xb4>)
 80005fe:	4413      	add	r3, r2
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	481f      	ldr	r0, [pc, #124]	; (8000684 <HAL_UART_RxCpltCallback+0xb8>)
 8000606:	f000 ff61 	bl	80014cc <HAL_UART_Receive_IT>
		{
			// Error in Transmission.
			Error_Handler();
		}
	}
}
 800060a:	e033      	b.n	8000674 <HAL_UART_RxCpltCallback+0xa8>
		for (std::uint8_t i{0}; i < cnt; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	429a      	cmp	r2, r3
 8000618:	d20e      	bcs.n	8000638 <HAL_UART_RxCpltCallback+0x6c>
			recv_data[i] = convert_to_Upper( recv_data[i] );
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <HAL_UART_RxCpltCallback+0xb4>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	7bfc      	ldrb	r4, [r7, #15]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f876 	bl	8000714 <_ZL16convert_to_Upperc>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <HAL_UART_RxCpltCallback+0xb4>)
 800062e:	551a      	strb	r2, [r3, r4]
		for (std::uint8_t i{0}; i < cnt; i++)
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	3301      	adds	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e7eb      	b.n	8000610 <HAL_UART_RxCpltCallback+0x44>
		cnt++;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 8000642:	701a      	strb	r2, [r3, #0]
		recv_data[cnt] = '\n';
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_UART_RxCpltCallback+0xb4>)
 800064c:	210a      	movs	r1, #10
 800064e:	5499      	strb	r1, [r3, r2]
		if ( HAL_UART_Transmit_IT( &huart3, (const std::uint8_t *)recv_data, cnt) != HAL_OK )
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_UART_RxCpltCallback+0xb0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	4909      	ldr	r1, [pc, #36]	; (8000680 <HAL_UART_RxCpltCallback+0xb4>)
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <HAL_UART_RxCpltCallback+0xb8>)
 800065c:	f000 fec8 	bl	80013f0 <HAL_UART_Transmit_IT>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <HAL_UART_RxCpltCallback+0xa8>
			Error_Handler();
 8000670:	f000 f867 	bl	8000742 <_ZL13Error_Handlerv>
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	200000ec 	.word	0x200000ec
 8000680:	200000ac 	.word	0x200000ac
 8000684:	20000028 	.word	0x20000028

08000688 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <_ZL18SystemClock_Configv>:

static void SystemClock_Config( void )
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <_ZL10UART3_Initv>:

/* USART3 Initialization Function */
static void UART3_Init( void )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	/* UART High level initilization */
	huart3.Instance = USART3;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006b2:	4a17      	ldr	r2, [pc, #92]	; (8000710 <_ZL10UART3_Initv+0x64>)
 80006b4:	601a      	str	r2, [r3, #0]

	huart3.Init.BaudRate = 115200U;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]

	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <_ZL10UART3_Initv+0x60>)
 80006f0:	f000 fd9c 	bl	800122c <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <_ZL10UART3_Initv+0x5c>
	{
		// Initialization Error.
		Error_Handler();
 8000704:	f000 f81d 	bl	8000742 <_ZL13Error_Handlerv>
	}
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40004800 	.word	0x40004800

08000714 <_ZL16convert_to_Upperc>:

static inline char convert_to_Upper(char c)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	char retVal{c};
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	73fb      	strb	r3, [r7, #15]

	if ( (c >= 'a') && (c <= 'z') )
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b60      	cmp	r3, #96	; 0x60
 8000726:	d905      	bls.n	8000734 <_ZL16convert_to_Upperc+0x20>
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b7a      	cmp	r3, #122	; 0x7a
 800072c:	d802      	bhi.n	8000734 <_ZL16convert_to_Upperc+0x20>
	{
		retVal -= ('a' - 'A');
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3b20      	subs	r3, #32
 8000732:	73fb      	strb	r3, [r7, #15]
	}

	return retVal;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <_ZL13Error_Handlerv>:

static void Error_Handler( void )
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
	for (;;);
 8000746:	e7fe      	b.n	8000746 <_ZL13Error_Handlerv+0x4>

08000748 <HAL_MspInit>:
 */
#include "main.h"

/* Low level Processor specific initialization */
extern "C" void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	// Set the priority grouping of the processor.
	HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f9cb 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

	// Enable the required system exceptions (Usage, bus and memory fault exceptions).
	SCB->SHCSR |= ( (1U << 18U) | (1U << 17U) | (1U << 16U) );
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_MspInit+0x40>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <HAL_MspInit+0x40>)
 8000758:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure the priority of the system exceptions.
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	f06f 0009 	mvn.w	r0, #9
 8000766:	f000 f9ca 	bl	8000afe <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	f06f 000a 	mvn.w	r0, #10
 8000772:	f000 f9c4 	bl	8000afe <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	f06f 000b 	mvn.w	r0, #11
 800077e:	f000 f9be 	bl	8000afe <HAL_NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <HAL_UART_MspInit>:

/* UART Low level initilization */
extern "C" void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef USART3_gpio_config{0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

	// Enable the clock for USART3 peripheral.
	__HAL_RCC_USART3_CLK_ENABLE();
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]

	// Enable the clock for GPIOD peripheral.
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_UART_MspInit+0x84>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0308 	and.w	r3, r3, #8
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

	// Do the GPIO multiplexing. PD8 is USART3 Tx and PD9 is USART3 Rx.
	USART3_gpio_config.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80007d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007d8:	617b      	str	r3, [r7, #20]
	USART3_gpio_config.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
	USART3_gpio_config.Pull = GPIO_PULLUP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
	USART3_gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
	USART3_gpio_config.Alternate = GPIO_AF7_USART3;
 80007e6:	2307      	movs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &USART3_gpio_config);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_UART_MspInit+0x88>)
 80007f2:	f000 fa59 	bl	8000ca8 <HAL_GPIO_Init>

	// Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_SetPriority(USART3_IRQn, 0x0F, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	210f      	movs	r1, #15
 80007fa:	2027      	movs	r0, #39	; 0x27
 80007fc:	f000 f97f 	bl	8000afe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000800:	2027      	movs	r0, #39	; 0x27
 8000802:	f000 f998 	bl	8000b36 <HAL_NVIC_EnableIRQ>
}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40020c00 	.word	0x40020c00

08000818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000842:	490e      	ldr	r1, [pc, #56]	; (800087c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000858:	4c0b      	ldr	r4, [pc, #44]	; (8000888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000866:	f7ff ffd7 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 f913 	bl	8002a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe79 	bl	8000564 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000874:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	200000f4 	.word	0x200000f4

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>

0800088e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000892:	2003      	movs	r0, #3
 8000894:	f000 f928 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f805 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089e:	f7ff ff53 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f943 	bl	8000b52 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f90b 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	200000f0 	.word	0x200000f0

08000930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200000f0 	.word	0x200000f0

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <__NVIC_SetPriorityGrouping+0x40>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	4313      	orrs	r3, r2
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x40>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	05fa0000 	.word	0x05fa0000

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff3e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff31 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b6e:	f000 f802 	bl	8000b76 <HAL_SYSTICK_Callback>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b92:	f7ff fecd 	bl	8000930 <HAL_GetTick>
 8000b96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d008      	beq.n	8000bb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e052      	b.n	8000c5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0216 	bic.w	r2, r2, #22
 8000bc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <HAL_DMA_Abort+0x62>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0208 	bic.w	r2, r2, #8
 8000bf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0201 	bic.w	r2, r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c06:	e013      	b.n	8000c30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c08:	f7ff fe92 	bl	8000930 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d90c      	bls.n	8000c30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2220      	movs	r2, #32
 8000c1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e015      	b.n	8000c5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1e4      	bne.n	8000c08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c42:	223f      	movs	r2, #63	; 0x3f
 8000c44:	409a      	lsls	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d004      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00c      	b.n	8000c9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2205      	movs	r2, #5
 8000c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0201 	bic.w	r2, r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e175      	b.n	8000fb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 8164 	bne.w	8000fae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x56>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80be 	beq.w	8000fae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b66      	ldr	r3, [pc, #408]	; (8000fcc <HAL_GPIO_Init+0x324>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a65      	ldr	r2, [pc, #404]	; (8000fcc <HAL_GPIO_Init+0x324>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b63      	ldr	r3, [pc, #396]	; (8000fcc <HAL_GPIO_Init+0x324>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e4a:	4a61      	ldr	r2, [pc, #388]	; (8000fd0 <HAL_GPIO_Init+0x328>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <HAL_GPIO_Init+0x32c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d037      	beq.n	8000ee6 <HAL_GPIO_Init+0x23e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <HAL_GPIO_Init+0x330>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d031      	beq.n	8000ee2 <HAL_GPIO_Init+0x23a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a56      	ldr	r2, [pc, #344]	; (8000fdc <HAL_GPIO_Init+0x334>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x236>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <HAL_GPIO_Init+0x338>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x232>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a54      	ldr	r2, [pc, #336]	; (8000fe4 <HAL_GPIO_Init+0x33c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x22e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a53      	ldr	r2, [pc, #332]	; (8000fe8 <HAL_GPIO_Init+0x340>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x22a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a52      	ldr	r2, [pc, #328]	; (8000fec <HAL_GPIO_Init+0x344>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x226>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a51      	ldr	r2, [pc, #324]	; (8000ff0 <HAL_GPIO_Init+0x348>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x222>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a50      	ldr	r2, [pc, #320]	; (8000ff4 <HAL_GPIO_Init+0x34c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x21e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_GPIO_Init+0x350>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x21a>
 8000ebe:	2309      	movs	r3, #9
 8000ec0:	e012      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	e010      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	e00e      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x240>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x328>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_GPIO_Init+0x354>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae86 	bls.w	8000cc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40021c00 	.word	0x40021c00
 8000ff4:	40022000 	.word	0x40022000
 8000ff8:	40022400 	.word	0x40022400
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001000:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001018:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b08      	cmp	r3, #8
 8001022:	d00d      	beq.n	8001040 <HAL_RCC_GetSysClockFreq+0x40>
 8001024:	2b08      	cmp	r3, #8
 8001026:	f200 80bd 	bhi.w	80011a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <HAL_RCC_GetSysClockFreq+0x34>
 800102e:	2b04      	cmp	r3, #4
 8001030:	d003      	beq.n	800103a <HAL_RCC_GetSysClockFreq+0x3a>
 8001032:	e0b7      	b.n	80011a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001034:	4b61      	ldr	r3, [pc, #388]	; (80011bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001036:	60bb      	str	r3, [r7, #8]
      break;
 8001038:	e0b7      	b.n	80011aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800103c:	60bb      	str	r3, [r7, #8]
      break;
 800103e:	e0b4      	b.n	80011aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001040:	4b5d      	ldr	r3, [pc, #372]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001048:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d04d      	beq.n	80010f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001056:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	099b      	lsrs	r3, r3, #6
 800105c:	461a      	mov	r2, r3
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001066:	f04f 0100 	mov.w	r1, #0
 800106a:	ea02 0800 	and.w	r8, r2, r0
 800106e:	ea03 0901 	and.w	r9, r3, r1
 8001072:	4640      	mov	r0, r8
 8001074:	4649      	mov	r1, r9
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	014b      	lsls	r3, r1, #5
 8001080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001084:	0142      	lsls	r2, r0, #5
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	ebb0 0008 	subs.w	r0, r0, r8
 800108e:	eb61 0109 	sbc.w	r1, r1, r9
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	018b      	lsls	r3, r1, #6
 800109c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80010a0:	0182      	lsls	r2, r0, #6
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	eb63 0301 	sbc.w	r3, r3, r1
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	f04f 0100 	mov.w	r1, #0
 80010b0:	00d9      	lsls	r1, r3, #3
 80010b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80010b6:	00d0      	lsls	r0, r2, #3
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	eb12 0208 	adds.w	r2, r2, r8
 80010c0:	eb43 0309 	adc.w	r3, r3, r9
 80010c4:	f04f 0000 	mov.w	r0, #0
 80010c8:	f04f 0100 	mov.w	r1, #0
 80010cc:	0259      	lsls	r1, r3, #9
 80010ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80010d2:	0250      	lsls	r0, r2, #9
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	f7ff f8b0 	bl	8000248 <__aeabi_uldivmod>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e04a      	b.n	8001188 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	099b      	lsrs	r3, r3, #6
 80010f8:	461a      	mov	r2, r3
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001102:	f04f 0100 	mov.w	r1, #0
 8001106:	ea02 0400 	and.w	r4, r2, r0
 800110a:	ea03 0501 	and.w	r5, r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	014b      	lsls	r3, r1, #5
 800111c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001120:	0142      	lsls	r2, r0, #5
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	1b00      	subs	r0, r0, r4
 8001128:	eb61 0105 	sbc.w	r1, r1, r5
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	018b      	lsls	r3, r1, #6
 8001136:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800113a:	0182      	lsls	r2, r0, #6
 800113c:	1a12      	subs	r2, r2, r0
 800113e:	eb63 0301 	sbc.w	r3, r3, r1
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	f04f 0100 	mov.w	r1, #0
 800114a:	00d9      	lsls	r1, r3, #3
 800114c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001150:	00d0      	lsls	r0, r2, #3
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	1912      	adds	r2, r2, r4
 8001158:	eb45 0303 	adc.w	r3, r5, r3
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	f04f 0100 	mov.w	r1, #0
 8001164:	0299      	lsls	r1, r3, #10
 8001166:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800116a:	0290      	lsls	r0, r2, #10
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	461a      	mov	r2, r3
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	f7ff f864 	bl	8000248 <__aeabi_uldivmod>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4613      	mov	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	0c1b      	lsrs	r3, r3, #16
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	3301      	adds	r3, #1
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	60bb      	str	r3, [r7, #8]
      break;
 80011a2:	e002      	b.n	80011aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80011a6:	60bb      	str	r3, [r7, #8]
      break;
 80011a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011aa:	68bb      	ldr	r3, [r7, #8]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	00f42400 	.word	0x00f42400
 80011c0:	007a1200 	.word	0x007a1200

080011c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000

080011dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011e0:	f7ff fff0 	bl	80011c4 <HAL_RCC_GetHCLKFreq>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	0a9b      	lsrs	r3, r3, #10
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	4903      	ldr	r1, [pc, #12]	; (8001200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800
 8001200:	08002b0c 	.word	0x08002b0c

08001204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001208:	f7ff ffdc 	bl	80011c4 <HAL_RCC_GetHCLKFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	0b5b      	lsrs	r3, r3, #13
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	4903      	ldr	r1, [pc, #12]	; (8001228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	08002b0c 	.word	0x08002b0c

0800122c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e040      	b.n	80012c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fa9c 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2224      	movs	r2, #36	; 0x24
 8001258:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fc7c 	bl	8001b68 <UART_SetConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e022      	b.n	80012c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fed2 	bl	800202c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 ff59 	bl	8002170 <UART_CheckIdleState>
 80012be:	4603      	mov	r3, r0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012dc:	2b20      	cmp	r3, #32
 80012de:	f040 8081 	bne.w	80013e4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_UART_Transmit+0x26>
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e079      	b.n	80013e6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_UART_Transmit+0x38>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e072      	b.n	80013e6 <HAL_UART_Transmit+0x11e>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2221      	movs	r2, #33	; 0x21
 8001314:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001316:	f7ff fb0b 	bl	8000930 <HAL_GetTick>
 800131a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	88fa      	ldrh	r2, [r7, #6]
 8001320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	88fa      	ldrh	r2, [r7, #6]
 8001328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001334:	d108      	bne.n	8001348 <HAL_UART_Transmit+0x80>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d104      	bne.n	8001348 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	e003      	b.n	8001350 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8001358:	e02c      	b.n	80013b4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2200      	movs	r2, #0
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 ff4c 	bl	8002202 <UART_WaitOnFlagUntilTimeout>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e038      	b.n	80013e6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10b      	bne.n	8001392 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3302      	adds	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	e007      	b.n	80013a2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1cc      	bne.n	800135a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2200      	movs	r2, #0
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 ff19 	bl	8002202 <UART_WaitOnFlagUntilTimeout>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e005      	b.n	80013e6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2220      	movs	r2, #32
 80013de:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80013e4:	2302      	movs	r3, #2
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b08b      	sub	sp, #44	; 0x2c
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001402:	2b20      	cmp	r3, #32
 8001404:	d156      	bne.n	80014b4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_UART_Transmit_IT+0x22>
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e04f      	b.n	80014b6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_UART_Transmit_IT+0x34>
 8001420:	2302      	movs	r3, #2
 8001422:	e048      	b.n	80014b6 <HAL_UART_Transmit_IT+0xc6>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2221      	movs	r2, #33	; 0x21
 8001454:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800145e:	d107      	bne.n	8001470 <HAL_UART_Transmit_IT+0x80>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d103      	bne.n	8001470 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <HAL_UART_Transmit_IT+0xd4>)
 800146c:	669a      	str	r2, [r3, #104]	; 0x68
 800146e:	e002      	b.n	8001476 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_UART_Transmit_IT+0xd8>)
 8001474:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	e853 3f00 	ldrex	r3, [r3]
 800148a:	613b      	str	r3, [r7, #16]
   return(result);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014a0:	69f9      	ldr	r1, [r7, #28]
 80014a2:	6a3a      	ldr	r2, [r7, #32]
 80014a4:	e841 2300 	strex	r3, r2, [r1]
 80014a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e6      	bne.n	800147e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e000      	b.n	80014b6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80014b4:	2302      	movs	r3, #2
  }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	372c      	adds	r7, #44	; 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	080026c9 	.word	0x080026c9
 80014c8:	08002613 	.word	0x08002613

080014cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014de:	2b20      	cmp	r3, #32
 80014e0:	d13d      	bne.n	800155e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_UART_Receive_IT+0x22>
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e036      	b.n	8001560 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_UART_Receive_IT+0x34>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e02f      	b.n	8001560 <HAL_UART_Receive_IT+0x94>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d018      	beq.n	800154e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	e853 3f00 	ldrex	r3, [r3]
 8001528:	613b      	str	r3, [r7, #16]
   return(result);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800153e:	69f9      	ldr	r1, [r7, #28]
 8001540:	6a3a      	ldr	r2, [r7, #32]
 8001542:	e841 2300 	strex	r3, r2, [r1]
 8001546:	61bb      	str	r3, [r7, #24]
   return(result);
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e6      	bne.n	800151c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	461a      	mov	r2, r3
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 ff19 	bl	800238c <UART_Start_Receive_IT>
 800155a:	4603      	mov	r3, r0
 800155c:	e000      	b.n	8001560 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0ba      	sub	sp, #232	; 0xe8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800158e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001592:	f640 030f 	movw	r3, #2063	; 0x80f
 8001596:	4013      	ands	r3, r2
 8001598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800159c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d115      	bne.n	80015d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80015a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00f      	beq.n	80015d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80015b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 82a4 	beq.w	8001b0e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
      }
      return;
 80015ce:	e29e      	b.n	8001b0e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80015d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8117 	beq.w	8001808 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80015da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80015e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80015ea:	4b85      	ldr	r3, [pc, #532]	; (8001800 <HAL_UART_IRQHandler+0x298>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 810a 	beq.w	8001808 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80015f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d011      	beq.n	8001624 <HAL_UART_IRQHandler+0xbc>
 8001600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d011      	beq.n	8001654 <HAL_UART_IRQHandler+0xec>
 8001630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2202      	movs	r2, #2
 8001642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800164a:	f043 0204 	orr.w	r2, r3, #4
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d011      	beq.n	8001684 <HAL_UART_IRQHandler+0x11c>
 8001660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2204      	movs	r2, #4
 8001672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	f043 0202 	orr.w	r2, r3, #2
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d017      	beq.n	80016c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800169c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2208      	movs	r2, #8
 80016ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016b6:	f043 0208 	orr.w	r2, r3, #8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80016c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d012      	beq.n	80016f2 <HAL_UART_IRQHandler+0x18a>
 80016cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e8:	f043 0220 	orr.w	r2, r3, #32
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 820a 	beq.w	8001b12 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80016fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00d      	beq.n	8001726 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800170a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800172c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d005      	beq.n	800174a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800173e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001742:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04f      	beq.n	80017ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fee8 	bl	8002520 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d141      	bne.n	80017e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3308      	adds	r3, #8
 8001764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800176c:	e853 3f00 	ldrex	r3, [r3]
 8001770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800177c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3308      	adds	r3, #8
 8001786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800178a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800178e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800179a:	e841 2300 	strex	r3, r2, [r1]
 800179e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80017a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1d9      	bne.n	800175e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d013      	beq.n	80017da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_UART_IRQHandler+0x29c>)
 80017b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fa50 	bl	8000c64 <HAL_DMA_Abort_IT>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d017      	beq.n	80017fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80017d4:	4610      	mov	r0, r2
 80017d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017d8:	e00f      	b.n	80017fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f9a4 	bl	8001b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017e0:	e00b      	b.n	80017fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f9a0 	bl	8001b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017e8:	e007      	b.n	80017fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f99c 	bl	8001b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80017f8:	e18b      	b.n	8001b12 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017fa:	bf00      	nop
    return;
 80017fc:	e189      	b.n	8001b12 <HAL_UART_IRQHandler+0x5aa>
 80017fe:	bf00      	nop
 8001800:	04000120 	.word	0x04000120
 8001804:	080025e7 	.word	0x080025e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	2b01      	cmp	r3, #1
 800180e:	f040 8144 	bne.w	8001a9a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 813d 	beq.w	8001a9a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8136 	beq.w	8001a9a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2210      	movs	r2, #16
 8001834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	f040 80b2 	bne.w	80019aa <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001852:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 815d 	beq.w	8001b16 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001866:	429a      	cmp	r2, r3
 8001868:	f080 8155 	bcs.w	8001b16 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001872:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001880:	f000 8085 	beq.w	800198e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800188c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001890:	e853 3f00 	ldrex	r3, [r3]
 8001894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800189c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80018ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018be:	e841 2300 	strex	r3, r2, [r1]
 80018c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80018c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1da      	bne.n	8001884 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3308      	adds	r3, #8
 80018d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d8:	e853 3f00 	ldrex	r3, [r3]
 80018dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80018de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3308      	adds	r3, #8
 80018ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80018f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80018fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80018fe:	e841 2300 	strex	r3, r2, [r1]
 8001902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1e1      	bne.n	80018ce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3308      	adds	r3, #8
 8001910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001914:	e853 3f00 	ldrex	r3, [r3]
 8001918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800191a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3308      	adds	r3, #8
 800192a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800192e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001936:	e841 2300 	strex	r3, r2, [r1]
 800193a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800193c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1e3      	bne.n	800190a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001956:	e853 3f00 	ldrex	r3, [r3]
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800195c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195e:	f023 0310 	bic.w	r3, r3, #16
 8001962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001970:	65bb      	str	r3, [r7, #88]	; 0x58
 8001972:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001978:	e841 2300 	strex	r3, r2, [r1]
 800197c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800197e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e4      	bne.n	800194e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f8fb 	bl	8000b84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800199a:	b29b      	uxth	r3, r3
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8ca 	bl	8001b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80019a8:	e0b5      	b.n	8001b16 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80a7 	beq.w	8001b1a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80019cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a2 	beq.w	8001b1a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019de:	e853 3f00 	ldrex	r3, [r3]
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80019ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
 80019fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a00:	e841 2300 	strex	r3, r2, [r1]
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e4      	bne.n	80019d6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3308      	adds	r3, #8
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	e853 3f00 	ldrex	r3, [r3]
 8001a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a30:	633a      	str	r2, [r7, #48]	; 0x30
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a38:	e841 2300 	strex	r3, r2, [r1]
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e3      	bne.n	8001a0c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	e853 3f00 	ldrex	r3, [r3]
 8001a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 0310 	bic.w	r3, r3, #16
 8001a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a7c:	69b9      	ldr	r1, [r7, #24]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	e841 2300 	strex	r3, r2, [r1]
 8001a84:	617b      	str	r3, [r7, #20]
   return(result);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e4      	bne.n	8001a56 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f852 	bl	8001b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001a98:	e03f      	b.n	8001b1a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x55c>
 8001aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d008      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f849 	bl	8001b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001ac2:	e02d      	b.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00e      	beq.n	8001aee <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
    }
    return;
 8001aec:	e017      	b.n	8001b1e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
 8001afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00c      	beq.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fe3e 	bl	8002788 <UART_EndTransmit_IT>
    return;
 8001b0c:	e008      	b.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
      return;
 8001b0e:	bf00      	nop
 8001b10:	e006      	b.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
    return;
 8001b12:	bf00      	nop
 8001b14:	e004      	b.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
      return;
 8001b16:	bf00      	nop
 8001b18:	e002      	b.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
      return;
 8001b1a:	bf00      	nop
 8001b1c:	e000      	b.n	8001b20 <HAL_UART_IRQHandler+0x5b8>
    return;
 8001b1e:	bf00      	nop
  }

}
 8001b20:	37e8      	adds	r7, #232	; 0xe8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop

08001b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4ba7      	ldr	r3, [pc, #668]	; (8001e30 <UART_SetConfig+0x2c8>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	6979      	ldr	r1, [r7, #20]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a95      	ldr	r2, [pc, #596]	; (8001e34 <UART_SetConfig+0x2cc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d120      	bne.n	8001c26 <UART_SetConfig+0xbe>
 8001be4:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d816      	bhi.n	8001c20 <UART_SetConfig+0xb8>
 8001bf2:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <UART_SetConfig+0x90>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c09 	.word	0x08001c09
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c0f 	.word	0x08001c0f
 8001c04:	08001c1b 	.word	0x08001c1b
 8001c08:	2301      	movs	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]
 8001c0c:	e14f      	b.n	8001eae <UART_SetConfig+0x346>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	77fb      	strb	r3, [r7, #31]
 8001c12:	e14c      	b.n	8001eae <UART_SetConfig+0x346>
 8001c14:	2304      	movs	r3, #4
 8001c16:	77fb      	strb	r3, [r7, #31]
 8001c18:	e149      	b.n	8001eae <UART_SetConfig+0x346>
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	77fb      	strb	r3, [r7, #31]
 8001c1e:	e146      	b.n	8001eae <UART_SetConfig+0x346>
 8001c20:	2310      	movs	r3, #16
 8001c22:	77fb      	strb	r3, [r7, #31]
 8001c24:	e143      	b.n	8001eae <UART_SetConfig+0x346>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a84      	ldr	r2, [pc, #528]	; (8001e3c <UART_SetConfig+0x2d4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d132      	bne.n	8001c96 <UART_SetConfig+0x12e>
 8001c30:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d828      	bhi.n	8001c90 <UART_SetConfig+0x128>
 8001c3e:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <UART_SetConfig+0xdc>)
 8001c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c44:	08001c79 	.word	0x08001c79
 8001c48:	08001c91 	.word	0x08001c91
 8001c4c:	08001c91 	.word	0x08001c91
 8001c50:	08001c91 	.word	0x08001c91
 8001c54:	08001c85 	.word	0x08001c85
 8001c58:	08001c91 	.word	0x08001c91
 8001c5c:	08001c91 	.word	0x08001c91
 8001c60:	08001c91 	.word	0x08001c91
 8001c64:	08001c7f 	.word	0x08001c7f
 8001c68:	08001c91 	.word	0x08001c91
 8001c6c:	08001c91 	.word	0x08001c91
 8001c70:	08001c91 	.word	0x08001c91
 8001c74:	08001c8b 	.word	0x08001c8b
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
 8001c7c:	e117      	b.n	8001eae <UART_SetConfig+0x346>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	77fb      	strb	r3, [r7, #31]
 8001c82:	e114      	b.n	8001eae <UART_SetConfig+0x346>
 8001c84:	2304      	movs	r3, #4
 8001c86:	77fb      	strb	r3, [r7, #31]
 8001c88:	e111      	b.n	8001eae <UART_SetConfig+0x346>
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	77fb      	strb	r3, [r7, #31]
 8001c8e:	e10e      	b.n	8001eae <UART_SetConfig+0x346>
 8001c90:	2310      	movs	r3, #16
 8001c92:	77fb      	strb	r3, [r7, #31]
 8001c94:	e10b      	b.n	8001eae <UART_SetConfig+0x346>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a69      	ldr	r2, [pc, #420]	; (8001e40 <UART_SetConfig+0x2d8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d120      	bne.n	8001ce2 <UART_SetConfig+0x17a>
 8001ca0:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001caa:	2b30      	cmp	r3, #48	; 0x30
 8001cac:	d013      	beq.n	8001cd6 <UART_SetConfig+0x16e>
 8001cae:	2b30      	cmp	r3, #48	; 0x30
 8001cb0:	d814      	bhi.n	8001cdc <UART_SetConfig+0x174>
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d009      	beq.n	8001cca <UART_SetConfig+0x162>
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d810      	bhi.n	8001cdc <UART_SetConfig+0x174>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <UART_SetConfig+0x15c>
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d006      	beq.n	8001cd0 <UART_SetConfig+0x168>
 8001cc2:	e00b      	b.n	8001cdc <UART_SetConfig+0x174>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	77fb      	strb	r3, [r7, #31]
 8001cc8:	e0f1      	b.n	8001eae <UART_SetConfig+0x346>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	77fb      	strb	r3, [r7, #31]
 8001cce:	e0ee      	b.n	8001eae <UART_SetConfig+0x346>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	77fb      	strb	r3, [r7, #31]
 8001cd4:	e0eb      	b.n	8001eae <UART_SetConfig+0x346>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	77fb      	strb	r3, [r7, #31]
 8001cda:	e0e8      	b.n	8001eae <UART_SetConfig+0x346>
 8001cdc:	2310      	movs	r3, #16
 8001cde:	77fb      	strb	r3, [r7, #31]
 8001ce0:	e0e5      	b.n	8001eae <UART_SetConfig+0x346>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <UART_SetConfig+0x2dc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d120      	bne.n	8001d2e <UART_SetConfig+0x1c6>
 8001cec:	4b52      	ldr	r3, [pc, #328]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8001cf8:	d013      	beq.n	8001d22 <UART_SetConfig+0x1ba>
 8001cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8001cfc:	d814      	bhi.n	8001d28 <UART_SetConfig+0x1c0>
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d009      	beq.n	8001d16 <UART_SetConfig+0x1ae>
 8001d02:	2b80      	cmp	r3, #128	; 0x80
 8001d04:	d810      	bhi.n	8001d28 <UART_SetConfig+0x1c0>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <UART_SetConfig+0x1a8>
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d006      	beq.n	8001d1c <UART_SetConfig+0x1b4>
 8001d0e:	e00b      	b.n	8001d28 <UART_SetConfig+0x1c0>
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
 8001d14:	e0cb      	b.n	8001eae <UART_SetConfig+0x346>
 8001d16:	2302      	movs	r3, #2
 8001d18:	77fb      	strb	r3, [r7, #31]
 8001d1a:	e0c8      	b.n	8001eae <UART_SetConfig+0x346>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	77fb      	strb	r3, [r7, #31]
 8001d20:	e0c5      	b.n	8001eae <UART_SetConfig+0x346>
 8001d22:	2308      	movs	r3, #8
 8001d24:	77fb      	strb	r3, [r7, #31]
 8001d26:	e0c2      	b.n	8001eae <UART_SetConfig+0x346>
 8001d28:	2310      	movs	r3, #16
 8001d2a:	77fb      	strb	r3, [r7, #31]
 8001d2c:	e0bf      	b.n	8001eae <UART_SetConfig+0x346>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <UART_SetConfig+0x2e0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d125      	bne.n	8001d84 <UART_SetConfig+0x21c>
 8001d38:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d46:	d017      	beq.n	8001d78 <UART_SetConfig+0x210>
 8001d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d4c:	d817      	bhi.n	8001d7e <UART_SetConfig+0x216>
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d52:	d00b      	beq.n	8001d6c <UART_SetConfig+0x204>
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d58:	d811      	bhi.n	8001d7e <UART_SetConfig+0x216>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <UART_SetConfig+0x1fe>
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d62:	d006      	beq.n	8001d72 <UART_SetConfig+0x20a>
 8001d64:	e00b      	b.n	8001d7e <UART_SetConfig+0x216>
 8001d66:	2300      	movs	r3, #0
 8001d68:	77fb      	strb	r3, [r7, #31]
 8001d6a:	e0a0      	b.n	8001eae <UART_SetConfig+0x346>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	77fb      	strb	r3, [r7, #31]
 8001d70:	e09d      	b.n	8001eae <UART_SetConfig+0x346>
 8001d72:	2304      	movs	r3, #4
 8001d74:	77fb      	strb	r3, [r7, #31]
 8001d76:	e09a      	b.n	8001eae <UART_SetConfig+0x346>
 8001d78:	2308      	movs	r3, #8
 8001d7a:	77fb      	strb	r3, [r7, #31]
 8001d7c:	e097      	b.n	8001eae <UART_SetConfig+0x346>
 8001d7e:	2310      	movs	r3, #16
 8001d80:	77fb      	strb	r3, [r7, #31]
 8001d82:	e094      	b.n	8001eae <UART_SetConfig+0x346>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <UART_SetConfig+0x2e4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d125      	bne.n	8001dda <UART_SetConfig+0x272>
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d9c:	d017      	beq.n	8001dce <UART_SetConfig+0x266>
 8001d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001da2:	d817      	bhi.n	8001dd4 <UART_SetConfig+0x26c>
 8001da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da8:	d00b      	beq.n	8001dc2 <UART_SetConfig+0x25a>
 8001daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dae:	d811      	bhi.n	8001dd4 <UART_SetConfig+0x26c>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <UART_SetConfig+0x254>
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d006      	beq.n	8001dc8 <UART_SetConfig+0x260>
 8001dba:	e00b      	b.n	8001dd4 <UART_SetConfig+0x26c>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77fb      	strb	r3, [r7, #31]
 8001dc0:	e075      	b.n	8001eae <UART_SetConfig+0x346>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	77fb      	strb	r3, [r7, #31]
 8001dc6:	e072      	b.n	8001eae <UART_SetConfig+0x346>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	77fb      	strb	r3, [r7, #31]
 8001dcc:	e06f      	b.n	8001eae <UART_SetConfig+0x346>
 8001dce:	2308      	movs	r3, #8
 8001dd0:	77fb      	strb	r3, [r7, #31]
 8001dd2:	e06c      	b.n	8001eae <UART_SetConfig+0x346>
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	77fb      	strb	r3, [r7, #31]
 8001dd8:	e069      	b.n	8001eae <UART_SetConfig+0x346>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <UART_SetConfig+0x2e8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d137      	bne.n	8001e54 <UART_SetConfig+0x2ec>
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <UART_SetConfig+0x2d0>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001df2:	d017      	beq.n	8001e24 <UART_SetConfig+0x2bc>
 8001df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001df8:	d817      	bhi.n	8001e2a <UART_SetConfig+0x2c2>
 8001dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfe:	d00b      	beq.n	8001e18 <UART_SetConfig+0x2b0>
 8001e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e04:	d811      	bhi.n	8001e2a <UART_SetConfig+0x2c2>
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <UART_SetConfig+0x2aa>
 8001e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0e:	d006      	beq.n	8001e1e <UART_SetConfig+0x2b6>
 8001e10:	e00b      	b.n	8001e2a <UART_SetConfig+0x2c2>
 8001e12:	2300      	movs	r3, #0
 8001e14:	77fb      	strb	r3, [r7, #31]
 8001e16:	e04a      	b.n	8001eae <UART_SetConfig+0x346>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	77fb      	strb	r3, [r7, #31]
 8001e1c:	e047      	b.n	8001eae <UART_SetConfig+0x346>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	77fb      	strb	r3, [r7, #31]
 8001e22:	e044      	b.n	8001eae <UART_SetConfig+0x346>
 8001e24:	2308      	movs	r3, #8
 8001e26:	77fb      	strb	r3, [r7, #31]
 8001e28:	e041      	b.n	8001eae <UART_SetConfig+0x346>
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	77fb      	strb	r3, [r7, #31]
 8001e2e:	e03e      	b.n	8001eae <UART_SetConfig+0x346>
 8001e30:	efff69f3 	.word	0xefff69f3
 8001e34:	40011000 	.word	0x40011000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40004400 	.word	0x40004400
 8001e40:	40004800 	.word	0x40004800
 8001e44:	40004c00 	.word	0x40004c00
 8001e48:	40005000 	.word	0x40005000
 8001e4c:	40011400 	.word	0x40011400
 8001e50:	40007800 	.word	0x40007800
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a71      	ldr	r2, [pc, #452]	; (8002020 <UART_SetConfig+0x4b8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d125      	bne.n	8001eaa <UART_SetConfig+0x342>
 8001e5e:	4b71      	ldr	r3, [pc, #452]	; (8002024 <UART_SetConfig+0x4bc>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e6c:	d017      	beq.n	8001e9e <UART_SetConfig+0x336>
 8001e6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e72:	d817      	bhi.n	8001ea4 <UART_SetConfig+0x33c>
 8001e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e78:	d00b      	beq.n	8001e92 <UART_SetConfig+0x32a>
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7e:	d811      	bhi.n	8001ea4 <UART_SetConfig+0x33c>
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <UART_SetConfig+0x324>
 8001e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e88:	d006      	beq.n	8001e98 <UART_SetConfig+0x330>
 8001e8a:	e00b      	b.n	8001ea4 <UART_SetConfig+0x33c>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
 8001e90:	e00d      	b.n	8001eae <UART_SetConfig+0x346>
 8001e92:	2302      	movs	r3, #2
 8001e94:	77fb      	strb	r3, [r7, #31]
 8001e96:	e00a      	b.n	8001eae <UART_SetConfig+0x346>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	77fb      	strb	r3, [r7, #31]
 8001e9c:	e007      	b.n	8001eae <UART_SetConfig+0x346>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	77fb      	strb	r3, [r7, #31]
 8001ea2:	e004      	b.n	8001eae <UART_SetConfig+0x346>
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	77fb      	strb	r3, [r7, #31]
 8001ea8:	e001      	b.n	8001eae <UART_SetConfig+0x346>
 8001eaa:	2310      	movs	r3, #16
 8001eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb6:	d15a      	bne.n	8001f6e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d827      	bhi.n	8001f0e <UART_SetConfig+0x3a6>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <UART_SetConfig+0x35c>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ee9 	.word	0x08001ee9
 8001ec8:	08001ef1 	.word	0x08001ef1
 8001ecc:	08001ef9 	.word	0x08001ef9
 8001ed0:	08001f0f 	.word	0x08001f0f
 8001ed4:	08001eff 	.word	0x08001eff
 8001ed8:	08001f0f 	.word	0x08001f0f
 8001edc:	08001f0f 	.word	0x08001f0f
 8001ee0:	08001f0f 	.word	0x08001f0f
 8001ee4:	08001f07 	.word	0x08001f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ee8:	f7ff f978 	bl	80011dc <HAL_RCC_GetPCLK1Freq>
 8001eec:	61b8      	str	r0, [r7, #24]
        break;
 8001eee:	e013      	b.n	8001f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001ef0:	f7ff f988 	bl	8001204 <HAL_RCC_GetPCLK2Freq>
 8001ef4:	61b8      	str	r0, [r7, #24]
        break;
 8001ef6:	e00f      	b.n	8001f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <UART_SetConfig+0x4c0>)
 8001efa:	61bb      	str	r3, [r7, #24]
        break;
 8001efc:	e00c      	b.n	8001f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001efe:	f7ff f87f 	bl	8001000 <HAL_RCC_GetSysClockFreq>
 8001f02:	61b8      	str	r0, [r7, #24]
        break;
 8001f04:	e008      	b.n	8001f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0a:	61bb      	str	r3, [r7, #24]
        break;
 8001f0c:	e004      	b.n	8001f18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	77bb      	strb	r3, [r7, #30]
        break;
 8001f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d074      	beq.n	8002008 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	005a      	lsls	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	441a      	add	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	d916      	bls.n	8001f68 <UART_SetConfig+0x400>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d212      	bcs.n	8001f68 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f023 030f 	bic.w	r3, r3, #15
 8001f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	89fb      	ldrh	r3, [r7, #14]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	89fa      	ldrh	r2, [r7, #14]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	e04f      	b.n	8002008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	77bb      	strb	r3, [r7, #30]
 8001f6c:	e04c      	b.n	8002008 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d828      	bhi.n	8001fc6 <UART_SetConfig+0x45e>
 8001f74:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <UART_SetConfig+0x414>)
 8001f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7a:	bf00      	nop
 8001f7c:	08001fa1 	.word	0x08001fa1
 8001f80:	08001fa9 	.word	0x08001fa9
 8001f84:	08001fb1 	.word	0x08001fb1
 8001f88:	08001fc7 	.word	0x08001fc7
 8001f8c:	08001fb7 	.word	0x08001fb7
 8001f90:	08001fc7 	.word	0x08001fc7
 8001f94:	08001fc7 	.word	0x08001fc7
 8001f98:	08001fc7 	.word	0x08001fc7
 8001f9c:	08001fbf 	.word	0x08001fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fa0:	f7ff f91c 	bl	80011dc <HAL_RCC_GetPCLK1Freq>
 8001fa4:	61b8      	str	r0, [r7, #24]
        break;
 8001fa6:	e013      	b.n	8001fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fa8:	f7ff f92c 	bl	8001204 <HAL_RCC_GetPCLK2Freq>
 8001fac:	61b8      	str	r0, [r7, #24]
        break;
 8001fae:	e00f      	b.n	8001fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <UART_SetConfig+0x4c0>)
 8001fb2:	61bb      	str	r3, [r7, #24]
        break;
 8001fb4:	e00c      	b.n	8001fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fb6:	f7ff f823 	bl	8001000 <HAL_RCC_GetSysClockFreq>
 8001fba:	61b8      	str	r0, [r7, #24]
        break;
 8001fbc:	e008      	b.n	8001fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc2:	61bb      	str	r3, [r7, #24]
        break;
 8001fc4:	e004      	b.n	8001fd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8001fce:	bf00      	nop
    }

    if (pclk != 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d018      	beq.n	8002008 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	085a      	lsrs	r2, r3, #1
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	441a      	add	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d909      	bls.n	8002004 <UART_SetConfig+0x49c>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d205      	bcs.n	8002004 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	e001      	b.n	8002008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002014:	7fbb      	ldrb	r3, [r7, #30]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40007c00 	.word	0x40007c00
 8002024:	40023800 	.word	0x40023800
 8002028:	00f42400 	.word	0x00f42400

0800202c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01a      	beq.n	8002142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800212a:	d10a      	bne.n	8002142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	605a      	str	r2, [r3, #4]
  }
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002180:	f7fe fbd6 	bl	8000930 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b08      	cmp	r3, #8
 8002192:	d10e      	bne.n	80021b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f82d 	bl	8002202 <UART_WaitOnFlagUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e023      	b.n	80021fa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d10e      	bne.n	80021de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f817 	bl	8002202 <UART_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e00d      	b.n	80021fa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b09c      	sub	sp, #112	; 0x70
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002212:	e0a5      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	f000 80a1 	beq.w	8002360 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7fe fb87 	bl	8000930 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <UART_WaitOnFlagUntilTimeout+0x32>
 800222e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002230:	2b00      	cmp	r3, #0
 8002232:	d13e      	bne.n	80022b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223c:	e853 3f00 	ldrex	r3, [r3]
 8002240:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002254:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002258:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e6      	bne.n	8002234 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3308      	adds	r3, #8
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	663b      	str	r3, [r7, #96]	; 0x60
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3308      	adds	r3, #8
 8002284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002286:	64ba      	str	r2, [r7, #72]	; 0x48
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800228c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800228e:	e841 2300 	strex	r3, r2, [r1]
 8002292:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1e5      	bne.n	8002266 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e067      	b.n	8002382 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d04f      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ce:	d147      	bne.n	8002360 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	e853 3f00 	ldrex	r3, [r3]
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
 80022fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002300:	e841 2300 	strex	r3, r2, [r1]
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e6      	bne.n	80022da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3308      	adds	r3, #8
 8002312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	e853 3f00 	ldrex	r3, [r3]
 800231a:	613b      	str	r3, [r7, #16]
   return(result);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	66bb      	str	r3, [r7, #104]	; 0x68
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3308      	adds	r3, #8
 800232a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800232c:	623a      	str	r2, [r7, #32]
 800232e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002330:	69f9      	ldr	r1, [r7, #28]
 8002332:	6a3a      	ldr	r2, [r7, #32]
 8002334:	e841 2300 	strex	r3, r2, [r1]
 8002338:	61bb      	str	r3, [r7, #24]
   return(result);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e5      	bne.n	800230c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e010      	b.n	8002382 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	f43f af4a 	beq.w	8002214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3770      	adds	r7, #112	; 0x70
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800238c:	b480      	push	{r7}
 800238e:	b097      	sub	sp, #92	; 0x5c
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d10e      	bne.n	80023de <UART_Start_Receive_IT+0x52>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <UART_Start_Receive_IT+0x48>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80023ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023d2:	e02d      	b.n	8002430 <UART_Start_Receive_IT+0xa4>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023dc:	e028      	b.n	8002430 <UART_Start_Receive_IT+0xa4>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <UART_Start_Receive_IT+0x76>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d104      	bne.n	80023f8 <UART_Start_Receive_IT+0x6c>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	22ff      	movs	r2, #255	; 0xff
 80023f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023f6:	e01b      	b.n	8002430 <UART_Start_Receive_IT+0xa4>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	227f      	movs	r2, #127	; 0x7f
 80023fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002400:	e016      	b.n	8002430 <UART_Start_Receive_IT+0xa4>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240a:	d10d      	bne.n	8002428 <UART_Start_Receive_IT+0x9c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <UART_Start_Receive_IT+0x92>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	227f      	movs	r2, #127	; 0x7f
 8002418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800241c:	e008      	b.n	8002430 <UART_Start_Receive_IT+0xa4>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	223f      	movs	r2, #63	; 0x3f
 8002422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002426:	e003      	b.n	8002430 <UART_Start_Receive_IT+0xa4>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2222      	movs	r2, #34	; 0x22
 800243c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3308      	adds	r3, #8
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	e853 3f00 	ldrex	r3, [r3]
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	657b      	str	r3, [r7, #84]	; 0x54
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3308      	adds	r3, #8
 800245c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800245e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002466:	e841 2300 	strex	r3, r2, [r1]
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800246c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e5      	bne.n	800243e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	d107      	bne.n	800248c <UART_Start_Receive_IT+0x100>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a24      	ldr	r2, [pc, #144]	; (8002518 <UART_Start_Receive_IT+0x18c>)
 8002488:	665a      	str	r2, [r3, #100]	; 0x64
 800248a:	e002      	b.n	8002492 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a23      	ldr	r2, [pc, #140]	; (800251c <UART_Start_Receive_IT+0x190>)
 8002490:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	e853 3f00 	ldrex	r3, [r3]
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80024b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
 80024c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024c8:	e841 2300 	strex	r3, r2, [r1]
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e6      	bne.n	80024a2 <UART_Start_Receive_IT+0x116>
 80024d4:	e018      	b.n	8002508 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	613b      	str	r3, [r7, #16]
   return(result);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f043 0320 	orr.w	r3, r3, #32
 80024ea:	653b      	str	r3, [r7, #80]	; 0x50
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	69f9      	ldr	r1, [r7, #28]
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	61bb      	str	r3, [r7, #24]
   return(result);
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e6      	bne.n	80024d6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	375c      	adds	r7, #92	; 0x5c
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	08002939 	.word	0x08002939
 800251c:	080027dd 	.word	0x080027dd

08002520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002520:	b480      	push	{r7}
 8002522:	b095      	sub	sp, #84	; 0x54
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	e853 3f00 	ldrex	r3, [r3]
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800253c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
 8002548:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800254c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800254e:	e841 2300 	strex	r3, r2, [r1]
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e6      	bne.n	8002528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3308      	adds	r3, #8
 8002560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	e853 3f00 	ldrex	r3, [r3]
 8002568:	61fb      	str	r3, [r7, #28]
   return(result);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	64bb      	str	r3, [r7, #72]	; 0x48
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3308      	adds	r3, #8
 8002578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800257a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e5      	bne.n	800255a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	2b01      	cmp	r3, #1
 8002594:	d118      	bne.n	80025c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0310 	bic.w	r3, r3, #16
 80025aa:	647b      	str	r3, [r7, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6979      	ldr	r1, [r7, #20]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	613b      	str	r3, [r7, #16]
   return(result);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e6      	bne.n	8002596 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80025da:	bf00      	nop
 80025dc:	3754      	adds	r7, #84	; 0x54
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7ff fa8f 	bl	8001b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002612:	b480      	push	{r7}
 8002614:	b08f      	sub	sp, #60	; 0x3c
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261e:	2b21      	cmp	r3, #33	; 0x21
 8002620:	d14c      	bne.n	80026bc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d132      	bne.n	8002694 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	e853 3f00 	ldrex	r3, [r3]
 800263a:	61fb      	str	r3, [r7, #28]
   return(result);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	e841 2300 	strex	r3, r2, [r1]
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1e6      	bne.n	800262e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	60bb      	str	r3, [r7, #8]
   return(result);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	6979      	ldr	r1, [r7, #20]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	613b      	str	r3, [r7, #16]
   return(result);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e6      	bne.n	8002660 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002692:	e013      	b.n	80026bc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80026bc:	bf00      	nop
 80026be:	373c      	adds	r7, #60	; 0x3c
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b091      	sub	sp, #68	; 0x44
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d4:	2b21      	cmp	r3, #33	; 0x21
 80026d6:	d151      	bne.n	800277c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d132      	bne.n	800274a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	e853 3f00 	ldrex	r3, [r3]
 80026f0:	623b      	str	r3, [r7, #32]
   return(result);
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
 8002704:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	e841 2300 	strex	r3, r2, [r1]
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1e6      	bne.n	80026e4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	e853 3f00 	ldrex	r3, [r3]
 8002722:	60fb      	str	r3, [r7, #12]
   return(result);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	e841 2300 	strex	r3, r2, [r1]
 8002740:	617b      	str	r3, [r7, #20]
   return(result);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e6      	bne.n	8002716 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002748:	e018      	b.n	800277c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800277c:	bf00      	nop
 800277e:	3744      	adds	r7, #68	; 0x44
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	60bb      	str	r3, [r7, #8]
   return(result);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b2:	6979      	ldr	r1, [r7, #20]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	e841 2300 	strex	r3, r2, [r1]
 80027ba:	613b      	str	r3, [r7, #16]
   return(result);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1e6      	bne.n	8002790 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fd ff5a 	bl	8000688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b096      	sub	sp, #88	; 0x58
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f2:	2b22      	cmp	r3, #34	; 0x22
 80027f4:	f040 8094 	bne.w	8002920 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002802:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002806:	b2d9      	uxtb	r1, r3
 8002808:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	400a      	ands	r2, r1
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d177      	bne.n	8002930 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002854:	653b      	str	r3, [r7, #80]	; 0x50
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
 8002860:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800286c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e6      	bne.n	8002840 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3308      	adds	r3, #8
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	623b      	str	r3, [r7, #32]
   return(result);
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3308      	adds	r3, #8
 8002890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002892:	633a      	str	r2, [r7, #48]	; 0x30
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e5      	bne.n	8002872 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d12e      	bne.n	8002918 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f023 0310 	bic.w	r3, r3, #16
 80028d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	617b      	str	r3, [r7, #20]
   return(result);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e6      	bne.n	80028c0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d103      	bne.n	8002908 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2210      	movs	r2, #16
 8002906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff f913 	bl	8001b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002916:	e00b      	b.n	8002930 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fd fe57 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 800291e:	e007      	b.n	8002930 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	619a      	str	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	3758      	adds	r7, #88	; 0x58
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b096      	sub	sp, #88	; 0x58
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002946:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800294e:	2b22      	cmp	r3, #34	; 0x22
 8002950:	f040 8094 	bne.w	8002a7c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8002964:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002968:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800296c:	4013      	ands	r3, r2
 800296e:	b29a      	uxth	r2, r3
 8002970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002972:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d177      	bne.n	8002a8c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	e853 3f00 	ldrex	r3, [r3]
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40
 80029bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029c2:	e841 2300 	strex	r3, r2, [r1]
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e6      	bne.n	800299c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3308      	adds	r3, #8
 80029d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3308      	adds	r3, #8
 80029ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f6:	e841 2300 	strex	r3, r2, [r1]
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1e5      	bne.n	80029ce <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d12e      	bne.n	8002a74 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f023 0310 	bic.w	r3, r3, #16
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	e841 2300 	strex	r3, r2, [r1]
 8002a46:	613b      	str	r3, [r7, #16]
   return(result);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e6      	bne.n	8002a1c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d103      	bne.n	8002a64 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff f865 	bl	8001b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a72:	e00b      	b.n	8002a8c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fd fda9 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 8002a7a:	e007      	b.n	8002a8c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0208 	orr.w	r2, r2, #8
 8002a8a:	619a      	str	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	3758      	adds	r7, #88	; 0x58
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4d0d      	ldr	r5, [pc, #52]	; (8002acc <__libc_init_array+0x38>)
 8002a98:	4c0d      	ldr	r4, [pc, #52]	; (8002ad0 <__libc_init_array+0x3c>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	4d0b      	ldr	r5, [pc, #44]	; (8002ad4 <__libc_init_array+0x40>)
 8002aa6:	4c0c      	ldr	r4, [pc, #48]	; (8002ad8 <__libc_init_array+0x44>)
 8002aa8:	f000 f818 	bl	8002adc <_init>
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	08002b1c 	.word	0x08002b1c
 8002ad0:	08002b1c 	.word	0x08002b1c
 8002ad4:	08002b1c 	.word	0x08002b1c
 8002ad8:	08002b20 	.word	0x08002b20

08002adc <_init>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr

08002ae8 <_fini>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr
