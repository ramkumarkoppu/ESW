
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a68  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c90  08002c90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002ca4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002ca4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5f0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001877  00000000  00000000  0002b62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002d670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002680b  00000000  00000000  0002dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a751  00000000  00000000  000545ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f04b6  00000000  00000000  0005ecfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f1b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e48  00000000  00000000  0014f208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002c48 	.word	0x08002c48

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002c48 	.word	0x08002c48

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fa1e 	bl	8000986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f817 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8b7 	bl	80006c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000552:	f000 f885 	bl	8000660 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  const char *pMsg = "Hello World!";
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <main+0x34>)
 8000558:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit( &huart3, (const uint8_t *)pMsg, strlen(pMsg), HAL_MAX_DELAY );
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff fe6c 	bl	8000238 <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <main+0x38>)
 800056c:	f001 fe9a 	bl	80022a4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x30>
 8000572:	bf00      	nop
 8000574:	08002c60 	.word	0x08002c60
 8000578:	20000028 	.word	0x20000028

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fb54 	bl	8002c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a0:	f000 fcfa 	bl	8000f98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <SystemClock_Config+0xdc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <SystemClock_Config+0xdc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xdc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <SystemClock_Config+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <SystemClock_Config+0xe0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xe0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005f0:	2360      	movs	r3, #96	; 0x60
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fd27 	bl	8001058 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 f8ca 	bl	80007a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000614:	f000 fcd0 	bl	8000fb8 <HAL_PWREx_EnableOverDrive>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800061e:	f000 f8c3 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2103      	movs	r1, #3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ffb8 	bl	80015b4 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800064a:	f000 f8ad 	bl	80007a8 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART3_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART3_UART_Init+0x58>)
 80006a4:	f001 fdb0 	bl	8002208 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f87b 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40004800 	.word	0x40004800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_GPIO_Init+0xdc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a30      	ldr	r2, [pc, #192]	; (800079c <MX_GPIO_Init+0xdc>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b2e      	ldr	r3, [pc, #184]	; (800079c <MX_GPIO_Init+0xdc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_GPIO_Init+0xdc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2a      	ldr	r2, [pc, #168]	; (800079c <MX_GPIO_Init+0xdc>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_GPIO_Init+0xdc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_GPIO_Init+0xdc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a24      	ldr	r2, [pc, #144]	; (800079c <MX_GPIO_Init+0xdc>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_GPIO_Init+0xdc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xdc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xdc>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xdc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0xdc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <MX_GPIO_Init+0xdc>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0xdc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f244 0181 	movw	r1, #16513	; 0x4081
 8000754:	4812      	ldr	r0, [pc, #72]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000756:	f000 fc05 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000760:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_GPIO_Init+0xe4>)
 8000772:	f000 fa4b 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000776:	f244 0381 	movw	r3, #16513	; 0x4081
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xe0>)
 8000790:	f000 fa3c 	bl	8000c0c <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ae      	sub	sp, #184	; 0xb8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2290      	movs	r2, #144	; 0x90
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fa0b 	bl	8002c38 <memset>
  if(huart->Instance==USART3)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <HAL_UART_MspInit+0xb4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d13c      	bne.n	80008a6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800082c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000830:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000832:	2300      	movs	r3, #0
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f8bc 	bl	80019b8 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000846:	f7ff ffaf 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800087a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800087e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000894:	2307      	movs	r3, #7
 8000896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0xbc>)
 80008a2:	f000 f9b3 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	37b8      	adds	r7, #184	; 0xb8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004800 	.word	0x40004800
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020c00 	.word	0x40020c00

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f87a 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 f945 	bl	8002bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fdeb 	bl	8000540 <main>
  bx  lr    
 800096a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000978:	08002c98 	.word	0x08002c98
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000980:	200000b0 	.word	0x200000b0

08000984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC_IRQHandler>

08000986 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098a:	2003      	movs	r0, #3
 800098c:	f000 f90a 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f805 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f7ff ff0d 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f917 	bl	8000bf2 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f8ed 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	200000ac 	.word	0x200000ac

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200000ac 	.word	0x200000ac

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <__NVIC_SetPriorityGrouping+0x40>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x40>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	05fa0000 	.word	0x05fa0000

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff47 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff5c 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffb0 	bl	8000b60 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	e175      	b.n	8000f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f040 8164 	bne.w	8000f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d005      	beq.n	8000c62 <HAL_GPIO_Init+0x56>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d130      	bne.n	8000cc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 0201 	and.w	r2, r3, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d017      	beq.n	8000d00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d123      	bne.n	8000d54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	69b9      	ldr	r1, [r7, #24]
 8000d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0203 	and.w	r2, r3, #3
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80be 	beq.w	8000f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b66      	ldr	r3, [pc, #408]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a65      	ldr	r2, [pc, #404]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dae:	4a61      	ldr	r2, [pc, #388]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <HAL_GPIO_Init+0x32c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d037      	beq.n	8000e4a <HAL_GPIO_Init+0x23e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d031      	beq.n	8000e46 <HAL_GPIO_Init+0x23a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d02b      	beq.n	8000e42 <HAL_GPIO_Init+0x236>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a55      	ldr	r2, [pc, #340]	; (8000f44 <HAL_GPIO_Init+0x338>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d025      	beq.n	8000e3e <HAL_GPIO_Init+0x232>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a54      	ldr	r2, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x33c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01f      	beq.n	8000e3a <HAL_GPIO_Init+0x22e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a53      	ldr	r2, [pc, #332]	; (8000f4c <HAL_GPIO_Init+0x340>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x22a>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x344>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a51      	ldr	r2, [pc, #324]	; (8000f54 <HAL_GPIO_Init+0x348>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <HAL_GPIO_Init+0x34c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x350>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000e22:	2309      	movs	r3, #9
 8000e24:	e012      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e26:	230a      	movs	r3, #10
 8000e28:	e010      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	e00e      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00c      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e32:	2306      	movs	r3, #6
 8000e34:	e00a      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e008      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x240>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	f002 0203 	and.w	r2, r2, #3
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e5c:	4935      	ldr	r1, [pc, #212]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8e:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_GPIO_Init+0x354>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	f67f ae86 	bls.w	8000c2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	40021800 	.word	0x40021800
 8000f54:	40021c00 	.word	0x40021c00
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	40022400 	.word	0x40022400
 8000f60:	40013c00 	.word	0x40013c00

08000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
 8000f70:	4613      	mov	r3, r2
 8000f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000f80:	e003      	b.n	8000f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	041a      	lsls	r2, r3, #16
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	619a      	str	r2, [r3, #24]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe6:	f7ff fd1f 	bl	8000a28 <HAL_GetTick>
 8000fea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fec:	e009      	b.n	8001002 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fee:	f7ff fd1b 	bl	8000a28 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ffc:	d901      	bls.n	8001002 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e022      	b.n	8001048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100e:	d1ee      	bne.n	8000fee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff fd04 	bl	8000a28 <HAL_GetTick>
 8001020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001022:	e009      	b.n	8001038 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001024:	f7ff fd00 	bl	8000a28 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d901      	bls.n	8001038 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e007      	b.n	8001048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_PWREx_EnableOverDrive+0x9c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001044:	d1ee      	bne.n	8001024 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e29b      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800107c:	4b96      	ldr	r3, [pc, #600]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b04      	cmp	r3, #4
 8001086:	d00c      	beq.n	80010a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001088:	4b93      	ldr	r3, [pc, #588]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b08      	cmp	r3, #8
 8001092:	d112      	bne.n	80010ba <HAL_RCC_OscConfig+0x62>
 8001094:	4b90      	ldr	r3, [pc, #576]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a0:	d10b      	bne.n	80010ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a2:	4b8d      	ldr	r3, [pc, #564]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d06c      	beq.n	8001188 <HAL_RCC_OscConfig+0x130>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d168      	bne.n	8001188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e275      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x7a>
 80010c4:	4b84      	ldr	r3, [pc, #528]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a83      	ldr	r2, [pc, #524]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e02e      	b.n	8001130 <HAL_RCC_OscConfig+0xd8>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x9c>
 80010da:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7e      	ldr	r2, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a7b      	ldr	r2, [pc, #492]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xd8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0xc0>
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a72      	ldr	r2, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xd8>
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6e      	ldr	r2, [pc, #440]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a6b      	ldr	r2, [pc, #428]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fc76 	bl	8000a28 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fc72 	bl	8000a28 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e229      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xe8>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fc62 	bl	8000a28 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fc5e 	bl	8000a28 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e215      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x110>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d069      	beq.n	800126a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001196:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x190>
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1e9      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	493d      	ldr	r1, [pc, #244]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	e040      	b.n	800126a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d023      	beq.n	8001238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a38      	ldr	r2, [pc, #224]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc14 	bl	8000a28 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fc10 	bl	8000a28 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1c7      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4929      	ldr	r1, [pc, #164]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001232:	4313      	orrs	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
 8001236:	e018      	b.n	800126a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fbf0 	bl	8000a28 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fbec 	bl	8000a28 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1a3      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d038      	beq.n	80012e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d019      	beq.n	80012b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff fbcd 	bl	8000a28 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fbc9 	bl	8000a28 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e180      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80012a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x23a>
 80012b0:	e01a      	b.n	80012e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80012b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_RCC_OscConfig+0x280>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012be:	f7ff fbb3 	bl	8000a28 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fbaf 	bl	8000a28 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d903      	bls.n	80012dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e166      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
 80012d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	4b92      	ldr	r3, [pc, #584]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80012de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ee      	bne.n	80012c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a4 	beq.w	800143e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b8c      	ldr	r3, [pc, #560]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10d      	bne.n	800131e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a88      	ldr	r2, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b86      	ldr	r3, [pc, #536]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131e:	4b83      	ldr	r3, [pc, #524]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d118      	bne.n	800135c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800132a:	4b80      	ldr	r3, [pc, #512]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7f      	ldr	r2, [pc, #508]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb77 	bl	8000a28 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fb73 	bl	8000a28 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e12a      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x4d4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x31a>
 8001364:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6713      	str	r3, [r2, #112]	; 0x70
 8001370:	e02d      	b.n	80013ce <HAL_RCC_OscConfig+0x376>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x33c>
 800137a:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a6a      	ldr	r2, [pc, #424]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
 8001386:	4b68      	ldr	r3, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a67      	ldr	r2, [pc, #412]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800138c:	f023 0304 	bic.w	r3, r3, #4
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	e01c      	b.n	80013ce <HAL_RCC_OscConfig+0x376>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d10c      	bne.n	80013b6 <HAL_RCC_OscConfig+0x35e>
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
 80013a8:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a5e      	ldr	r2, [pc, #376]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
 80013b4:	e00b      	b.n	80013ce <HAL_RCC_OscConfig+0x376>
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c6:	4a58      	ldr	r2, [pc, #352]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d015      	beq.n	8001402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff fb27 	bl	8000a28 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fb23 	bl	8000a28 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0d8      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ee      	beq.n	80013de <HAL_RCC_OscConfig+0x386>
 8001400:	e014      	b.n	800142c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fb11 	bl	8000a28 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff fb0d 	bl	8000a28 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e0c2      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ee      	bne.n	800140a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d105      	bne.n	800143e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80ae 	beq.w	80015a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d06d      	beq.n	8001530 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d14b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a31      	ldr	r2, [pc, #196]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fade 	bl	8000a28 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fada 	bl	8000a28 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e091      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	071b      	lsls	r3, r3, #28
 80014ba:	491b      	ldr	r1, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff faac 	bl	8000a28 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff faa8 	bl	8000a28 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e05f      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x47c>
 80014f2:	e057      	b.n	80015a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 80014fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fa92 	bl	8000a28 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fa8e 	bl	8000a28 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x4b0>
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x54c>
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <HAL_RCC_OscConfig+0x558>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d030      	beq.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d129      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d122      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001566:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001568:	4293      	cmp	r3, r2
 800156a:	d119      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	3b01      	subs	r3, #1
 800157a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d10f      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0d0      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d910      	bls.n	80015fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 020f 	bic.w	r2, r3, #15
 80015e2:	4965      	ldr	r1, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800161a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d040      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d115      	bne.n	8001696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e073      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06b      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 0203 	bic.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4936      	ldr	r1, [pc, #216]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff f9be 	bl	8000a28 <HAL_GetTick>
 80016ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b0:	f7ff f9ba 	bl	8000a28 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e053      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 020c 	and.w	r2, r3, #12
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1eb      	bne.n	80016b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d210      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 020f 	bic.w	r2, r3, #15
 80016ee:	4922      	ldr	r1, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	490a      	ldr	r1, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1cc>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1d0>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1d4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f91a 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40023800 	.word	0x40023800
 8001780:	08002c70 	.word	0x08002c70
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a4:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d00d      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x40>
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	f200 80bd 	bhi.w	8001930 <HAL_RCC_GetSysClockFreq+0x1a4>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x34>
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d003      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017be:	e0b7      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b61      	ldr	r3, [pc, #388]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017c2:	60bb      	str	r3, [r7, #8]
      break;
 80017c4:	e0b7      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c6:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017c8:	60bb      	str	r3, [r7, #8]
      break;
 80017ca:	e0b4      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d04d      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	461a      	mov	r2, r3
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	ea02 0800 	and.w	r8, r2, r0
 80017fa:	ea03 0901 	and.w	r9, r3, r1
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	014b      	lsls	r3, r1, #5
 800180c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001810:	0142      	lsls	r2, r0, #5
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	ebb0 0008 	subs.w	r0, r0, r8
 800181a:	eb61 0109 	sbc.w	r1, r1, r9
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800182c:	0182      	lsls	r2, r0, #6
 800182e:	1a12      	subs	r2, r2, r0
 8001830:	eb63 0301 	sbc.w	r3, r3, r1
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	00d9      	lsls	r1, r3, #3
 800183e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001842:	00d0      	lsls	r0, r2, #3
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	eb12 0208 	adds.w	r2, r2, r8
 800184c:	eb43 0309 	adc.w	r3, r3, r9
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	0259      	lsls	r1, r3, #9
 800185a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800185e:	0250      	lsls	r0, r2, #9
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	f7fe fcea 	bl	8000248 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e04a      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	461a      	mov	r2, r3
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	ea02 0400 	and.w	r4, r2, r0
 8001896:	ea03 0501 	and.w	r5, r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	014b      	lsls	r3, r1, #5
 80018a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ac:	0142      	lsls	r2, r0, #5
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	1b00      	subs	r0, r0, r4
 80018b4:	eb61 0105 	sbc.w	r1, r1, r5
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	018b      	lsls	r3, r1, #6
 80018c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018c6:	0182      	lsls	r2, r0, #6
 80018c8:	1a12      	subs	r2, r2, r0
 80018ca:	eb63 0301 	sbc.w	r3, r3, r1
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	00d9      	lsls	r1, r3, #3
 80018d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018dc:	00d0      	lsls	r0, r2, #3
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	1912      	adds	r2, r2, r4
 80018e4:	eb45 0303 	adc.w	r3, r5, r3
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	0299      	lsls	r1, r3, #10
 80018f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018f6:	0290      	lsls	r0, r2, #10
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	461a      	mov	r2, r3
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	f7fe fc9e 	bl	8000248 <__aeabi_uldivmod>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4613      	mov	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	60bb      	str	r3, [r7, #8]
      break;
 800192e:	e002      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001932:	60bb      	str	r3, [r7, #8]
      break;
 8001934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001936:	68bb      	ldr	r3, [r7, #8]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	00f42400 	.word	0x00f42400
 800194c:	007a1200 	.word	0x007a1200

08001950 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_GetHCLKFreq+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff0 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001970:	4602      	mov	r2, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0a9b      	lsrs	r3, r3, #10
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4903      	ldr	r1, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5ccb      	ldrb	r3, [r1, r3]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	08002c80 	.word	0x08002c80

08001990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001994:	f7ff ffdc 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	0b5b      	lsrs	r3, r3, #13
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08002c80 	.word	0x08002c80

080019b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80019e0:	4b69      	ldr	r3, [pc, #420]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a68      	ldr	r2, [pc, #416]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019ea:	6093      	str	r3, [r2, #8]
 80019ec:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	4964      	ldr	r1, [pc, #400]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d017      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	4959      	ldr	r1, [pc, #356]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a30:	d101      	bne.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d017      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	494a      	ldr	r1, [pc, #296]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 808b 	beq.w	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4a39      	ldr	r2, [pc, #228]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa8:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac0:	f7fe ffb2 	bl	8000a28 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac8:	f7fe ffae 	bl	8000a28 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e38f      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d035      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d02e      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	4a1a      	ldr	r2, [pc, #104]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d114      	bne.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7fe ff76 	bl	8000a28 <HAL_GetTick>
 8001b3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7fe ff72 	bl	8000a28 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e351      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ee      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b6e:	d111      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b7e:	400b      	ands	r3, r1
 8001b80:	4901      	ldr	r1, [pc, #4]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	0ffffcff 	.word	0x0ffffcff
 8001b94:	4bb3      	ldr	r3, [pc, #716]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4ab2      	ldr	r2, [pc, #712]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b9e:	6093      	str	r3, [r2, #8]
 8001ba0:	4bb0      	ldr	r3, [pc, #704]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	49ad      	ldr	r1, [pc, #692]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bbe:	4ba9      	ldr	r3, [pc, #676]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc4:	4aa7      	ldr	r2, [pc, #668]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bce:	4ba5      	ldr	r3, [pc, #660]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	49a2      	ldr	r1, [pc, #648]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00a      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bec:	4b9d      	ldr	r3, [pc, #628]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bfa:	499a      	ldr	r1, [pc, #616]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c0e:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c1c:	4991      	ldr	r1, [pc, #580]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c30:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c3e:	4989      	ldr	r1, [pc, #548]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c52:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4980      	ldr	r1, [pc, #512]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00a      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c74:	4b7b      	ldr	r3, [pc, #492]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f023 0203 	bic.w	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4978      	ldr	r1, [pc, #480]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c96:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f023 020c 	bic.w	r2, r3, #12
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca4:	496f      	ldr	r1, [pc, #444]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4967      	ldr	r1, [pc, #412]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce8:	495e      	ldr	r1, [pc, #376]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00a      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	4956      	ldr	r1, [pc, #344]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	494d      	ldr	r1, [pc, #308]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00a      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d40:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	4945      	ldr	r1, [pc, #276]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d62:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d70:	493c      	ldr	r1, [pc, #240]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d92:	4934      	ldr	r1, [pc, #208]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d011      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001db4:	492b      	ldr	r1, [pc, #172]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dc4:	d101      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df4:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00b      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e18:	4912      	ldr	r1, [pc, #72]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e3c:	4909      	ldr	r1, [pc, #36]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00f      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e60:	e002      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	4986      	ldr	r1, [pc, #536]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e7c:	4b81      	ldr	r3, [pc, #516]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e8c:	497d      	ldr	r1, [pc, #500]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d006      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80d6 	beq.w	8002054 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ea8:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fdb8 	bl	8000a28 <HAL_GetTick>
 8001eb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ebc:	f7fe fdb4 	bl	8000a28 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e195      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ece:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d021      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11d      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f02:	0e1b      	lsrs	r3, r3, #24
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	019a      	lsls	r2, r3, #6
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	071b      	lsls	r3, r3, #28
 8001f22:	4958      	ldr	r1, [pc, #352]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d02e      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f54:	d129      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f64:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f6a:	0f1b      	lsrs	r3, r3, #28
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	019a      	lsls	r2, r3, #6
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	061b      	lsls	r3, r3, #24
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	071b      	lsls	r3, r3, #28
 8001f8a:	493e      	ldr	r1, [pc, #248]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f92:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f98:	f023 021f 	bic.w	r2, r3, #31
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4938      	ldr	r1, [pc, #224]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01d      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fb6:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fbc:	0e1b      	lsrs	r3, r3, #24
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fca:	0f1b      	lsrs	r3, r3, #28
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	019a      	lsls	r2, r3, #6
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	061b      	lsls	r3, r3, #24
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	071b      	lsls	r3, r3, #28
 8001fea:	4926      	ldr	r1, [pc, #152]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d011      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	019a      	lsls	r2, r3, #6
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	071b      	lsls	r3, r3, #28
 800201a:	491a      	ldr	r1, [pc, #104]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800202c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202e:	f7fe fcfb 	bl	8000a28 <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002036:	f7fe fcf7 	bl	8000a28 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	; 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0d8      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 80ce 	bne.w	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002068:	f7fe fcde 	bl	8000a28 <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800206e:	e00b      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002070:	f7fe fcda 	bl	8000a28 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d904      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0bb      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d0ec      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02e      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d12a      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020be:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	0f1b      	lsrs	r3, r3, #28
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	019a      	lsls	r2, r3, #6
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	071b      	lsls	r3, r3, #28
 80020f2:	4944      	ldr	r1, [pc, #272]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002100:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	493d      	ldr	r1, [pc, #244]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d022      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002128:	d11d      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	0e1b      	lsrs	r3, r3, #24
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	0f1b      	lsrs	r3, r3, #28
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	019a      	lsls	r2, r3, #6
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	061b      	lsls	r3, r3, #24
 8002158:	431a      	orrs	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	071b      	lsls	r3, r3, #28
 800215e:	4929      	ldr	r1, [pc, #164]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d028      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	0e1b      	lsrs	r3, r3, #24
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	0c1b      	lsrs	r3, r3, #16
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	019a      	lsls	r2, r3, #6
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	4917      	ldr	r1, [pc, #92]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	4911      	ldr	r1, [pc, #68]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe fc2a 	bl	8000a28 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021d8:	f7fe fc26 	bl	8000a28 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e007      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f6:	d1ef      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e040      	b.n	800229c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fae6 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0201 	bic.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f8c0 	bl	80023cc <UART_SetConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e022      	b.n	800229c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fb16 	bl	8002890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fb9d 	bl	80029d4 <UART_CheckIdleState>
 800229a:	4603      	mov	r3, r0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	f040 8081 	bne.w	80023c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_UART_Transmit+0x26>
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e079      	b.n	80023c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Transmit+0x38>
 80022d8:	2302      	movs	r3, #2
 80022da:	e072      	b.n	80023c2 <HAL_UART_Transmit+0x11e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fb99 	bl	8000a28 <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002310:	d108      	bne.n	8002324 <HAL_UART_Transmit+0x80>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e003      	b.n	800232c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002334:	e02c      	b.n	8002390 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2200      	movs	r2, #0
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fb90 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e038      	b.n	80023c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10b      	bne.n	800236e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	3302      	adds	r3, #2
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	e007      	b.n	800237e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1cc      	bne.n	8002336 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2140      	movs	r1, #64	; 0x40
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fb5d 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e005      	b.n	80023c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4ba7      	ldr	r3, [pc, #668]	; (8002694 <UART_SetConfig+0x2c8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	6979      	ldr	r1, [r7, #20]
 8002400:	430b      	orrs	r3, r1
 8002402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a95      	ldr	r2, [pc, #596]	; (8002698 <UART_SetConfig+0x2cc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d120      	bne.n	800248a <UART_SetConfig+0xbe>
 8002448:	4b94      	ldr	r3, [pc, #592]	; (800269c <UART_SetConfig+0x2d0>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b03      	cmp	r3, #3
 8002454:	d816      	bhi.n	8002484 <UART_SetConfig+0xb8>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <UART_SetConfig+0x90>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002479 	.word	0x08002479
 8002464:	08002473 	.word	0x08002473
 8002468:	0800247f 	.word	0x0800247f
 800246c:	2301      	movs	r3, #1
 800246e:	77fb      	strb	r3, [r7, #31]
 8002470:	e14f      	b.n	8002712 <UART_SetConfig+0x346>
 8002472:	2302      	movs	r3, #2
 8002474:	77fb      	strb	r3, [r7, #31]
 8002476:	e14c      	b.n	8002712 <UART_SetConfig+0x346>
 8002478:	2304      	movs	r3, #4
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e149      	b.n	8002712 <UART_SetConfig+0x346>
 800247e:	2308      	movs	r3, #8
 8002480:	77fb      	strb	r3, [r7, #31]
 8002482:	e146      	b.n	8002712 <UART_SetConfig+0x346>
 8002484:	2310      	movs	r3, #16
 8002486:	77fb      	strb	r3, [r7, #31]
 8002488:	e143      	b.n	8002712 <UART_SetConfig+0x346>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a84      	ldr	r2, [pc, #528]	; (80026a0 <UART_SetConfig+0x2d4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d132      	bne.n	80024fa <UART_SetConfig+0x12e>
 8002494:	4b81      	ldr	r3, [pc, #516]	; (800269c <UART_SetConfig+0x2d0>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d828      	bhi.n	80024f4 <UART_SetConfig+0x128>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <UART_SetConfig+0xdc>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	080024f5 	.word	0x080024f5
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	080024e9 	.word	0x080024e9
 80024bc:	080024f5 	.word	0x080024f5
 80024c0:	080024f5 	.word	0x080024f5
 80024c4:	080024f5 	.word	0x080024f5
 80024c8:	080024e3 	.word	0x080024e3
 80024cc:	080024f5 	.word	0x080024f5
 80024d0:	080024f5 	.word	0x080024f5
 80024d4:	080024f5 	.word	0x080024f5
 80024d8:	080024ef 	.word	0x080024ef
 80024dc:	2300      	movs	r3, #0
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	e117      	b.n	8002712 <UART_SetConfig+0x346>
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	e114      	b.n	8002712 <UART_SetConfig+0x346>
 80024e8:	2304      	movs	r3, #4
 80024ea:	77fb      	strb	r3, [r7, #31]
 80024ec:	e111      	b.n	8002712 <UART_SetConfig+0x346>
 80024ee:	2308      	movs	r3, #8
 80024f0:	77fb      	strb	r3, [r7, #31]
 80024f2:	e10e      	b.n	8002712 <UART_SetConfig+0x346>
 80024f4:	2310      	movs	r3, #16
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	e10b      	b.n	8002712 <UART_SetConfig+0x346>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <UART_SetConfig+0x2d8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d120      	bne.n	8002546 <UART_SetConfig+0x17a>
 8002504:	4b65      	ldr	r3, [pc, #404]	; (800269c <UART_SetConfig+0x2d0>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800250e:	2b30      	cmp	r3, #48	; 0x30
 8002510:	d013      	beq.n	800253a <UART_SetConfig+0x16e>
 8002512:	2b30      	cmp	r3, #48	; 0x30
 8002514:	d814      	bhi.n	8002540 <UART_SetConfig+0x174>
 8002516:	2b20      	cmp	r3, #32
 8002518:	d009      	beq.n	800252e <UART_SetConfig+0x162>
 800251a:	2b20      	cmp	r3, #32
 800251c:	d810      	bhi.n	8002540 <UART_SetConfig+0x174>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <UART_SetConfig+0x15c>
 8002522:	2b10      	cmp	r3, #16
 8002524:	d006      	beq.n	8002534 <UART_SetConfig+0x168>
 8002526:	e00b      	b.n	8002540 <UART_SetConfig+0x174>
 8002528:	2300      	movs	r3, #0
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e0f1      	b.n	8002712 <UART_SetConfig+0x346>
 800252e:	2302      	movs	r3, #2
 8002530:	77fb      	strb	r3, [r7, #31]
 8002532:	e0ee      	b.n	8002712 <UART_SetConfig+0x346>
 8002534:	2304      	movs	r3, #4
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	e0eb      	b.n	8002712 <UART_SetConfig+0x346>
 800253a:	2308      	movs	r3, #8
 800253c:	77fb      	strb	r3, [r7, #31]
 800253e:	e0e8      	b.n	8002712 <UART_SetConfig+0x346>
 8002540:	2310      	movs	r3, #16
 8002542:	77fb      	strb	r3, [r7, #31]
 8002544:	e0e5      	b.n	8002712 <UART_SetConfig+0x346>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <UART_SetConfig+0x2dc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d120      	bne.n	8002592 <UART_SetConfig+0x1c6>
 8002550:	4b52      	ldr	r3, [pc, #328]	; (800269c <UART_SetConfig+0x2d0>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800255a:	2bc0      	cmp	r3, #192	; 0xc0
 800255c:	d013      	beq.n	8002586 <UART_SetConfig+0x1ba>
 800255e:	2bc0      	cmp	r3, #192	; 0xc0
 8002560:	d814      	bhi.n	800258c <UART_SetConfig+0x1c0>
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d009      	beq.n	800257a <UART_SetConfig+0x1ae>
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d810      	bhi.n	800258c <UART_SetConfig+0x1c0>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <UART_SetConfig+0x1a8>
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d006      	beq.n	8002580 <UART_SetConfig+0x1b4>
 8002572:	e00b      	b.n	800258c <UART_SetConfig+0x1c0>
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
 8002578:	e0cb      	b.n	8002712 <UART_SetConfig+0x346>
 800257a:	2302      	movs	r3, #2
 800257c:	77fb      	strb	r3, [r7, #31]
 800257e:	e0c8      	b.n	8002712 <UART_SetConfig+0x346>
 8002580:	2304      	movs	r3, #4
 8002582:	77fb      	strb	r3, [r7, #31]
 8002584:	e0c5      	b.n	8002712 <UART_SetConfig+0x346>
 8002586:	2308      	movs	r3, #8
 8002588:	77fb      	strb	r3, [r7, #31]
 800258a:	e0c2      	b.n	8002712 <UART_SetConfig+0x346>
 800258c:	2310      	movs	r3, #16
 800258e:	77fb      	strb	r3, [r7, #31]
 8002590:	e0bf      	b.n	8002712 <UART_SetConfig+0x346>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a45      	ldr	r2, [pc, #276]	; (80026ac <UART_SetConfig+0x2e0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d125      	bne.n	80025e8 <UART_SetConfig+0x21c>
 800259c:	4b3f      	ldr	r3, [pc, #252]	; (800269c <UART_SetConfig+0x2d0>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025aa:	d017      	beq.n	80025dc <UART_SetConfig+0x210>
 80025ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b0:	d817      	bhi.n	80025e2 <UART_SetConfig+0x216>
 80025b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b6:	d00b      	beq.n	80025d0 <UART_SetConfig+0x204>
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d811      	bhi.n	80025e2 <UART_SetConfig+0x216>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <UART_SetConfig+0x1fe>
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c6:	d006      	beq.n	80025d6 <UART_SetConfig+0x20a>
 80025c8:	e00b      	b.n	80025e2 <UART_SetConfig+0x216>
 80025ca:	2300      	movs	r3, #0
 80025cc:	77fb      	strb	r3, [r7, #31]
 80025ce:	e0a0      	b.n	8002712 <UART_SetConfig+0x346>
 80025d0:	2302      	movs	r3, #2
 80025d2:	77fb      	strb	r3, [r7, #31]
 80025d4:	e09d      	b.n	8002712 <UART_SetConfig+0x346>
 80025d6:	2304      	movs	r3, #4
 80025d8:	77fb      	strb	r3, [r7, #31]
 80025da:	e09a      	b.n	8002712 <UART_SetConfig+0x346>
 80025dc:	2308      	movs	r3, #8
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	e097      	b.n	8002712 <UART_SetConfig+0x346>
 80025e2:	2310      	movs	r3, #16
 80025e4:	77fb      	strb	r3, [r7, #31]
 80025e6:	e094      	b.n	8002712 <UART_SetConfig+0x346>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <UART_SetConfig+0x2e4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d125      	bne.n	800263e <UART_SetConfig+0x272>
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <UART_SetConfig+0x2d0>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002600:	d017      	beq.n	8002632 <UART_SetConfig+0x266>
 8002602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002606:	d817      	bhi.n	8002638 <UART_SetConfig+0x26c>
 8002608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800260c:	d00b      	beq.n	8002626 <UART_SetConfig+0x25a>
 800260e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002612:	d811      	bhi.n	8002638 <UART_SetConfig+0x26c>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <UART_SetConfig+0x254>
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261c:	d006      	beq.n	800262c <UART_SetConfig+0x260>
 800261e:	e00b      	b.n	8002638 <UART_SetConfig+0x26c>
 8002620:	2301      	movs	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	e075      	b.n	8002712 <UART_SetConfig+0x346>
 8002626:	2302      	movs	r3, #2
 8002628:	77fb      	strb	r3, [r7, #31]
 800262a:	e072      	b.n	8002712 <UART_SetConfig+0x346>
 800262c:	2304      	movs	r3, #4
 800262e:	77fb      	strb	r3, [r7, #31]
 8002630:	e06f      	b.n	8002712 <UART_SetConfig+0x346>
 8002632:	2308      	movs	r3, #8
 8002634:	77fb      	strb	r3, [r7, #31]
 8002636:	e06c      	b.n	8002712 <UART_SetConfig+0x346>
 8002638:	2310      	movs	r3, #16
 800263a:	77fb      	strb	r3, [r7, #31]
 800263c:	e069      	b.n	8002712 <UART_SetConfig+0x346>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <UART_SetConfig+0x2e8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d137      	bne.n	80026b8 <UART_SetConfig+0x2ec>
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <UART_SetConfig+0x2d0>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002656:	d017      	beq.n	8002688 <UART_SetConfig+0x2bc>
 8002658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800265c:	d817      	bhi.n	800268e <UART_SetConfig+0x2c2>
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002662:	d00b      	beq.n	800267c <UART_SetConfig+0x2b0>
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d811      	bhi.n	800268e <UART_SetConfig+0x2c2>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <UART_SetConfig+0x2aa>
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d006      	beq.n	8002682 <UART_SetConfig+0x2b6>
 8002674:	e00b      	b.n	800268e <UART_SetConfig+0x2c2>
 8002676:	2300      	movs	r3, #0
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e04a      	b.n	8002712 <UART_SetConfig+0x346>
 800267c:	2302      	movs	r3, #2
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e047      	b.n	8002712 <UART_SetConfig+0x346>
 8002682:	2304      	movs	r3, #4
 8002684:	77fb      	strb	r3, [r7, #31]
 8002686:	e044      	b.n	8002712 <UART_SetConfig+0x346>
 8002688:	2308      	movs	r3, #8
 800268a:	77fb      	strb	r3, [r7, #31]
 800268c:	e041      	b.n	8002712 <UART_SetConfig+0x346>
 800268e:	2310      	movs	r3, #16
 8002690:	77fb      	strb	r3, [r7, #31]
 8002692:	e03e      	b.n	8002712 <UART_SetConfig+0x346>
 8002694:	efff69f3 	.word	0xefff69f3
 8002698:	40011000 	.word	0x40011000
 800269c:	40023800 	.word	0x40023800
 80026a0:	40004400 	.word	0x40004400
 80026a4:	40004800 	.word	0x40004800
 80026a8:	40004c00 	.word	0x40004c00
 80026ac:	40005000 	.word	0x40005000
 80026b0:	40011400 	.word	0x40011400
 80026b4:	40007800 	.word	0x40007800
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a71      	ldr	r2, [pc, #452]	; (8002884 <UART_SetConfig+0x4b8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d125      	bne.n	800270e <UART_SetConfig+0x342>
 80026c2:	4b71      	ldr	r3, [pc, #452]	; (8002888 <UART_SetConfig+0x4bc>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026d0:	d017      	beq.n	8002702 <UART_SetConfig+0x336>
 80026d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026d6:	d817      	bhi.n	8002708 <UART_SetConfig+0x33c>
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	d00b      	beq.n	80026f6 <UART_SetConfig+0x32a>
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d811      	bhi.n	8002708 <UART_SetConfig+0x33c>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <UART_SetConfig+0x324>
 80026e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ec:	d006      	beq.n	80026fc <UART_SetConfig+0x330>
 80026ee:	e00b      	b.n	8002708 <UART_SetConfig+0x33c>
 80026f0:	2300      	movs	r3, #0
 80026f2:	77fb      	strb	r3, [r7, #31]
 80026f4:	e00d      	b.n	8002712 <UART_SetConfig+0x346>
 80026f6:	2302      	movs	r3, #2
 80026f8:	77fb      	strb	r3, [r7, #31]
 80026fa:	e00a      	b.n	8002712 <UART_SetConfig+0x346>
 80026fc:	2304      	movs	r3, #4
 80026fe:	77fb      	strb	r3, [r7, #31]
 8002700:	e007      	b.n	8002712 <UART_SetConfig+0x346>
 8002702:	2308      	movs	r3, #8
 8002704:	77fb      	strb	r3, [r7, #31]
 8002706:	e004      	b.n	8002712 <UART_SetConfig+0x346>
 8002708:	2310      	movs	r3, #16
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e001      	b.n	8002712 <UART_SetConfig+0x346>
 800270e:	2310      	movs	r3, #16
 8002710:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271a:	d15a      	bne.n	80027d2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800271c:	7ffb      	ldrb	r3, [r7, #31]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d827      	bhi.n	8002772 <UART_SetConfig+0x3a6>
 8002722:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <UART_SetConfig+0x35c>)
 8002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002728:	0800274d 	.word	0x0800274d
 800272c:	08002755 	.word	0x08002755
 8002730:	0800275d 	.word	0x0800275d
 8002734:	08002773 	.word	0x08002773
 8002738:	08002763 	.word	0x08002763
 800273c:	08002773 	.word	0x08002773
 8002740:	08002773 	.word	0x08002773
 8002744:	08002773 	.word	0x08002773
 8002748:	0800276b 	.word	0x0800276b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800274c:	f7ff f90c 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8002750:	61b8      	str	r0, [r7, #24]
        break;
 8002752:	e013      	b.n	800277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002754:	f7ff f91c 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8002758:	61b8      	str	r0, [r7, #24]
        break;
 800275a:	e00f      	b.n	800277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <UART_SetConfig+0x4c0>)
 800275e:	61bb      	str	r3, [r7, #24]
        break;
 8002760:	e00c      	b.n	800277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002762:	f7ff f813 	bl	800178c <HAL_RCC_GetSysClockFreq>
 8002766:	61b8      	str	r0, [r7, #24]
        break;
 8002768:	e008      	b.n	800277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800276a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800276e:	61bb      	str	r3, [r7, #24]
        break;
 8002770:	e004      	b.n	800277c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	77bb      	strb	r3, [r7, #30]
        break;
 800277a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d074      	beq.n	800286c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	005a      	lsls	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	441a      	add	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	d916      	bls.n	80027cc <UART_SetConfig+0x400>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d212      	bcs.n	80027cc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f023 030f 	bic.w	r3, r3, #15
 80027ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	89fb      	ldrh	r3, [r7, #14]
 80027be:	4313      	orrs	r3, r2
 80027c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	89fa      	ldrh	r2, [r7, #14]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e04f      	b.n	800286c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77bb      	strb	r3, [r7, #30]
 80027d0:	e04c      	b.n	800286c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027d2:	7ffb      	ldrb	r3, [r7, #31]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d828      	bhi.n	800282a <UART_SetConfig+0x45e>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <UART_SetConfig+0x414>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002805 	.word	0x08002805
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002815 	.word	0x08002815
 80027ec:	0800282b 	.word	0x0800282b
 80027f0:	0800281b 	.word	0x0800281b
 80027f4:	0800282b 	.word	0x0800282b
 80027f8:	0800282b 	.word	0x0800282b
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	08002823 	.word	0x08002823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff f8b0 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8002808:	61b8      	str	r0, [r7, #24]
        break;
 800280a:	e013      	b.n	8002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800280c:	f7ff f8c0 	bl	8001990 <HAL_RCC_GetPCLK2Freq>
 8002810:	61b8      	str	r0, [r7, #24]
        break;
 8002812:	e00f      	b.n	8002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <UART_SetConfig+0x4c0>)
 8002816:	61bb      	str	r3, [r7, #24]
        break;
 8002818:	e00c      	b.n	8002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281a:	f7fe ffb7 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800281e:	61b8      	str	r0, [r7, #24]
        break;
 8002820:	e008      	b.n	8002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e004      	b.n	8002834 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	77bb      	strb	r3, [r7, #30]
        break;
 8002832:	bf00      	nop
    }

    if (pclk != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	085a      	lsrs	r2, r3, #1
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	441a      	add	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d909      	bls.n	8002868 <UART_SetConfig+0x49c>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285a:	d205      	bcs.n	8002868 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	e001      	b.n	800286c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002878:	7fbb      	ldrb	r3, [r7, #30]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40007c00 	.word	0x40007c00
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400

08002890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01a      	beq.n	80029a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298e:	d10a      	bne.n	80029a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af02      	add	r7, sp, #8
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029e4:	f7fe f820 	bl	8000a28 <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d10e      	bne.n	8002a16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f82d 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e023      	b.n	8002a5e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d10e      	bne.n	8002a42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f817 	bl	8002a66 <UART_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e00d      	b.n	8002a5e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b09c      	sub	sp, #112	; 0x70
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a76:	e0a5      	b.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	f000 80a1 	beq.w	8002bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fd ffd1 	bl	8000a28 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <UART_WaitOnFlagUntilTimeout+0x32>
 8002a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d13e      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
 8002aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002aac:	667b      	str	r3, [r7, #100]	; 0x64
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e6      	bne.n	8002a98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aea:	64ba      	str	r2, [r7, #72]	; 0x48
 8002aec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002af0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e067      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d04f      	beq.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	d147      	bne.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e6      	bne.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b90:	623a      	str	r2, [r7, #32]
 8002b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	69f9      	ldr	r1, [r7, #28]
 8002b96:	6a3a      	ldr	r2, [r7, #32]
 8002b98:	e841 2300 	strex	r3, r2, [r1]
 8002b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e5      	bne.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e010      	b.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	f43f af4a 	beq.w	8002a78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3770      	adds	r7, #112	; 0x70
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <__libc_init_array>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	4d0d      	ldr	r5, [pc, #52]	; (8002c28 <__libc_init_array+0x38>)
 8002bf4:	4c0d      	ldr	r4, [pc, #52]	; (8002c2c <__libc_init_array+0x3c>)
 8002bf6:	1b64      	subs	r4, r4, r5
 8002bf8:	10a4      	asrs	r4, r4, #2
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	42a6      	cmp	r6, r4
 8002bfe:	d109      	bne.n	8002c14 <__libc_init_array+0x24>
 8002c00:	4d0b      	ldr	r5, [pc, #44]	; (8002c30 <__libc_init_array+0x40>)
 8002c02:	4c0c      	ldr	r4, [pc, #48]	; (8002c34 <__libc_init_array+0x44>)
 8002c04:	f000 f820 	bl	8002c48 <_init>
 8002c08:	1b64      	subs	r4, r4, r5
 8002c0a:	10a4      	asrs	r4, r4, #2
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	42a6      	cmp	r6, r4
 8002c10:	d105      	bne.n	8002c1e <__libc_init_array+0x2e>
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c18:	4798      	blx	r3
 8002c1a:	3601      	adds	r6, #1
 8002c1c:	e7ee      	b.n	8002bfc <__libc_init_array+0xc>
 8002c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c22:	4798      	blx	r3
 8002c24:	3601      	adds	r6, #1
 8002c26:	e7f2      	b.n	8002c0e <__libc_init_array+0x1e>
 8002c28:	08002c90 	.word	0x08002c90
 8002c2c:	08002c90 	.word	0x08002c90
 8002c30:	08002c90 	.word	0x08002c90
 8002c34:	08002c94 	.word	0x08002c94

08002c38 <memset>:
 8002c38:	4402      	add	r2, r0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <memset+0xa>
 8002c40:	4770      	bx	lr
 8002c42:	f803 1b01 	strb.w	r1, [r3], #1
 8002c46:	e7f9      	b.n	8002c3c <memset+0x4>

08002c48 <_init>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	bf00      	nop
 8002c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4e:	bc08      	pop	{r3}
 8002c50:	469e      	mov	lr, r3
 8002c52:	4770      	bx	lr

08002c54 <_fini>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	bf00      	nop
 8002c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5a:	bc08      	pop	{r3}
 8002c5c:	469e      	mov	lr, r3
 8002c5e:	4770      	bx	lr
